// eth_nios_v2_mm_interconnect_0.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 18.0 614

`timescale 1 ps / 1 ps
module eth_nios_v2_mm_interconnect_0 (
		input  wire        clk_0_clk_clk,                                  //                                clk_0_clk.clk
		input  wire        nios2_gen2_0_reset_reset_bridge_in_reset_reset, // nios2_gen2_0_reset_reset_bridge_in_reset.reset
		input  wire [14:0] nios2_gen2_0_data_master_address,               //                 nios2_gen2_0_data_master.address
		output wire        nios2_gen2_0_data_master_waitrequest,           //                                         .waitrequest
		input  wire [3:0]  nios2_gen2_0_data_master_byteenable,            //                                         .byteenable
		input  wire        nios2_gen2_0_data_master_read,                  //                                         .read
		output wire [31:0] nios2_gen2_0_data_master_readdata,              //                                         .readdata
		output wire        nios2_gen2_0_data_master_readdatavalid,         //                                         .readdatavalid
		input  wire        nios2_gen2_0_data_master_write,                 //                                         .write
		input  wire [31:0] nios2_gen2_0_data_master_writedata,             //                                         .writedata
		input  wire        nios2_gen2_0_data_master_debugaccess,           //                                         .debugaccess
		input  wire [14:0] nios2_gen2_0_instruction_master_address,        //          nios2_gen2_0_instruction_master.address
		output wire        nios2_gen2_0_instruction_master_waitrequest,    //                                         .waitrequest
		input  wire        nios2_gen2_0_instruction_master_read,           //                                         .read
		output wire [31:0] nios2_gen2_0_instruction_master_readdata,       //                                         .readdata
		output wire        nios2_gen2_0_instruction_master_readdatavalid,  //                                         .readdatavalid
		input  wire [31:0] rx_dma_descriptor_read_address,                 //                   rx_dma_descriptor_read.address
		output wire        rx_dma_descriptor_read_waitrequest,             //                                         .waitrequest
		input  wire        rx_dma_descriptor_read_read,                    //                                         .read
		output wire [31:0] rx_dma_descriptor_read_readdata,                //                                         .readdata
		output wire        rx_dma_descriptor_read_readdatavalid,           //                                         .readdatavalid
		input  wire [31:0] rx_dma_descriptor_write_address,                //                  rx_dma_descriptor_write.address
		output wire        rx_dma_descriptor_write_waitrequest,            //                                         .waitrequest
		input  wire        rx_dma_descriptor_write_write,                  //                                         .write
		input  wire [31:0] rx_dma_descriptor_write_writedata,              //                                         .writedata
		input  wire [31:0] rx_dma_m_write_address,                         //                           rx_dma_m_write.address
		output wire        rx_dma_m_write_waitrequest,                     //                                         .waitrequest
		input  wire        rx_dma_m_write_write,                           //                                         .write
		input  wire [7:0]  rx_dma_m_write_writedata,                       //                                         .writedata
		input  wire [31:0] tx_dma_descriptor_read_address,                 //                   tx_dma_descriptor_read.address
		output wire        tx_dma_descriptor_read_waitrequest,             //                                         .waitrequest
		input  wire        tx_dma_descriptor_read_read,                    //                                         .read
		output wire [31:0] tx_dma_descriptor_read_readdata,                //                                         .readdata
		output wire        tx_dma_descriptor_read_readdatavalid,           //                                         .readdatavalid
		input  wire [31:0] tx_dma_descriptor_write_address,                //                  tx_dma_descriptor_write.address
		output wire        tx_dma_descriptor_write_waitrequest,            //                                         .waitrequest
		input  wire        tx_dma_descriptor_write_write,                  //                                         .write
		input  wire [31:0] tx_dma_descriptor_write_writedata,              //                                         .writedata
		input  wire [31:0] tx_dma_m_read_address,                          //                            tx_dma_m_read.address
		output wire        tx_dma_m_read_waitrequest,                      //                                         .waitrequest
		input  wire        tx_dma_m_read_read,                             //                                         .read
		output wire [7:0]  tx_dma_m_read_readdata,                         //                                         .readdata
		output wire        tx_dma_m_read_readdatavalid,                    //                                         .readdatavalid
		output wire [1:0]  eth_irq_pio_s1_address,                         //                           eth_irq_pio_s1.address
		output wire        eth_irq_pio_s1_write,                           //                                         .write
		input  wire [31:0] eth_irq_pio_s1_readdata,                        //                                         .readdata
		output wire [31:0] eth_irq_pio_s1_writedata,                       //                                         .writedata
		output wire        eth_irq_pio_s1_chipselect,                      //                                         .chipselect
		output wire [7:0]  header_ram_s1_address,                          //                            header_ram_s1.address
		output wire        header_ram_s1_write,                            //                                         .write
		input  wire [7:0]  header_ram_s1_readdata,                         //                                         .readdata
		output wire [7:0]  header_ram_s1_writedata,                        //                                         .writedata
		output wire        header_ram_s1_chipselect,                       //                                         .chipselect
		output wire        header_ram_s1_clken,                            //                                         .clken
		output wire [0:0]  jtag_uart_0_avalon_jtag_slave_address,          //            jtag_uart_0_avalon_jtag_slave.address
		output wire        jtag_uart_0_avalon_jtag_slave_write,            //                                         .write
		output wire        jtag_uart_0_avalon_jtag_slave_read,             //                                         .read
		input  wire [31:0] jtag_uart_0_avalon_jtag_slave_readdata,         //                                         .readdata
		output wire [31:0] jtag_uart_0_avalon_jtag_slave_writedata,        //                                         .writedata
		input  wire        jtag_uart_0_avalon_jtag_slave_waitrequest,      //                                         .waitrequest
		output wire        jtag_uart_0_avalon_jtag_slave_chipselect,       //                                         .chipselect
		output wire [8:0]  nios2_gen2_0_debug_mem_slave_address,           //             nios2_gen2_0_debug_mem_slave.address
		output wire        nios2_gen2_0_debug_mem_slave_write,             //                                         .write
		output wire        nios2_gen2_0_debug_mem_slave_read,              //                                         .read
		input  wire [31:0] nios2_gen2_0_debug_mem_slave_readdata,          //                                         .readdata
		output wire [31:0] nios2_gen2_0_debug_mem_slave_writedata,         //                                         .writedata
		output wire [3:0]  nios2_gen2_0_debug_mem_slave_byteenable,        //                                         .byteenable
		input  wire        nios2_gen2_0_debug_mem_slave_waitrequest,       //                                         .waitrequest
		output wire        nios2_gen2_0_debug_mem_slave_debugaccess,       //                                         .debugaccess
		output wire [8:0]  rx_buf_ram_s1_address,                          //                            rx_buf_ram_s1.address
		output wire        rx_buf_ram_s1_write,                            //                                         .write
		input  wire [7:0]  rx_buf_ram_s1_readdata,                         //                                         .readdata
		output wire [7:0]  rx_buf_ram_s1_writedata,                        //                                         .writedata
		output wire        rx_buf_ram_s1_chipselect,                       //                                         .chipselect
		output wire        rx_buf_ram_s1_clken,                            //                                         .clken
		output wire [3:0]  rx_dma_csr_address,                             //                               rx_dma_csr.address
		output wire        rx_dma_csr_write,                               //                                         .write
		output wire        rx_dma_csr_read,                                //                                         .read
		input  wire [31:0] rx_dma_csr_readdata,                            //                                         .readdata
		output wire [31:0] rx_dma_csr_writedata,                           //                                         .writedata
		output wire        rx_dma_csr_chipselect,                          //                                         .chipselect
		output wire [10:0] system_ram_s1_address,                          //                            system_ram_s1.address
		output wire        system_ram_s1_write,                            //                                         .write
		input  wire [31:0] system_ram_s1_readdata,                         //                                         .readdata
		output wire [31:0] system_ram_s1_writedata,                        //                                         .writedata
		output wire [3:0]  system_ram_s1_byteenable,                       //                                         .byteenable
		output wire        system_ram_s1_chipselect,                       //                                         .chipselect
		output wire        system_ram_s1_clken,                            //                                         .clken
		output wire [2:0]  timer_0_s1_address,                             //                               timer_0_s1.address
		output wire        timer_0_s1_write,                               //                                         .write
		input  wire [15:0] timer_0_s1_readdata,                            //                                         .readdata
		output wire [15:0] timer_0_s1_writedata,                           //                                         .writedata
		output wire        timer_0_s1_chipselect,                          //                                         .chipselect
		output wire [7:0]  tse_control_port_address,                       //                         tse_control_port.address
		output wire        tse_control_port_write,                         //                                         .write
		output wire        tse_control_port_read,                          //                                         .read
		input  wire [31:0] tse_control_port_readdata,                      //                                         .readdata
		output wire [31:0] tse_control_port_writedata,                     //                                         .writedata
		input  wire        tse_control_port_waitrequest,                   //                                         .waitrequest
		output wire [10:0] tx_buff_ram_s1_address,                         //                           tx_buff_ram_s1.address
		output wire        tx_buff_ram_s1_write,                           //                                         .write
		input  wire [7:0]  tx_buff_ram_s1_readdata,                        //                                         .readdata
		output wire [7:0]  tx_buff_ram_s1_writedata,                       //                                         .writedata
		output wire        tx_buff_ram_s1_chipselect,                      //                                         .chipselect
		output wire        tx_buff_ram_s1_clken,                           //                                         .clken
		output wire [3:0]  tx_dma_csr_address,                             //                               tx_dma_csr.address
		output wire        tx_dma_csr_write,                               //                                         .write
		output wire        tx_dma_csr_read,                                //                                         .read
		input  wire [31:0] tx_dma_csr_readdata,                            //                                         .readdata
		output wire [31:0] tx_dma_csr_writedata,                           //                                         .writedata
		output wire        tx_dma_csr_chipselect                           //                                         .chipselect
	);

	wire          nios2_gen2_0_data_master_translator_avalon_universal_master_0_waitrequest;          // nios2_gen2_0_data_master_agent:av_waitrequest -> nios2_gen2_0_data_master_translator:uav_waitrequest
	wire   [31:0] nios2_gen2_0_data_master_translator_avalon_universal_master_0_readdata;             // nios2_gen2_0_data_master_agent:av_readdata -> nios2_gen2_0_data_master_translator:uav_readdata
	wire          nios2_gen2_0_data_master_translator_avalon_universal_master_0_debugaccess;          // nios2_gen2_0_data_master_translator:uav_debugaccess -> nios2_gen2_0_data_master_agent:av_debugaccess
	wire   [31:0] nios2_gen2_0_data_master_translator_avalon_universal_master_0_address;              // nios2_gen2_0_data_master_translator:uav_address -> nios2_gen2_0_data_master_agent:av_address
	wire          nios2_gen2_0_data_master_translator_avalon_universal_master_0_read;                 // nios2_gen2_0_data_master_translator:uav_read -> nios2_gen2_0_data_master_agent:av_read
	wire    [3:0] nios2_gen2_0_data_master_translator_avalon_universal_master_0_byteenable;           // nios2_gen2_0_data_master_translator:uav_byteenable -> nios2_gen2_0_data_master_agent:av_byteenable
	wire          nios2_gen2_0_data_master_translator_avalon_universal_master_0_readdatavalid;        // nios2_gen2_0_data_master_agent:av_readdatavalid -> nios2_gen2_0_data_master_translator:uav_readdatavalid
	wire          nios2_gen2_0_data_master_translator_avalon_universal_master_0_lock;                 // nios2_gen2_0_data_master_translator:uav_lock -> nios2_gen2_0_data_master_agent:av_lock
	wire          nios2_gen2_0_data_master_translator_avalon_universal_master_0_write;                // nios2_gen2_0_data_master_translator:uav_write -> nios2_gen2_0_data_master_agent:av_write
	wire   [31:0] nios2_gen2_0_data_master_translator_avalon_universal_master_0_writedata;            // nios2_gen2_0_data_master_translator:uav_writedata -> nios2_gen2_0_data_master_agent:av_writedata
	wire    [2:0] nios2_gen2_0_data_master_translator_avalon_universal_master_0_burstcount;           // nios2_gen2_0_data_master_translator:uav_burstcount -> nios2_gen2_0_data_master_agent:av_burstcount
	wire          rx_dma_m_write_translator_avalon_universal_master_0_waitrequest;                    // rx_dma_m_write_agent:av_waitrequest -> rx_dma_m_write_translator:uav_waitrequest
	wire    [7:0] rx_dma_m_write_translator_avalon_universal_master_0_readdata;                       // rx_dma_m_write_agent:av_readdata -> rx_dma_m_write_translator:uav_readdata
	wire          rx_dma_m_write_translator_avalon_universal_master_0_debugaccess;                    // rx_dma_m_write_translator:uav_debugaccess -> rx_dma_m_write_agent:av_debugaccess
	wire   [31:0] rx_dma_m_write_translator_avalon_universal_master_0_address;                        // rx_dma_m_write_translator:uav_address -> rx_dma_m_write_agent:av_address
	wire          rx_dma_m_write_translator_avalon_universal_master_0_read;                           // rx_dma_m_write_translator:uav_read -> rx_dma_m_write_agent:av_read
	wire    [0:0] rx_dma_m_write_translator_avalon_universal_master_0_byteenable;                     // rx_dma_m_write_translator:uav_byteenable -> rx_dma_m_write_agent:av_byteenable
	wire          rx_dma_m_write_translator_avalon_universal_master_0_readdatavalid;                  // rx_dma_m_write_agent:av_readdatavalid -> rx_dma_m_write_translator:uav_readdatavalid
	wire          rx_dma_m_write_translator_avalon_universal_master_0_lock;                           // rx_dma_m_write_translator:uav_lock -> rx_dma_m_write_agent:av_lock
	wire          rx_dma_m_write_translator_avalon_universal_master_0_write;                          // rx_dma_m_write_translator:uav_write -> rx_dma_m_write_agent:av_write
	wire    [7:0] rx_dma_m_write_translator_avalon_universal_master_0_writedata;                      // rx_dma_m_write_translator:uav_writedata -> rx_dma_m_write_agent:av_writedata
	wire    [0:0] rx_dma_m_write_translator_avalon_universal_master_0_burstcount;                     // rx_dma_m_write_translator:uav_burstcount -> rx_dma_m_write_agent:av_burstcount
	wire          rsp_mux_001_src_valid;                                                              // rsp_mux_001:src_valid -> rx_dma_m_write_agent:rp_valid
	wire   [82:0] rsp_mux_001_src_data;                                                               // rsp_mux_001:src_data -> rx_dma_m_write_agent:rp_data
	wire          rsp_mux_001_src_ready;                                                              // rx_dma_m_write_agent:rp_ready -> rsp_mux_001:src_ready
	wire   [10:0] rsp_mux_001_src_channel;                                                            // rsp_mux_001:src_channel -> rx_dma_m_write_agent:rp_channel
	wire          rsp_mux_001_src_startofpacket;                                                      // rsp_mux_001:src_startofpacket -> rx_dma_m_write_agent:rp_startofpacket
	wire          rsp_mux_001_src_endofpacket;                                                        // rsp_mux_001:src_endofpacket -> rx_dma_m_write_agent:rp_endofpacket
	wire          tx_dma_m_read_translator_avalon_universal_master_0_waitrequest;                     // tx_dma_m_read_agent:av_waitrequest -> tx_dma_m_read_translator:uav_waitrequest
	wire    [7:0] tx_dma_m_read_translator_avalon_universal_master_0_readdata;                        // tx_dma_m_read_agent:av_readdata -> tx_dma_m_read_translator:uav_readdata
	wire          tx_dma_m_read_translator_avalon_universal_master_0_debugaccess;                     // tx_dma_m_read_translator:uav_debugaccess -> tx_dma_m_read_agent:av_debugaccess
	wire   [31:0] tx_dma_m_read_translator_avalon_universal_master_0_address;                         // tx_dma_m_read_translator:uav_address -> tx_dma_m_read_agent:av_address
	wire          tx_dma_m_read_translator_avalon_universal_master_0_read;                            // tx_dma_m_read_translator:uav_read -> tx_dma_m_read_agent:av_read
	wire    [0:0] tx_dma_m_read_translator_avalon_universal_master_0_byteenable;                      // tx_dma_m_read_translator:uav_byteenable -> tx_dma_m_read_agent:av_byteenable
	wire          tx_dma_m_read_translator_avalon_universal_master_0_readdatavalid;                   // tx_dma_m_read_agent:av_readdatavalid -> tx_dma_m_read_translator:uav_readdatavalid
	wire          tx_dma_m_read_translator_avalon_universal_master_0_lock;                            // tx_dma_m_read_translator:uav_lock -> tx_dma_m_read_agent:av_lock
	wire          tx_dma_m_read_translator_avalon_universal_master_0_write;                           // tx_dma_m_read_translator:uav_write -> tx_dma_m_read_agent:av_write
	wire    [7:0] tx_dma_m_read_translator_avalon_universal_master_0_writedata;                       // tx_dma_m_read_translator:uav_writedata -> tx_dma_m_read_agent:av_writedata
	wire    [0:0] tx_dma_m_read_translator_avalon_universal_master_0_burstcount;                      // tx_dma_m_read_translator:uav_burstcount -> tx_dma_m_read_agent:av_burstcount
	wire          rx_dma_descriptor_read_translator_avalon_universal_master_0_waitrequest;            // rx_dma_descriptor_read_agent:av_waitrequest -> rx_dma_descriptor_read_translator:uav_waitrequest
	wire   [31:0] rx_dma_descriptor_read_translator_avalon_universal_master_0_readdata;               // rx_dma_descriptor_read_agent:av_readdata -> rx_dma_descriptor_read_translator:uav_readdata
	wire          rx_dma_descriptor_read_translator_avalon_universal_master_0_debugaccess;            // rx_dma_descriptor_read_translator:uav_debugaccess -> rx_dma_descriptor_read_agent:av_debugaccess
	wire   [31:0] rx_dma_descriptor_read_translator_avalon_universal_master_0_address;                // rx_dma_descriptor_read_translator:uav_address -> rx_dma_descriptor_read_agent:av_address
	wire          rx_dma_descriptor_read_translator_avalon_universal_master_0_read;                   // rx_dma_descriptor_read_translator:uav_read -> rx_dma_descriptor_read_agent:av_read
	wire    [3:0] rx_dma_descriptor_read_translator_avalon_universal_master_0_byteenable;             // rx_dma_descriptor_read_translator:uav_byteenable -> rx_dma_descriptor_read_agent:av_byteenable
	wire          rx_dma_descriptor_read_translator_avalon_universal_master_0_readdatavalid;          // rx_dma_descriptor_read_agent:av_readdatavalid -> rx_dma_descriptor_read_translator:uav_readdatavalid
	wire          rx_dma_descriptor_read_translator_avalon_universal_master_0_lock;                   // rx_dma_descriptor_read_translator:uav_lock -> rx_dma_descriptor_read_agent:av_lock
	wire          rx_dma_descriptor_read_translator_avalon_universal_master_0_write;                  // rx_dma_descriptor_read_translator:uav_write -> rx_dma_descriptor_read_agent:av_write
	wire   [31:0] rx_dma_descriptor_read_translator_avalon_universal_master_0_writedata;              // rx_dma_descriptor_read_translator:uav_writedata -> rx_dma_descriptor_read_agent:av_writedata
	wire    [2:0] rx_dma_descriptor_read_translator_avalon_universal_master_0_burstcount;             // rx_dma_descriptor_read_translator:uav_burstcount -> rx_dma_descriptor_read_agent:av_burstcount
	wire          rsp_mux_003_src_valid;                                                              // rsp_mux_003:src_valid -> rx_dma_descriptor_read_agent:rp_valid
	wire  [109:0] rsp_mux_003_src_data;                                                               // rsp_mux_003:src_data -> rx_dma_descriptor_read_agent:rp_data
	wire          rsp_mux_003_src_ready;                                                              // rx_dma_descriptor_read_agent:rp_ready -> rsp_mux_003:src_ready
	wire   [10:0] rsp_mux_003_src_channel;                                                            // rsp_mux_003:src_channel -> rx_dma_descriptor_read_agent:rp_channel
	wire          rsp_mux_003_src_startofpacket;                                                      // rsp_mux_003:src_startofpacket -> rx_dma_descriptor_read_agent:rp_startofpacket
	wire          rsp_mux_003_src_endofpacket;                                                        // rsp_mux_003:src_endofpacket -> rx_dma_descriptor_read_agent:rp_endofpacket
	wire          tx_dma_descriptor_read_translator_avalon_universal_master_0_waitrequest;            // tx_dma_descriptor_read_agent:av_waitrequest -> tx_dma_descriptor_read_translator:uav_waitrequest
	wire   [31:0] tx_dma_descriptor_read_translator_avalon_universal_master_0_readdata;               // tx_dma_descriptor_read_agent:av_readdata -> tx_dma_descriptor_read_translator:uav_readdata
	wire          tx_dma_descriptor_read_translator_avalon_universal_master_0_debugaccess;            // tx_dma_descriptor_read_translator:uav_debugaccess -> tx_dma_descriptor_read_agent:av_debugaccess
	wire   [31:0] tx_dma_descriptor_read_translator_avalon_universal_master_0_address;                // tx_dma_descriptor_read_translator:uav_address -> tx_dma_descriptor_read_agent:av_address
	wire          tx_dma_descriptor_read_translator_avalon_universal_master_0_read;                   // tx_dma_descriptor_read_translator:uav_read -> tx_dma_descriptor_read_agent:av_read
	wire    [3:0] tx_dma_descriptor_read_translator_avalon_universal_master_0_byteenable;             // tx_dma_descriptor_read_translator:uav_byteenable -> tx_dma_descriptor_read_agent:av_byteenable
	wire          tx_dma_descriptor_read_translator_avalon_universal_master_0_readdatavalid;          // tx_dma_descriptor_read_agent:av_readdatavalid -> tx_dma_descriptor_read_translator:uav_readdatavalid
	wire          tx_dma_descriptor_read_translator_avalon_universal_master_0_lock;                   // tx_dma_descriptor_read_translator:uav_lock -> tx_dma_descriptor_read_agent:av_lock
	wire          tx_dma_descriptor_read_translator_avalon_universal_master_0_write;                  // tx_dma_descriptor_read_translator:uav_write -> tx_dma_descriptor_read_agent:av_write
	wire   [31:0] tx_dma_descriptor_read_translator_avalon_universal_master_0_writedata;              // tx_dma_descriptor_read_translator:uav_writedata -> tx_dma_descriptor_read_agent:av_writedata
	wire    [2:0] tx_dma_descriptor_read_translator_avalon_universal_master_0_burstcount;             // tx_dma_descriptor_read_translator:uav_burstcount -> tx_dma_descriptor_read_agent:av_burstcount
	wire          rsp_mux_004_src_valid;                                                              // rsp_mux_004:src_valid -> tx_dma_descriptor_read_agent:rp_valid
	wire  [109:0] rsp_mux_004_src_data;                                                               // rsp_mux_004:src_data -> tx_dma_descriptor_read_agent:rp_data
	wire          rsp_mux_004_src_ready;                                                              // tx_dma_descriptor_read_agent:rp_ready -> rsp_mux_004:src_ready
	wire   [10:0] rsp_mux_004_src_channel;                                                            // rsp_mux_004:src_channel -> tx_dma_descriptor_read_agent:rp_channel
	wire          rsp_mux_004_src_startofpacket;                                                      // rsp_mux_004:src_startofpacket -> tx_dma_descriptor_read_agent:rp_startofpacket
	wire          rsp_mux_004_src_endofpacket;                                                        // rsp_mux_004:src_endofpacket -> tx_dma_descriptor_read_agent:rp_endofpacket
	wire          rx_dma_descriptor_write_translator_avalon_universal_master_0_waitrequest;           // rx_dma_descriptor_write_agent:av_waitrequest -> rx_dma_descriptor_write_translator:uav_waitrequest
	wire   [31:0] rx_dma_descriptor_write_translator_avalon_universal_master_0_readdata;              // rx_dma_descriptor_write_agent:av_readdata -> rx_dma_descriptor_write_translator:uav_readdata
	wire          rx_dma_descriptor_write_translator_avalon_universal_master_0_debugaccess;           // rx_dma_descriptor_write_translator:uav_debugaccess -> rx_dma_descriptor_write_agent:av_debugaccess
	wire   [31:0] rx_dma_descriptor_write_translator_avalon_universal_master_0_address;               // rx_dma_descriptor_write_translator:uav_address -> rx_dma_descriptor_write_agent:av_address
	wire          rx_dma_descriptor_write_translator_avalon_universal_master_0_read;                  // rx_dma_descriptor_write_translator:uav_read -> rx_dma_descriptor_write_agent:av_read
	wire    [3:0] rx_dma_descriptor_write_translator_avalon_universal_master_0_byteenable;            // rx_dma_descriptor_write_translator:uav_byteenable -> rx_dma_descriptor_write_agent:av_byteenable
	wire          rx_dma_descriptor_write_translator_avalon_universal_master_0_readdatavalid;         // rx_dma_descriptor_write_agent:av_readdatavalid -> rx_dma_descriptor_write_translator:uav_readdatavalid
	wire          rx_dma_descriptor_write_translator_avalon_universal_master_0_lock;                  // rx_dma_descriptor_write_translator:uav_lock -> rx_dma_descriptor_write_agent:av_lock
	wire          rx_dma_descriptor_write_translator_avalon_universal_master_0_write;                 // rx_dma_descriptor_write_translator:uav_write -> rx_dma_descriptor_write_agent:av_write
	wire   [31:0] rx_dma_descriptor_write_translator_avalon_universal_master_0_writedata;             // rx_dma_descriptor_write_translator:uav_writedata -> rx_dma_descriptor_write_agent:av_writedata
	wire    [2:0] rx_dma_descriptor_write_translator_avalon_universal_master_0_burstcount;            // rx_dma_descriptor_write_translator:uav_burstcount -> rx_dma_descriptor_write_agent:av_burstcount
	wire          rsp_mux_005_src_valid;                                                              // rsp_mux_005:src_valid -> rx_dma_descriptor_write_agent:rp_valid
	wire  [109:0] rsp_mux_005_src_data;                                                               // rsp_mux_005:src_data -> rx_dma_descriptor_write_agent:rp_data
	wire          rsp_mux_005_src_ready;                                                              // rx_dma_descriptor_write_agent:rp_ready -> rsp_mux_005:src_ready
	wire   [10:0] rsp_mux_005_src_channel;                                                            // rsp_mux_005:src_channel -> rx_dma_descriptor_write_agent:rp_channel
	wire          rsp_mux_005_src_startofpacket;                                                      // rsp_mux_005:src_startofpacket -> rx_dma_descriptor_write_agent:rp_startofpacket
	wire          rsp_mux_005_src_endofpacket;                                                        // rsp_mux_005:src_endofpacket -> rx_dma_descriptor_write_agent:rp_endofpacket
	wire          tx_dma_descriptor_write_translator_avalon_universal_master_0_waitrequest;           // tx_dma_descriptor_write_agent:av_waitrequest -> tx_dma_descriptor_write_translator:uav_waitrequest
	wire   [31:0] tx_dma_descriptor_write_translator_avalon_universal_master_0_readdata;              // tx_dma_descriptor_write_agent:av_readdata -> tx_dma_descriptor_write_translator:uav_readdata
	wire          tx_dma_descriptor_write_translator_avalon_universal_master_0_debugaccess;           // tx_dma_descriptor_write_translator:uav_debugaccess -> tx_dma_descriptor_write_agent:av_debugaccess
	wire   [31:0] tx_dma_descriptor_write_translator_avalon_universal_master_0_address;               // tx_dma_descriptor_write_translator:uav_address -> tx_dma_descriptor_write_agent:av_address
	wire          tx_dma_descriptor_write_translator_avalon_universal_master_0_read;                  // tx_dma_descriptor_write_translator:uav_read -> tx_dma_descriptor_write_agent:av_read
	wire    [3:0] tx_dma_descriptor_write_translator_avalon_universal_master_0_byteenable;            // tx_dma_descriptor_write_translator:uav_byteenable -> tx_dma_descriptor_write_agent:av_byteenable
	wire          tx_dma_descriptor_write_translator_avalon_universal_master_0_readdatavalid;         // tx_dma_descriptor_write_agent:av_readdatavalid -> tx_dma_descriptor_write_translator:uav_readdatavalid
	wire          tx_dma_descriptor_write_translator_avalon_universal_master_0_lock;                  // tx_dma_descriptor_write_translator:uav_lock -> tx_dma_descriptor_write_agent:av_lock
	wire          tx_dma_descriptor_write_translator_avalon_universal_master_0_write;                 // tx_dma_descriptor_write_translator:uav_write -> tx_dma_descriptor_write_agent:av_write
	wire   [31:0] tx_dma_descriptor_write_translator_avalon_universal_master_0_writedata;             // tx_dma_descriptor_write_translator:uav_writedata -> tx_dma_descriptor_write_agent:av_writedata
	wire    [2:0] tx_dma_descriptor_write_translator_avalon_universal_master_0_burstcount;            // tx_dma_descriptor_write_translator:uav_burstcount -> tx_dma_descriptor_write_agent:av_burstcount
	wire          rsp_mux_006_src_valid;                                                              // rsp_mux_006:src_valid -> tx_dma_descriptor_write_agent:rp_valid
	wire  [109:0] rsp_mux_006_src_data;                                                               // rsp_mux_006:src_data -> tx_dma_descriptor_write_agent:rp_data
	wire          rsp_mux_006_src_ready;                                                              // tx_dma_descriptor_write_agent:rp_ready -> rsp_mux_006:src_ready
	wire   [10:0] rsp_mux_006_src_channel;                                                            // rsp_mux_006:src_channel -> tx_dma_descriptor_write_agent:rp_channel
	wire          rsp_mux_006_src_startofpacket;                                                      // rsp_mux_006:src_startofpacket -> tx_dma_descriptor_write_agent:rp_startofpacket
	wire          rsp_mux_006_src_endofpacket;                                                        // rsp_mux_006:src_endofpacket -> tx_dma_descriptor_write_agent:rp_endofpacket
	wire          nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_waitrequest;   // nios2_gen2_0_instruction_master_agent:av_waitrequest -> nios2_gen2_0_instruction_master_translator:uav_waitrequest
	wire   [31:0] nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_readdata;      // nios2_gen2_0_instruction_master_agent:av_readdata -> nios2_gen2_0_instruction_master_translator:uav_readdata
	wire          nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_debugaccess;   // nios2_gen2_0_instruction_master_translator:uav_debugaccess -> nios2_gen2_0_instruction_master_agent:av_debugaccess
	wire   [31:0] nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_address;       // nios2_gen2_0_instruction_master_translator:uav_address -> nios2_gen2_0_instruction_master_agent:av_address
	wire          nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_read;          // nios2_gen2_0_instruction_master_translator:uav_read -> nios2_gen2_0_instruction_master_agent:av_read
	wire    [3:0] nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_byteenable;    // nios2_gen2_0_instruction_master_translator:uav_byteenable -> nios2_gen2_0_instruction_master_agent:av_byteenable
	wire          nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_readdatavalid; // nios2_gen2_0_instruction_master_agent:av_readdatavalid -> nios2_gen2_0_instruction_master_translator:uav_readdatavalid
	wire          nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_lock;          // nios2_gen2_0_instruction_master_translator:uav_lock -> nios2_gen2_0_instruction_master_agent:av_lock
	wire          nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_write;         // nios2_gen2_0_instruction_master_translator:uav_write -> nios2_gen2_0_instruction_master_agent:av_write
	wire   [31:0] nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_writedata;     // nios2_gen2_0_instruction_master_translator:uav_writedata -> nios2_gen2_0_instruction_master_agent:av_writedata
	wire    [2:0] nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_burstcount;    // nios2_gen2_0_instruction_master_translator:uav_burstcount -> nios2_gen2_0_instruction_master_agent:av_burstcount
	wire   [31:0] jtag_uart_0_avalon_jtag_slave_agent_m0_readdata;                                    // jtag_uart_0_avalon_jtag_slave_translator:uav_readdata -> jtag_uart_0_avalon_jtag_slave_agent:m0_readdata
	wire          jtag_uart_0_avalon_jtag_slave_agent_m0_waitrequest;                                 // jtag_uart_0_avalon_jtag_slave_translator:uav_waitrequest -> jtag_uart_0_avalon_jtag_slave_agent:m0_waitrequest
	wire          jtag_uart_0_avalon_jtag_slave_agent_m0_debugaccess;                                 // jtag_uart_0_avalon_jtag_slave_agent:m0_debugaccess -> jtag_uart_0_avalon_jtag_slave_translator:uav_debugaccess
	wire   [31:0] jtag_uart_0_avalon_jtag_slave_agent_m0_address;                                     // jtag_uart_0_avalon_jtag_slave_agent:m0_address -> jtag_uart_0_avalon_jtag_slave_translator:uav_address
	wire    [3:0] jtag_uart_0_avalon_jtag_slave_agent_m0_byteenable;                                  // jtag_uart_0_avalon_jtag_slave_agent:m0_byteenable -> jtag_uart_0_avalon_jtag_slave_translator:uav_byteenable
	wire          jtag_uart_0_avalon_jtag_slave_agent_m0_read;                                        // jtag_uart_0_avalon_jtag_slave_agent:m0_read -> jtag_uart_0_avalon_jtag_slave_translator:uav_read
	wire          jtag_uart_0_avalon_jtag_slave_agent_m0_readdatavalid;                               // jtag_uart_0_avalon_jtag_slave_translator:uav_readdatavalid -> jtag_uart_0_avalon_jtag_slave_agent:m0_readdatavalid
	wire          jtag_uart_0_avalon_jtag_slave_agent_m0_lock;                                        // jtag_uart_0_avalon_jtag_slave_agent:m0_lock -> jtag_uart_0_avalon_jtag_slave_translator:uav_lock
	wire   [31:0] jtag_uart_0_avalon_jtag_slave_agent_m0_writedata;                                   // jtag_uart_0_avalon_jtag_slave_agent:m0_writedata -> jtag_uart_0_avalon_jtag_slave_translator:uav_writedata
	wire          jtag_uart_0_avalon_jtag_slave_agent_m0_write;                                       // jtag_uart_0_avalon_jtag_slave_agent:m0_write -> jtag_uart_0_avalon_jtag_slave_translator:uav_write
	wire    [2:0] jtag_uart_0_avalon_jtag_slave_agent_m0_burstcount;                                  // jtag_uart_0_avalon_jtag_slave_agent:m0_burstcount -> jtag_uart_0_avalon_jtag_slave_translator:uav_burstcount
	wire          jtag_uart_0_avalon_jtag_slave_agent_rf_source_valid;                                // jtag_uart_0_avalon_jtag_slave_agent:rf_source_valid -> jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:in_valid
	wire  [110:0] jtag_uart_0_avalon_jtag_slave_agent_rf_source_data;                                 // jtag_uart_0_avalon_jtag_slave_agent:rf_source_data -> jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:in_data
	wire          jtag_uart_0_avalon_jtag_slave_agent_rf_source_ready;                                // jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:in_ready -> jtag_uart_0_avalon_jtag_slave_agent:rf_source_ready
	wire          jtag_uart_0_avalon_jtag_slave_agent_rf_source_startofpacket;                        // jtag_uart_0_avalon_jtag_slave_agent:rf_source_startofpacket -> jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:in_startofpacket
	wire          jtag_uart_0_avalon_jtag_slave_agent_rf_source_endofpacket;                          // jtag_uart_0_avalon_jtag_slave_agent:rf_source_endofpacket -> jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:in_endofpacket
	wire          jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_valid;                             // jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:out_valid -> jtag_uart_0_avalon_jtag_slave_agent:rf_sink_valid
	wire  [110:0] jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_data;                              // jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:out_data -> jtag_uart_0_avalon_jtag_slave_agent:rf_sink_data
	wire          jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_ready;                             // jtag_uart_0_avalon_jtag_slave_agent:rf_sink_ready -> jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:out_ready
	wire          jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket;                     // jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:out_startofpacket -> jtag_uart_0_avalon_jtag_slave_agent:rf_sink_startofpacket
	wire          jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket;                       // jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:out_endofpacket -> jtag_uart_0_avalon_jtag_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_src_valid;                                                                  // cmd_mux:src_valid -> jtag_uart_0_avalon_jtag_slave_agent:cp_valid
	wire  [109:0] cmd_mux_src_data;                                                                   // cmd_mux:src_data -> jtag_uart_0_avalon_jtag_slave_agent:cp_data
	wire          cmd_mux_src_ready;                                                                  // jtag_uart_0_avalon_jtag_slave_agent:cp_ready -> cmd_mux:src_ready
	wire   [10:0] cmd_mux_src_channel;                                                                // cmd_mux:src_channel -> jtag_uart_0_avalon_jtag_slave_agent:cp_channel
	wire          cmd_mux_src_startofpacket;                                                          // cmd_mux:src_startofpacket -> jtag_uart_0_avalon_jtag_slave_agent:cp_startofpacket
	wire          cmd_mux_src_endofpacket;                                                            // cmd_mux:src_endofpacket -> jtag_uart_0_avalon_jtag_slave_agent:cp_endofpacket
	wire   [31:0] tse_control_port_agent_m0_readdata;                                                 // tse_control_port_translator:uav_readdata -> tse_control_port_agent:m0_readdata
	wire          tse_control_port_agent_m0_waitrequest;                                              // tse_control_port_translator:uav_waitrequest -> tse_control_port_agent:m0_waitrequest
	wire          tse_control_port_agent_m0_debugaccess;                                              // tse_control_port_agent:m0_debugaccess -> tse_control_port_translator:uav_debugaccess
	wire   [31:0] tse_control_port_agent_m0_address;                                                  // tse_control_port_agent:m0_address -> tse_control_port_translator:uav_address
	wire    [3:0] tse_control_port_agent_m0_byteenable;                                               // tse_control_port_agent:m0_byteenable -> tse_control_port_translator:uav_byteenable
	wire          tse_control_port_agent_m0_read;                                                     // tse_control_port_agent:m0_read -> tse_control_port_translator:uav_read
	wire          tse_control_port_agent_m0_readdatavalid;                                            // tse_control_port_translator:uav_readdatavalid -> tse_control_port_agent:m0_readdatavalid
	wire          tse_control_port_agent_m0_lock;                                                     // tse_control_port_agent:m0_lock -> tse_control_port_translator:uav_lock
	wire   [31:0] tse_control_port_agent_m0_writedata;                                                // tse_control_port_agent:m0_writedata -> tse_control_port_translator:uav_writedata
	wire          tse_control_port_agent_m0_write;                                                    // tse_control_port_agent:m0_write -> tse_control_port_translator:uav_write
	wire    [2:0] tse_control_port_agent_m0_burstcount;                                               // tse_control_port_agent:m0_burstcount -> tse_control_port_translator:uav_burstcount
	wire          tse_control_port_agent_rf_source_valid;                                             // tse_control_port_agent:rf_source_valid -> tse_control_port_agent_rsp_fifo:in_valid
	wire  [110:0] tse_control_port_agent_rf_source_data;                                              // tse_control_port_agent:rf_source_data -> tse_control_port_agent_rsp_fifo:in_data
	wire          tse_control_port_agent_rf_source_ready;                                             // tse_control_port_agent_rsp_fifo:in_ready -> tse_control_port_agent:rf_source_ready
	wire          tse_control_port_agent_rf_source_startofpacket;                                     // tse_control_port_agent:rf_source_startofpacket -> tse_control_port_agent_rsp_fifo:in_startofpacket
	wire          tse_control_port_agent_rf_source_endofpacket;                                       // tse_control_port_agent:rf_source_endofpacket -> tse_control_port_agent_rsp_fifo:in_endofpacket
	wire          tse_control_port_agent_rsp_fifo_out_valid;                                          // tse_control_port_agent_rsp_fifo:out_valid -> tse_control_port_agent:rf_sink_valid
	wire  [110:0] tse_control_port_agent_rsp_fifo_out_data;                                           // tse_control_port_agent_rsp_fifo:out_data -> tse_control_port_agent:rf_sink_data
	wire          tse_control_port_agent_rsp_fifo_out_ready;                                          // tse_control_port_agent:rf_sink_ready -> tse_control_port_agent_rsp_fifo:out_ready
	wire          tse_control_port_agent_rsp_fifo_out_startofpacket;                                  // tse_control_port_agent_rsp_fifo:out_startofpacket -> tse_control_port_agent:rf_sink_startofpacket
	wire          tse_control_port_agent_rsp_fifo_out_endofpacket;                                    // tse_control_port_agent_rsp_fifo:out_endofpacket -> tse_control_port_agent:rf_sink_endofpacket
	wire          cmd_mux_001_src_valid;                                                              // cmd_mux_001:src_valid -> tse_control_port_agent:cp_valid
	wire  [109:0] cmd_mux_001_src_data;                                                               // cmd_mux_001:src_data -> tse_control_port_agent:cp_data
	wire          cmd_mux_001_src_ready;                                                              // tse_control_port_agent:cp_ready -> cmd_mux_001:src_ready
	wire   [10:0] cmd_mux_001_src_channel;                                                            // cmd_mux_001:src_channel -> tse_control_port_agent:cp_channel
	wire          cmd_mux_001_src_startofpacket;                                                      // cmd_mux_001:src_startofpacket -> tse_control_port_agent:cp_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                                        // cmd_mux_001:src_endofpacket -> tse_control_port_agent:cp_endofpacket
	wire   [31:0] tx_dma_csr_agent_m0_readdata;                                                       // tx_dma_csr_translator:uav_readdata -> tx_dma_csr_agent:m0_readdata
	wire          tx_dma_csr_agent_m0_waitrequest;                                                    // tx_dma_csr_translator:uav_waitrequest -> tx_dma_csr_agent:m0_waitrequest
	wire          tx_dma_csr_agent_m0_debugaccess;                                                    // tx_dma_csr_agent:m0_debugaccess -> tx_dma_csr_translator:uav_debugaccess
	wire   [31:0] tx_dma_csr_agent_m0_address;                                                        // tx_dma_csr_agent:m0_address -> tx_dma_csr_translator:uav_address
	wire    [3:0] tx_dma_csr_agent_m0_byteenable;                                                     // tx_dma_csr_agent:m0_byteenable -> tx_dma_csr_translator:uav_byteenable
	wire          tx_dma_csr_agent_m0_read;                                                           // tx_dma_csr_agent:m0_read -> tx_dma_csr_translator:uav_read
	wire          tx_dma_csr_agent_m0_readdatavalid;                                                  // tx_dma_csr_translator:uav_readdatavalid -> tx_dma_csr_agent:m0_readdatavalid
	wire          tx_dma_csr_agent_m0_lock;                                                           // tx_dma_csr_agent:m0_lock -> tx_dma_csr_translator:uav_lock
	wire   [31:0] tx_dma_csr_agent_m0_writedata;                                                      // tx_dma_csr_agent:m0_writedata -> tx_dma_csr_translator:uav_writedata
	wire          tx_dma_csr_agent_m0_write;                                                          // tx_dma_csr_agent:m0_write -> tx_dma_csr_translator:uav_write
	wire    [2:0] tx_dma_csr_agent_m0_burstcount;                                                     // tx_dma_csr_agent:m0_burstcount -> tx_dma_csr_translator:uav_burstcount
	wire          tx_dma_csr_agent_rf_source_valid;                                                   // tx_dma_csr_agent:rf_source_valid -> tx_dma_csr_agent_rsp_fifo:in_valid
	wire  [110:0] tx_dma_csr_agent_rf_source_data;                                                    // tx_dma_csr_agent:rf_source_data -> tx_dma_csr_agent_rsp_fifo:in_data
	wire          tx_dma_csr_agent_rf_source_ready;                                                   // tx_dma_csr_agent_rsp_fifo:in_ready -> tx_dma_csr_agent:rf_source_ready
	wire          tx_dma_csr_agent_rf_source_startofpacket;                                           // tx_dma_csr_agent:rf_source_startofpacket -> tx_dma_csr_agent_rsp_fifo:in_startofpacket
	wire          tx_dma_csr_agent_rf_source_endofpacket;                                             // tx_dma_csr_agent:rf_source_endofpacket -> tx_dma_csr_agent_rsp_fifo:in_endofpacket
	wire          tx_dma_csr_agent_rsp_fifo_out_valid;                                                // tx_dma_csr_agent_rsp_fifo:out_valid -> tx_dma_csr_agent:rf_sink_valid
	wire  [110:0] tx_dma_csr_agent_rsp_fifo_out_data;                                                 // tx_dma_csr_agent_rsp_fifo:out_data -> tx_dma_csr_agent:rf_sink_data
	wire          tx_dma_csr_agent_rsp_fifo_out_ready;                                                // tx_dma_csr_agent:rf_sink_ready -> tx_dma_csr_agent_rsp_fifo:out_ready
	wire          tx_dma_csr_agent_rsp_fifo_out_startofpacket;                                        // tx_dma_csr_agent_rsp_fifo:out_startofpacket -> tx_dma_csr_agent:rf_sink_startofpacket
	wire          tx_dma_csr_agent_rsp_fifo_out_endofpacket;                                          // tx_dma_csr_agent_rsp_fifo:out_endofpacket -> tx_dma_csr_agent:rf_sink_endofpacket
	wire          cmd_mux_002_src_valid;                                                              // cmd_mux_002:src_valid -> tx_dma_csr_agent:cp_valid
	wire  [109:0] cmd_mux_002_src_data;                                                               // cmd_mux_002:src_data -> tx_dma_csr_agent:cp_data
	wire          cmd_mux_002_src_ready;                                                              // tx_dma_csr_agent:cp_ready -> cmd_mux_002:src_ready
	wire   [10:0] cmd_mux_002_src_channel;                                                            // cmd_mux_002:src_channel -> tx_dma_csr_agent:cp_channel
	wire          cmd_mux_002_src_startofpacket;                                                      // cmd_mux_002:src_startofpacket -> tx_dma_csr_agent:cp_startofpacket
	wire          cmd_mux_002_src_endofpacket;                                                        // cmd_mux_002:src_endofpacket -> tx_dma_csr_agent:cp_endofpacket
	wire   [31:0] rx_dma_csr_agent_m0_readdata;                                                       // rx_dma_csr_translator:uav_readdata -> rx_dma_csr_agent:m0_readdata
	wire          rx_dma_csr_agent_m0_waitrequest;                                                    // rx_dma_csr_translator:uav_waitrequest -> rx_dma_csr_agent:m0_waitrequest
	wire          rx_dma_csr_agent_m0_debugaccess;                                                    // rx_dma_csr_agent:m0_debugaccess -> rx_dma_csr_translator:uav_debugaccess
	wire   [31:0] rx_dma_csr_agent_m0_address;                                                        // rx_dma_csr_agent:m0_address -> rx_dma_csr_translator:uav_address
	wire    [3:0] rx_dma_csr_agent_m0_byteenable;                                                     // rx_dma_csr_agent:m0_byteenable -> rx_dma_csr_translator:uav_byteenable
	wire          rx_dma_csr_agent_m0_read;                                                           // rx_dma_csr_agent:m0_read -> rx_dma_csr_translator:uav_read
	wire          rx_dma_csr_agent_m0_readdatavalid;                                                  // rx_dma_csr_translator:uav_readdatavalid -> rx_dma_csr_agent:m0_readdatavalid
	wire          rx_dma_csr_agent_m0_lock;                                                           // rx_dma_csr_agent:m0_lock -> rx_dma_csr_translator:uav_lock
	wire   [31:0] rx_dma_csr_agent_m0_writedata;                                                      // rx_dma_csr_agent:m0_writedata -> rx_dma_csr_translator:uav_writedata
	wire          rx_dma_csr_agent_m0_write;                                                          // rx_dma_csr_agent:m0_write -> rx_dma_csr_translator:uav_write
	wire    [2:0] rx_dma_csr_agent_m0_burstcount;                                                     // rx_dma_csr_agent:m0_burstcount -> rx_dma_csr_translator:uav_burstcount
	wire          rx_dma_csr_agent_rf_source_valid;                                                   // rx_dma_csr_agent:rf_source_valid -> rx_dma_csr_agent_rsp_fifo:in_valid
	wire  [110:0] rx_dma_csr_agent_rf_source_data;                                                    // rx_dma_csr_agent:rf_source_data -> rx_dma_csr_agent_rsp_fifo:in_data
	wire          rx_dma_csr_agent_rf_source_ready;                                                   // rx_dma_csr_agent_rsp_fifo:in_ready -> rx_dma_csr_agent:rf_source_ready
	wire          rx_dma_csr_agent_rf_source_startofpacket;                                           // rx_dma_csr_agent:rf_source_startofpacket -> rx_dma_csr_agent_rsp_fifo:in_startofpacket
	wire          rx_dma_csr_agent_rf_source_endofpacket;                                             // rx_dma_csr_agent:rf_source_endofpacket -> rx_dma_csr_agent_rsp_fifo:in_endofpacket
	wire          rx_dma_csr_agent_rsp_fifo_out_valid;                                                // rx_dma_csr_agent_rsp_fifo:out_valid -> rx_dma_csr_agent:rf_sink_valid
	wire  [110:0] rx_dma_csr_agent_rsp_fifo_out_data;                                                 // rx_dma_csr_agent_rsp_fifo:out_data -> rx_dma_csr_agent:rf_sink_data
	wire          rx_dma_csr_agent_rsp_fifo_out_ready;                                                // rx_dma_csr_agent:rf_sink_ready -> rx_dma_csr_agent_rsp_fifo:out_ready
	wire          rx_dma_csr_agent_rsp_fifo_out_startofpacket;                                        // rx_dma_csr_agent_rsp_fifo:out_startofpacket -> rx_dma_csr_agent:rf_sink_startofpacket
	wire          rx_dma_csr_agent_rsp_fifo_out_endofpacket;                                          // rx_dma_csr_agent_rsp_fifo:out_endofpacket -> rx_dma_csr_agent:rf_sink_endofpacket
	wire          cmd_mux_003_src_valid;                                                              // cmd_mux_003:src_valid -> rx_dma_csr_agent:cp_valid
	wire  [109:0] cmd_mux_003_src_data;                                                               // cmd_mux_003:src_data -> rx_dma_csr_agent:cp_data
	wire          cmd_mux_003_src_ready;                                                              // rx_dma_csr_agent:cp_ready -> cmd_mux_003:src_ready
	wire   [10:0] cmd_mux_003_src_channel;                                                            // cmd_mux_003:src_channel -> rx_dma_csr_agent:cp_channel
	wire          cmd_mux_003_src_startofpacket;                                                      // cmd_mux_003:src_startofpacket -> rx_dma_csr_agent:cp_startofpacket
	wire          cmd_mux_003_src_endofpacket;                                                        // cmd_mux_003:src_endofpacket -> rx_dma_csr_agent:cp_endofpacket
	wire   [31:0] nios2_gen2_0_debug_mem_slave_agent_m0_readdata;                                     // nios2_gen2_0_debug_mem_slave_translator:uav_readdata -> nios2_gen2_0_debug_mem_slave_agent:m0_readdata
	wire          nios2_gen2_0_debug_mem_slave_agent_m0_waitrequest;                                  // nios2_gen2_0_debug_mem_slave_translator:uav_waitrequest -> nios2_gen2_0_debug_mem_slave_agent:m0_waitrequest
	wire          nios2_gen2_0_debug_mem_slave_agent_m0_debugaccess;                                  // nios2_gen2_0_debug_mem_slave_agent:m0_debugaccess -> nios2_gen2_0_debug_mem_slave_translator:uav_debugaccess
	wire   [31:0] nios2_gen2_0_debug_mem_slave_agent_m0_address;                                      // nios2_gen2_0_debug_mem_slave_agent:m0_address -> nios2_gen2_0_debug_mem_slave_translator:uav_address
	wire    [3:0] nios2_gen2_0_debug_mem_slave_agent_m0_byteenable;                                   // nios2_gen2_0_debug_mem_slave_agent:m0_byteenable -> nios2_gen2_0_debug_mem_slave_translator:uav_byteenable
	wire          nios2_gen2_0_debug_mem_slave_agent_m0_read;                                         // nios2_gen2_0_debug_mem_slave_agent:m0_read -> nios2_gen2_0_debug_mem_slave_translator:uav_read
	wire          nios2_gen2_0_debug_mem_slave_agent_m0_readdatavalid;                                // nios2_gen2_0_debug_mem_slave_translator:uav_readdatavalid -> nios2_gen2_0_debug_mem_slave_agent:m0_readdatavalid
	wire          nios2_gen2_0_debug_mem_slave_agent_m0_lock;                                         // nios2_gen2_0_debug_mem_slave_agent:m0_lock -> nios2_gen2_0_debug_mem_slave_translator:uav_lock
	wire   [31:0] nios2_gen2_0_debug_mem_slave_agent_m0_writedata;                                    // nios2_gen2_0_debug_mem_slave_agent:m0_writedata -> nios2_gen2_0_debug_mem_slave_translator:uav_writedata
	wire          nios2_gen2_0_debug_mem_slave_agent_m0_write;                                        // nios2_gen2_0_debug_mem_slave_agent:m0_write -> nios2_gen2_0_debug_mem_slave_translator:uav_write
	wire    [2:0] nios2_gen2_0_debug_mem_slave_agent_m0_burstcount;                                   // nios2_gen2_0_debug_mem_slave_agent:m0_burstcount -> nios2_gen2_0_debug_mem_slave_translator:uav_burstcount
	wire          nios2_gen2_0_debug_mem_slave_agent_rf_source_valid;                                 // nios2_gen2_0_debug_mem_slave_agent:rf_source_valid -> nios2_gen2_0_debug_mem_slave_agent_rsp_fifo:in_valid
	wire  [110:0] nios2_gen2_0_debug_mem_slave_agent_rf_source_data;                                  // nios2_gen2_0_debug_mem_slave_agent:rf_source_data -> nios2_gen2_0_debug_mem_slave_agent_rsp_fifo:in_data
	wire          nios2_gen2_0_debug_mem_slave_agent_rf_source_ready;                                 // nios2_gen2_0_debug_mem_slave_agent_rsp_fifo:in_ready -> nios2_gen2_0_debug_mem_slave_agent:rf_source_ready
	wire          nios2_gen2_0_debug_mem_slave_agent_rf_source_startofpacket;                         // nios2_gen2_0_debug_mem_slave_agent:rf_source_startofpacket -> nios2_gen2_0_debug_mem_slave_agent_rsp_fifo:in_startofpacket
	wire          nios2_gen2_0_debug_mem_slave_agent_rf_source_endofpacket;                           // nios2_gen2_0_debug_mem_slave_agent:rf_source_endofpacket -> nios2_gen2_0_debug_mem_slave_agent_rsp_fifo:in_endofpacket
	wire          nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_valid;                              // nios2_gen2_0_debug_mem_slave_agent_rsp_fifo:out_valid -> nios2_gen2_0_debug_mem_slave_agent:rf_sink_valid
	wire  [110:0] nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_data;                               // nios2_gen2_0_debug_mem_slave_agent_rsp_fifo:out_data -> nios2_gen2_0_debug_mem_slave_agent:rf_sink_data
	wire          nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_ready;                              // nios2_gen2_0_debug_mem_slave_agent:rf_sink_ready -> nios2_gen2_0_debug_mem_slave_agent_rsp_fifo:out_ready
	wire          nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_startofpacket;                      // nios2_gen2_0_debug_mem_slave_agent_rsp_fifo:out_startofpacket -> nios2_gen2_0_debug_mem_slave_agent:rf_sink_startofpacket
	wire          nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_endofpacket;                        // nios2_gen2_0_debug_mem_slave_agent_rsp_fifo:out_endofpacket -> nios2_gen2_0_debug_mem_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_004_src_valid;                                                              // cmd_mux_004:src_valid -> nios2_gen2_0_debug_mem_slave_agent:cp_valid
	wire  [109:0] cmd_mux_004_src_data;                                                               // cmd_mux_004:src_data -> nios2_gen2_0_debug_mem_slave_agent:cp_data
	wire          cmd_mux_004_src_ready;                                                              // nios2_gen2_0_debug_mem_slave_agent:cp_ready -> cmd_mux_004:src_ready
	wire   [10:0] cmd_mux_004_src_channel;                                                            // cmd_mux_004:src_channel -> nios2_gen2_0_debug_mem_slave_agent:cp_channel
	wire          cmd_mux_004_src_startofpacket;                                                      // cmd_mux_004:src_startofpacket -> nios2_gen2_0_debug_mem_slave_agent:cp_startofpacket
	wire          cmd_mux_004_src_endofpacket;                                                        // cmd_mux_004:src_endofpacket -> nios2_gen2_0_debug_mem_slave_agent:cp_endofpacket
	wire   [31:0] system_ram_s1_agent_m0_readdata;                                                    // system_ram_s1_translator:uav_readdata -> system_ram_s1_agent:m0_readdata
	wire          system_ram_s1_agent_m0_waitrequest;                                                 // system_ram_s1_translator:uav_waitrequest -> system_ram_s1_agent:m0_waitrequest
	wire          system_ram_s1_agent_m0_debugaccess;                                                 // system_ram_s1_agent:m0_debugaccess -> system_ram_s1_translator:uav_debugaccess
	wire   [31:0] system_ram_s1_agent_m0_address;                                                     // system_ram_s1_agent:m0_address -> system_ram_s1_translator:uav_address
	wire    [3:0] system_ram_s1_agent_m0_byteenable;                                                  // system_ram_s1_agent:m0_byteenable -> system_ram_s1_translator:uav_byteenable
	wire          system_ram_s1_agent_m0_read;                                                        // system_ram_s1_agent:m0_read -> system_ram_s1_translator:uav_read
	wire          system_ram_s1_agent_m0_readdatavalid;                                               // system_ram_s1_translator:uav_readdatavalid -> system_ram_s1_agent:m0_readdatavalid
	wire          system_ram_s1_agent_m0_lock;                                                        // system_ram_s1_agent:m0_lock -> system_ram_s1_translator:uav_lock
	wire   [31:0] system_ram_s1_agent_m0_writedata;                                                   // system_ram_s1_agent:m0_writedata -> system_ram_s1_translator:uav_writedata
	wire          system_ram_s1_agent_m0_write;                                                       // system_ram_s1_agent:m0_write -> system_ram_s1_translator:uav_write
	wire    [2:0] system_ram_s1_agent_m0_burstcount;                                                  // system_ram_s1_agent:m0_burstcount -> system_ram_s1_translator:uav_burstcount
	wire          system_ram_s1_agent_rf_source_valid;                                                // system_ram_s1_agent:rf_source_valid -> system_ram_s1_agent_rsp_fifo:in_valid
	wire  [110:0] system_ram_s1_agent_rf_source_data;                                                 // system_ram_s1_agent:rf_source_data -> system_ram_s1_agent_rsp_fifo:in_data
	wire          system_ram_s1_agent_rf_source_ready;                                                // system_ram_s1_agent_rsp_fifo:in_ready -> system_ram_s1_agent:rf_source_ready
	wire          system_ram_s1_agent_rf_source_startofpacket;                                        // system_ram_s1_agent:rf_source_startofpacket -> system_ram_s1_agent_rsp_fifo:in_startofpacket
	wire          system_ram_s1_agent_rf_source_endofpacket;                                          // system_ram_s1_agent:rf_source_endofpacket -> system_ram_s1_agent_rsp_fifo:in_endofpacket
	wire          system_ram_s1_agent_rsp_fifo_out_valid;                                             // system_ram_s1_agent_rsp_fifo:out_valid -> system_ram_s1_agent:rf_sink_valid
	wire  [110:0] system_ram_s1_agent_rsp_fifo_out_data;                                              // system_ram_s1_agent_rsp_fifo:out_data -> system_ram_s1_agent:rf_sink_data
	wire          system_ram_s1_agent_rsp_fifo_out_ready;                                             // system_ram_s1_agent:rf_sink_ready -> system_ram_s1_agent_rsp_fifo:out_ready
	wire          system_ram_s1_agent_rsp_fifo_out_startofpacket;                                     // system_ram_s1_agent_rsp_fifo:out_startofpacket -> system_ram_s1_agent:rf_sink_startofpacket
	wire          system_ram_s1_agent_rsp_fifo_out_endofpacket;                                       // system_ram_s1_agent_rsp_fifo:out_endofpacket -> system_ram_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_005_src_valid;                                                              // cmd_mux_005:src_valid -> system_ram_s1_agent:cp_valid
	wire  [109:0] cmd_mux_005_src_data;                                                               // cmd_mux_005:src_data -> system_ram_s1_agent:cp_data
	wire          cmd_mux_005_src_ready;                                                              // system_ram_s1_agent:cp_ready -> cmd_mux_005:src_ready
	wire   [10:0] cmd_mux_005_src_channel;                                                            // cmd_mux_005:src_channel -> system_ram_s1_agent:cp_channel
	wire          cmd_mux_005_src_startofpacket;                                                      // cmd_mux_005:src_startofpacket -> system_ram_s1_agent:cp_startofpacket
	wire          cmd_mux_005_src_endofpacket;                                                        // cmd_mux_005:src_endofpacket -> system_ram_s1_agent:cp_endofpacket
	wire    [7:0] header_ram_s1_agent_m0_readdata;                                                    // header_ram_s1_translator:uav_readdata -> header_ram_s1_agent:m0_readdata
	wire          header_ram_s1_agent_m0_waitrequest;                                                 // header_ram_s1_translator:uav_waitrequest -> header_ram_s1_agent:m0_waitrequest
	wire          header_ram_s1_agent_m0_debugaccess;                                                 // header_ram_s1_agent:m0_debugaccess -> header_ram_s1_translator:uav_debugaccess
	wire   [31:0] header_ram_s1_agent_m0_address;                                                     // header_ram_s1_agent:m0_address -> header_ram_s1_translator:uav_address
	wire    [0:0] header_ram_s1_agent_m0_byteenable;                                                  // header_ram_s1_agent:m0_byteenable -> header_ram_s1_translator:uav_byteenable
	wire          header_ram_s1_agent_m0_read;                                                        // header_ram_s1_agent:m0_read -> header_ram_s1_translator:uav_read
	wire          header_ram_s1_agent_m0_readdatavalid;                                               // header_ram_s1_translator:uav_readdatavalid -> header_ram_s1_agent:m0_readdatavalid
	wire          header_ram_s1_agent_m0_lock;                                                        // header_ram_s1_agent:m0_lock -> header_ram_s1_translator:uav_lock
	wire    [7:0] header_ram_s1_agent_m0_writedata;                                                   // header_ram_s1_agent:m0_writedata -> header_ram_s1_translator:uav_writedata
	wire          header_ram_s1_agent_m0_write;                                                       // header_ram_s1_agent:m0_write -> header_ram_s1_translator:uav_write
	wire    [0:0] header_ram_s1_agent_m0_burstcount;                                                  // header_ram_s1_agent:m0_burstcount -> header_ram_s1_translator:uav_burstcount
	wire          header_ram_s1_agent_rf_source_valid;                                                // header_ram_s1_agent:rf_source_valid -> header_ram_s1_agent_rsp_fifo:in_valid
	wire   [83:0] header_ram_s1_agent_rf_source_data;                                                 // header_ram_s1_agent:rf_source_data -> header_ram_s1_agent_rsp_fifo:in_data
	wire          header_ram_s1_agent_rf_source_ready;                                                // header_ram_s1_agent_rsp_fifo:in_ready -> header_ram_s1_agent:rf_source_ready
	wire          header_ram_s1_agent_rf_source_startofpacket;                                        // header_ram_s1_agent:rf_source_startofpacket -> header_ram_s1_agent_rsp_fifo:in_startofpacket
	wire          header_ram_s1_agent_rf_source_endofpacket;                                          // header_ram_s1_agent:rf_source_endofpacket -> header_ram_s1_agent_rsp_fifo:in_endofpacket
	wire          header_ram_s1_agent_rsp_fifo_out_valid;                                             // header_ram_s1_agent_rsp_fifo:out_valid -> header_ram_s1_agent:rf_sink_valid
	wire   [83:0] header_ram_s1_agent_rsp_fifo_out_data;                                              // header_ram_s1_agent_rsp_fifo:out_data -> header_ram_s1_agent:rf_sink_data
	wire          header_ram_s1_agent_rsp_fifo_out_ready;                                             // header_ram_s1_agent:rf_sink_ready -> header_ram_s1_agent_rsp_fifo:out_ready
	wire          header_ram_s1_agent_rsp_fifo_out_startofpacket;                                     // header_ram_s1_agent_rsp_fifo:out_startofpacket -> header_ram_s1_agent:rf_sink_startofpacket
	wire          header_ram_s1_agent_rsp_fifo_out_endofpacket;                                       // header_ram_s1_agent_rsp_fifo:out_endofpacket -> header_ram_s1_agent:rf_sink_endofpacket
	wire   [31:0] timer_0_s1_agent_m0_readdata;                                                       // timer_0_s1_translator:uav_readdata -> timer_0_s1_agent:m0_readdata
	wire          timer_0_s1_agent_m0_waitrequest;                                                    // timer_0_s1_translator:uav_waitrequest -> timer_0_s1_agent:m0_waitrequest
	wire          timer_0_s1_agent_m0_debugaccess;                                                    // timer_0_s1_agent:m0_debugaccess -> timer_0_s1_translator:uav_debugaccess
	wire   [31:0] timer_0_s1_agent_m0_address;                                                        // timer_0_s1_agent:m0_address -> timer_0_s1_translator:uav_address
	wire    [3:0] timer_0_s1_agent_m0_byteenable;                                                     // timer_0_s1_agent:m0_byteenable -> timer_0_s1_translator:uav_byteenable
	wire          timer_0_s1_agent_m0_read;                                                           // timer_0_s1_agent:m0_read -> timer_0_s1_translator:uav_read
	wire          timer_0_s1_agent_m0_readdatavalid;                                                  // timer_0_s1_translator:uav_readdatavalid -> timer_0_s1_agent:m0_readdatavalid
	wire          timer_0_s1_agent_m0_lock;                                                           // timer_0_s1_agent:m0_lock -> timer_0_s1_translator:uav_lock
	wire   [31:0] timer_0_s1_agent_m0_writedata;                                                      // timer_0_s1_agent:m0_writedata -> timer_0_s1_translator:uav_writedata
	wire          timer_0_s1_agent_m0_write;                                                          // timer_0_s1_agent:m0_write -> timer_0_s1_translator:uav_write
	wire    [2:0] timer_0_s1_agent_m0_burstcount;                                                     // timer_0_s1_agent:m0_burstcount -> timer_0_s1_translator:uav_burstcount
	wire          timer_0_s1_agent_rf_source_valid;                                                   // timer_0_s1_agent:rf_source_valid -> timer_0_s1_agent_rsp_fifo:in_valid
	wire  [110:0] timer_0_s1_agent_rf_source_data;                                                    // timer_0_s1_agent:rf_source_data -> timer_0_s1_agent_rsp_fifo:in_data
	wire          timer_0_s1_agent_rf_source_ready;                                                   // timer_0_s1_agent_rsp_fifo:in_ready -> timer_0_s1_agent:rf_source_ready
	wire          timer_0_s1_agent_rf_source_startofpacket;                                           // timer_0_s1_agent:rf_source_startofpacket -> timer_0_s1_agent_rsp_fifo:in_startofpacket
	wire          timer_0_s1_agent_rf_source_endofpacket;                                             // timer_0_s1_agent:rf_source_endofpacket -> timer_0_s1_agent_rsp_fifo:in_endofpacket
	wire          timer_0_s1_agent_rsp_fifo_out_valid;                                                // timer_0_s1_agent_rsp_fifo:out_valid -> timer_0_s1_agent:rf_sink_valid
	wire  [110:0] timer_0_s1_agent_rsp_fifo_out_data;                                                 // timer_0_s1_agent_rsp_fifo:out_data -> timer_0_s1_agent:rf_sink_data
	wire          timer_0_s1_agent_rsp_fifo_out_ready;                                                // timer_0_s1_agent:rf_sink_ready -> timer_0_s1_agent_rsp_fifo:out_ready
	wire          timer_0_s1_agent_rsp_fifo_out_startofpacket;                                        // timer_0_s1_agent_rsp_fifo:out_startofpacket -> timer_0_s1_agent:rf_sink_startofpacket
	wire          timer_0_s1_agent_rsp_fifo_out_endofpacket;                                          // timer_0_s1_agent_rsp_fifo:out_endofpacket -> timer_0_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_007_src_valid;                                                              // cmd_mux_007:src_valid -> timer_0_s1_agent:cp_valid
	wire  [109:0] cmd_mux_007_src_data;                                                               // cmd_mux_007:src_data -> timer_0_s1_agent:cp_data
	wire          cmd_mux_007_src_ready;                                                              // timer_0_s1_agent:cp_ready -> cmd_mux_007:src_ready
	wire   [10:0] cmd_mux_007_src_channel;                                                            // cmd_mux_007:src_channel -> timer_0_s1_agent:cp_channel
	wire          cmd_mux_007_src_startofpacket;                                                      // cmd_mux_007:src_startofpacket -> timer_0_s1_agent:cp_startofpacket
	wire          cmd_mux_007_src_endofpacket;                                                        // cmd_mux_007:src_endofpacket -> timer_0_s1_agent:cp_endofpacket
	wire    [7:0] rx_buf_ram_s1_agent_m0_readdata;                                                    // rx_buf_ram_s1_translator:uav_readdata -> rx_buf_ram_s1_agent:m0_readdata
	wire          rx_buf_ram_s1_agent_m0_waitrequest;                                                 // rx_buf_ram_s1_translator:uav_waitrequest -> rx_buf_ram_s1_agent:m0_waitrequest
	wire          rx_buf_ram_s1_agent_m0_debugaccess;                                                 // rx_buf_ram_s1_agent:m0_debugaccess -> rx_buf_ram_s1_translator:uav_debugaccess
	wire   [31:0] rx_buf_ram_s1_agent_m0_address;                                                     // rx_buf_ram_s1_agent:m0_address -> rx_buf_ram_s1_translator:uav_address
	wire    [0:0] rx_buf_ram_s1_agent_m0_byteenable;                                                  // rx_buf_ram_s1_agent:m0_byteenable -> rx_buf_ram_s1_translator:uav_byteenable
	wire          rx_buf_ram_s1_agent_m0_read;                                                        // rx_buf_ram_s1_agent:m0_read -> rx_buf_ram_s1_translator:uav_read
	wire          rx_buf_ram_s1_agent_m0_readdatavalid;                                               // rx_buf_ram_s1_translator:uav_readdatavalid -> rx_buf_ram_s1_agent:m0_readdatavalid
	wire          rx_buf_ram_s1_agent_m0_lock;                                                        // rx_buf_ram_s1_agent:m0_lock -> rx_buf_ram_s1_translator:uav_lock
	wire    [7:0] rx_buf_ram_s1_agent_m0_writedata;                                                   // rx_buf_ram_s1_agent:m0_writedata -> rx_buf_ram_s1_translator:uav_writedata
	wire          rx_buf_ram_s1_agent_m0_write;                                                       // rx_buf_ram_s1_agent:m0_write -> rx_buf_ram_s1_translator:uav_write
	wire    [0:0] rx_buf_ram_s1_agent_m0_burstcount;                                                  // rx_buf_ram_s1_agent:m0_burstcount -> rx_buf_ram_s1_translator:uav_burstcount
	wire          rx_buf_ram_s1_agent_rf_source_valid;                                                // rx_buf_ram_s1_agent:rf_source_valid -> rx_buf_ram_s1_agent_rsp_fifo:in_valid
	wire   [83:0] rx_buf_ram_s1_agent_rf_source_data;                                                 // rx_buf_ram_s1_agent:rf_source_data -> rx_buf_ram_s1_agent_rsp_fifo:in_data
	wire          rx_buf_ram_s1_agent_rf_source_ready;                                                // rx_buf_ram_s1_agent_rsp_fifo:in_ready -> rx_buf_ram_s1_agent:rf_source_ready
	wire          rx_buf_ram_s1_agent_rf_source_startofpacket;                                        // rx_buf_ram_s1_agent:rf_source_startofpacket -> rx_buf_ram_s1_agent_rsp_fifo:in_startofpacket
	wire          rx_buf_ram_s1_agent_rf_source_endofpacket;                                          // rx_buf_ram_s1_agent:rf_source_endofpacket -> rx_buf_ram_s1_agent_rsp_fifo:in_endofpacket
	wire          rx_buf_ram_s1_agent_rsp_fifo_out_valid;                                             // rx_buf_ram_s1_agent_rsp_fifo:out_valid -> rx_buf_ram_s1_agent:rf_sink_valid
	wire   [83:0] rx_buf_ram_s1_agent_rsp_fifo_out_data;                                              // rx_buf_ram_s1_agent_rsp_fifo:out_data -> rx_buf_ram_s1_agent:rf_sink_data
	wire          rx_buf_ram_s1_agent_rsp_fifo_out_ready;                                             // rx_buf_ram_s1_agent:rf_sink_ready -> rx_buf_ram_s1_agent_rsp_fifo:out_ready
	wire          rx_buf_ram_s1_agent_rsp_fifo_out_startofpacket;                                     // rx_buf_ram_s1_agent_rsp_fifo:out_startofpacket -> rx_buf_ram_s1_agent:rf_sink_startofpacket
	wire          rx_buf_ram_s1_agent_rsp_fifo_out_endofpacket;                                       // rx_buf_ram_s1_agent_rsp_fifo:out_endofpacket -> rx_buf_ram_s1_agent:rf_sink_endofpacket
	wire   [31:0] eth_irq_pio_s1_agent_m0_readdata;                                                   // eth_irq_pio_s1_translator:uav_readdata -> eth_irq_pio_s1_agent:m0_readdata
	wire          eth_irq_pio_s1_agent_m0_waitrequest;                                                // eth_irq_pio_s1_translator:uav_waitrequest -> eth_irq_pio_s1_agent:m0_waitrequest
	wire          eth_irq_pio_s1_agent_m0_debugaccess;                                                // eth_irq_pio_s1_agent:m0_debugaccess -> eth_irq_pio_s1_translator:uav_debugaccess
	wire   [31:0] eth_irq_pio_s1_agent_m0_address;                                                    // eth_irq_pio_s1_agent:m0_address -> eth_irq_pio_s1_translator:uav_address
	wire    [3:0] eth_irq_pio_s1_agent_m0_byteenable;                                                 // eth_irq_pio_s1_agent:m0_byteenable -> eth_irq_pio_s1_translator:uav_byteenable
	wire          eth_irq_pio_s1_agent_m0_read;                                                       // eth_irq_pio_s1_agent:m0_read -> eth_irq_pio_s1_translator:uav_read
	wire          eth_irq_pio_s1_agent_m0_readdatavalid;                                              // eth_irq_pio_s1_translator:uav_readdatavalid -> eth_irq_pio_s1_agent:m0_readdatavalid
	wire          eth_irq_pio_s1_agent_m0_lock;                                                       // eth_irq_pio_s1_agent:m0_lock -> eth_irq_pio_s1_translator:uav_lock
	wire   [31:0] eth_irq_pio_s1_agent_m0_writedata;                                                  // eth_irq_pio_s1_agent:m0_writedata -> eth_irq_pio_s1_translator:uav_writedata
	wire          eth_irq_pio_s1_agent_m0_write;                                                      // eth_irq_pio_s1_agent:m0_write -> eth_irq_pio_s1_translator:uav_write
	wire    [2:0] eth_irq_pio_s1_agent_m0_burstcount;                                                 // eth_irq_pio_s1_agent:m0_burstcount -> eth_irq_pio_s1_translator:uav_burstcount
	wire          eth_irq_pio_s1_agent_rf_source_valid;                                               // eth_irq_pio_s1_agent:rf_source_valid -> eth_irq_pio_s1_agent_rsp_fifo:in_valid
	wire  [110:0] eth_irq_pio_s1_agent_rf_source_data;                                                // eth_irq_pio_s1_agent:rf_source_data -> eth_irq_pio_s1_agent_rsp_fifo:in_data
	wire          eth_irq_pio_s1_agent_rf_source_ready;                                               // eth_irq_pio_s1_agent_rsp_fifo:in_ready -> eth_irq_pio_s1_agent:rf_source_ready
	wire          eth_irq_pio_s1_agent_rf_source_startofpacket;                                       // eth_irq_pio_s1_agent:rf_source_startofpacket -> eth_irq_pio_s1_agent_rsp_fifo:in_startofpacket
	wire          eth_irq_pio_s1_agent_rf_source_endofpacket;                                         // eth_irq_pio_s1_agent:rf_source_endofpacket -> eth_irq_pio_s1_agent_rsp_fifo:in_endofpacket
	wire          eth_irq_pio_s1_agent_rsp_fifo_out_valid;                                            // eth_irq_pio_s1_agent_rsp_fifo:out_valid -> eth_irq_pio_s1_agent:rf_sink_valid
	wire  [110:0] eth_irq_pio_s1_agent_rsp_fifo_out_data;                                             // eth_irq_pio_s1_agent_rsp_fifo:out_data -> eth_irq_pio_s1_agent:rf_sink_data
	wire          eth_irq_pio_s1_agent_rsp_fifo_out_ready;                                            // eth_irq_pio_s1_agent:rf_sink_ready -> eth_irq_pio_s1_agent_rsp_fifo:out_ready
	wire          eth_irq_pio_s1_agent_rsp_fifo_out_startofpacket;                                    // eth_irq_pio_s1_agent_rsp_fifo:out_startofpacket -> eth_irq_pio_s1_agent:rf_sink_startofpacket
	wire          eth_irq_pio_s1_agent_rsp_fifo_out_endofpacket;                                      // eth_irq_pio_s1_agent_rsp_fifo:out_endofpacket -> eth_irq_pio_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_009_src_valid;                                                              // cmd_mux_009:src_valid -> eth_irq_pio_s1_agent:cp_valid
	wire  [109:0] cmd_mux_009_src_data;                                                               // cmd_mux_009:src_data -> eth_irq_pio_s1_agent:cp_data
	wire          cmd_mux_009_src_ready;                                                              // eth_irq_pio_s1_agent:cp_ready -> cmd_mux_009:src_ready
	wire   [10:0] cmd_mux_009_src_channel;                                                            // cmd_mux_009:src_channel -> eth_irq_pio_s1_agent:cp_channel
	wire          cmd_mux_009_src_startofpacket;                                                      // cmd_mux_009:src_startofpacket -> eth_irq_pio_s1_agent:cp_startofpacket
	wire          cmd_mux_009_src_endofpacket;                                                        // cmd_mux_009:src_endofpacket -> eth_irq_pio_s1_agent:cp_endofpacket
	wire    [7:0] tx_buff_ram_s1_agent_m0_readdata;                                                   // tx_buff_ram_s1_translator:uav_readdata -> tx_buff_ram_s1_agent:m0_readdata
	wire          tx_buff_ram_s1_agent_m0_waitrequest;                                                // tx_buff_ram_s1_translator:uav_waitrequest -> tx_buff_ram_s1_agent:m0_waitrequest
	wire          tx_buff_ram_s1_agent_m0_debugaccess;                                                // tx_buff_ram_s1_agent:m0_debugaccess -> tx_buff_ram_s1_translator:uav_debugaccess
	wire   [31:0] tx_buff_ram_s1_agent_m0_address;                                                    // tx_buff_ram_s1_agent:m0_address -> tx_buff_ram_s1_translator:uav_address
	wire    [0:0] tx_buff_ram_s1_agent_m0_byteenable;                                                 // tx_buff_ram_s1_agent:m0_byteenable -> tx_buff_ram_s1_translator:uav_byteenable
	wire          tx_buff_ram_s1_agent_m0_read;                                                       // tx_buff_ram_s1_agent:m0_read -> tx_buff_ram_s1_translator:uav_read
	wire          tx_buff_ram_s1_agent_m0_readdatavalid;                                              // tx_buff_ram_s1_translator:uav_readdatavalid -> tx_buff_ram_s1_agent:m0_readdatavalid
	wire          tx_buff_ram_s1_agent_m0_lock;                                                       // tx_buff_ram_s1_agent:m0_lock -> tx_buff_ram_s1_translator:uav_lock
	wire    [7:0] tx_buff_ram_s1_agent_m0_writedata;                                                  // tx_buff_ram_s1_agent:m0_writedata -> tx_buff_ram_s1_translator:uav_writedata
	wire          tx_buff_ram_s1_agent_m0_write;                                                      // tx_buff_ram_s1_agent:m0_write -> tx_buff_ram_s1_translator:uav_write
	wire    [0:0] tx_buff_ram_s1_agent_m0_burstcount;                                                 // tx_buff_ram_s1_agent:m0_burstcount -> tx_buff_ram_s1_translator:uav_burstcount
	wire          tx_buff_ram_s1_agent_rf_source_valid;                                               // tx_buff_ram_s1_agent:rf_source_valid -> tx_buff_ram_s1_agent_rsp_fifo:in_valid
	wire   [83:0] tx_buff_ram_s1_agent_rf_source_data;                                                // tx_buff_ram_s1_agent:rf_source_data -> tx_buff_ram_s1_agent_rsp_fifo:in_data
	wire          tx_buff_ram_s1_agent_rf_source_ready;                                               // tx_buff_ram_s1_agent_rsp_fifo:in_ready -> tx_buff_ram_s1_agent:rf_source_ready
	wire          tx_buff_ram_s1_agent_rf_source_startofpacket;                                       // tx_buff_ram_s1_agent:rf_source_startofpacket -> tx_buff_ram_s1_agent_rsp_fifo:in_startofpacket
	wire          tx_buff_ram_s1_agent_rf_source_endofpacket;                                         // tx_buff_ram_s1_agent:rf_source_endofpacket -> tx_buff_ram_s1_agent_rsp_fifo:in_endofpacket
	wire          tx_buff_ram_s1_agent_rsp_fifo_out_valid;                                            // tx_buff_ram_s1_agent_rsp_fifo:out_valid -> tx_buff_ram_s1_agent:rf_sink_valid
	wire   [83:0] tx_buff_ram_s1_agent_rsp_fifo_out_data;                                             // tx_buff_ram_s1_agent_rsp_fifo:out_data -> tx_buff_ram_s1_agent:rf_sink_data
	wire          tx_buff_ram_s1_agent_rsp_fifo_out_ready;                                            // tx_buff_ram_s1_agent:rf_sink_ready -> tx_buff_ram_s1_agent_rsp_fifo:out_ready
	wire          tx_buff_ram_s1_agent_rsp_fifo_out_startofpacket;                                    // tx_buff_ram_s1_agent_rsp_fifo:out_startofpacket -> tx_buff_ram_s1_agent:rf_sink_startofpacket
	wire          tx_buff_ram_s1_agent_rsp_fifo_out_endofpacket;                                      // tx_buff_ram_s1_agent_rsp_fifo:out_endofpacket -> tx_buff_ram_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_010_src_valid;                                                              // cmd_mux_010:src_valid -> tx_buff_ram_s1_agent:cp_valid
	wire   [82:0] cmd_mux_010_src_data;                                                               // cmd_mux_010:src_data -> tx_buff_ram_s1_agent:cp_data
	wire          cmd_mux_010_src_ready;                                                              // tx_buff_ram_s1_agent:cp_ready -> cmd_mux_010:src_ready
	wire   [10:0] cmd_mux_010_src_channel;                                                            // cmd_mux_010:src_channel -> tx_buff_ram_s1_agent:cp_channel
	wire          cmd_mux_010_src_startofpacket;                                                      // cmd_mux_010:src_startofpacket -> tx_buff_ram_s1_agent:cp_startofpacket
	wire          cmd_mux_010_src_endofpacket;                                                        // cmd_mux_010:src_endofpacket -> tx_buff_ram_s1_agent:cp_endofpacket
	wire          nios2_gen2_0_data_master_agent_cp_valid;                                            // nios2_gen2_0_data_master_agent:cp_valid -> router:sink_valid
	wire  [109:0] nios2_gen2_0_data_master_agent_cp_data;                                             // nios2_gen2_0_data_master_agent:cp_data -> router:sink_data
	wire          nios2_gen2_0_data_master_agent_cp_ready;                                            // router:sink_ready -> nios2_gen2_0_data_master_agent:cp_ready
	wire          nios2_gen2_0_data_master_agent_cp_startofpacket;                                    // nios2_gen2_0_data_master_agent:cp_startofpacket -> router:sink_startofpacket
	wire          nios2_gen2_0_data_master_agent_cp_endofpacket;                                      // nios2_gen2_0_data_master_agent:cp_endofpacket -> router:sink_endofpacket
	wire          rx_dma_m_write_agent_cp_valid;                                                      // rx_dma_m_write_agent:cp_valid -> router_001:sink_valid
	wire   [82:0] rx_dma_m_write_agent_cp_data;                                                       // rx_dma_m_write_agent:cp_data -> router_001:sink_data
	wire          rx_dma_m_write_agent_cp_ready;                                                      // router_001:sink_ready -> rx_dma_m_write_agent:cp_ready
	wire          rx_dma_m_write_agent_cp_startofpacket;                                              // rx_dma_m_write_agent:cp_startofpacket -> router_001:sink_startofpacket
	wire          rx_dma_m_write_agent_cp_endofpacket;                                                // rx_dma_m_write_agent:cp_endofpacket -> router_001:sink_endofpacket
	wire          router_001_src_valid;                                                               // router_001:src_valid -> cmd_demux_001:sink_valid
	wire   [82:0] router_001_src_data;                                                                // router_001:src_data -> cmd_demux_001:sink_data
	wire          router_001_src_ready;                                                               // cmd_demux_001:sink_ready -> router_001:src_ready
	wire   [10:0] router_001_src_channel;                                                             // router_001:src_channel -> cmd_demux_001:sink_channel
	wire          router_001_src_startofpacket;                                                       // router_001:src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          router_001_src_endofpacket;                                                         // router_001:src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          tx_dma_m_read_agent_cp_valid;                                                       // tx_dma_m_read_agent:cp_valid -> router_002:sink_valid
	wire   [82:0] tx_dma_m_read_agent_cp_data;                                                        // tx_dma_m_read_agent:cp_data -> router_002:sink_data
	wire          tx_dma_m_read_agent_cp_ready;                                                       // router_002:sink_ready -> tx_dma_m_read_agent:cp_ready
	wire          tx_dma_m_read_agent_cp_startofpacket;                                               // tx_dma_m_read_agent:cp_startofpacket -> router_002:sink_startofpacket
	wire          tx_dma_m_read_agent_cp_endofpacket;                                                 // tx_dma_m_read_agent:cp_endofpacket -> router_002:sink_endofpacket
	wire          rx_dma_descriptor_read_agent_cp_valid;                                              // rx_dma_descriptor_read_agent:cp_valid -> router_003:sink_valid
	wire  [109:0] rx_dma_descriptor_read_agent_cp_data;                                               // rx_dma_descriptor_read_agent:cp_data -> router_003:sink_data
	wire          rx_dma_descriptor_read_agent_cp_ready;                                              // router_003:sink_ready -> rx_dma_descriptor_read_agent:cp_ready
	wire          rx_dma_descriptor_read_agent_cp_startofpacket;                                      // rx_dma_descriptor_read_agent:cp_startofpacket -> router_003:sink_startofpacket
	wire          rx_dma_descriptor_read_agent_cp_endofpacket;                                        // rx_dma_descriptor_read_agent:cp_endofpacket -> router_003:sink_endofpacket
	wire          router_003_src_valid;                                                               // router_003:src_valid -> cmd_demux_003:sink_valid
	wire  [109:0] router_003_src_data;                                                                // router_003:src_data -> cmd_demux_003:sink_data
	wire          router_003_src_ready;                                                               // cmd_demux_003:sink_ready -> router_003:src_ready
	wire   [10:0] router_003_src_channel;                                                             // router_003:src_channel -> cmd_demux_003:sink_channel
	wire          router_003_src_startofpacket;                                                       // router_003:src_startofpacket -> cmd_demux_003:sink_startofpacket
	wire          router_003_src_endofpacket;                                                         // router_003:src_endofpacket -> cmd_demux_003:sink_endofpacket
	wire          tx_dma_descriptor_read_agent_cp_valid;                                              // tx_dma_descriptor_read_agent:cp_valid -> router_004:sink_valid
	wire  [109:0] tx_dma_descriptor_read_agent_cp_data;                                               // tx_dma_descriptor_read_agent:cp_data -> router_004:sink_data
	wire          tx_dma_descriptor_read_agent_cp_ready;                                              // router_004:sink_ready -> tx_dma_descriptor_read_agent:cp_ready
	wire          tx_dma_descriptor_read_agent_cp_startofpacket;                                      // tx_dma_descriptor_read_agent:cp_startofpacket -> router_004:sink_startofpacket
	wire          tx_dma_descriptor_read_agent_cp_endofpacket;                                        // tx_dma_descriptor_read_agent:cp_endofpacket -> router_004:sink_endofpacket
	wire          router_004_src_valid;                                                               // router_004:src_valid -> cmd_demux_004:sink_valid
	wire  [109:0] router_004_src_data;                                                                // router_004:src_data -> cmd_demux_004:sink_data
	wire          router_004_src_ready;                                                               // cmd_demux_004:sink_ready -> router_004:src_ready
	wire   [10:0] router_004_src_channel;                                                             // router_004:src_channel -> cmd_demux_004:sink_channel
	wire          router_004_src_startofpacket;                                                       // router_004:src_startofpacket -> cmd_demux_004:sink_startofpacket
	wire          router_004_src_endofpacket;                                                         // router_004:src_endofpacket -> cmd_demux_004:sink_endofpacket
	wire          rx_dma_descriptor_write_agent_cp_valid;                                             // rx_dma_descriptor_write_agent:cp_valid -> router_005:sink_valid
	wire  [109:0] rx_dma_descriptor_write_agent_cp_data;                                              // rx_dma_descriptor_write_agent:cp_data -> router_005:sink_data
	wire          rx_dma_descriptor_write_agent_cp_ready;                                             // router_005:sink_ready -> rx_dma_descriptor_write_agent:cp_ready
	wire          rx_dma_descriptor_write_agent_cp_startofpacket;                                     // rx_dma_descriptor_write_agent:cp_startofpacket -> router_005:sink_startofpacket
	wire          rx_dma_descriptor_write_agent_cp_endofpacket;                                       // rx_dma_descriptor_write_agent:cp_endofpacket -> router_005:sink_endofpacket
	wire          router_005_src_valid;                                                               // router_005:src_valid -> cmd_demux_005:sink_valid
	wire  [109:0] router_005_src_data;                                                                // router_005:src_data -> cmd_demux_005:sink_data
	wire          router_005_src_ready;                                                               // cmd_demux_005:sink_ready -> router_005:src_ready
	wire   [10:0] router_005_src_channel;                                                             // router_005:src_channel -> cmd_demux_005:sink_channel
	wire          router_005_src_startofpacket;                                                       // router_005:src_startofpacket -> cmd_demux_005:sink_startofpacket
	wire          router_005_src_endofpacket;                                                         // router_005:src_endofpacket -> cmd_demux_005:sink_endofpacket
	wire          tx_dma_descriptor_write_agent_cp_valid;                                             // tx_dma_descriptor_write_agent:cp_valid -> router_006:sink_valid
	wire  [109:0] tx_dma_descriptor_write_agent_cp_data;                                              // tx_dma_descriptor_write_agent:cp_data -> router_006:sink_data
	wire          tx_dma_descriptor_write_agent_cp_ready;                                             // router_006:sink_ready -> tx_dma_descriptor_write_agent:cp_ready
	wire          tx_dma_descriptor_write_agent_cp_startofpacket;                                     // tx_dma_descriptor_write_agent:cp_startofpacket -> router_006:sink_startofpacket
	wire          tx_dma_descriptor_write_agent_cp_endofpacket;                                       // tx_dma_descriptor_write_agent:cp_endofpacket -> router_006:sink_endofpacket
	wire          router_006_src_valid;                                                               // router_006:src_valid -> cmd_demux_006:sink_valid
	wire  [109:0] router_006_src_data;                                                                // router_006:src_data -> cmd_demux_006:sink_data
	wire          router_006_src_ready;                                                               // cmd_demux_006:sink_ready -> router_006:src_ready
	wire   [10:0] router_006_src_channel;                                                             // router_006:src_channel -> cmd_demux_006:sink_channel
	wire          router_006_src_startofpacket;                                                       // router_006:src_startofpacket -> cmd_demux_006:sink_startofpacket
	wire          router_006_src_endofpacket;                                                         // router_006:src_endofpacket -> cmd_demux_006:sink_endofpacket
	wire          nios2_gen2_0_instruction_master_agent_cp_valid;                                     // nios2_gen2_0_instruction_master_agent:cp_valid -> router_007:sink_valid
	wire  [109:0] nios2_gen2_0_instruction_master_agent_cp_data;                                      // nios2_gen2_0_instruction_master_agent:cp_data -> router_007:sink_data
	wire          nios2_gen2_0_instruction_master_agent_cp_ready;                                     // router_007:sink_ready -> nios2_gen2_0_instruction_master_agent:cp_ready
	wire          nios2_gen2_0_instruction_master_agent_cp_startofpacket;                             // nios2_gen2_0_instruction_master_agent:cp_startofpacket -> router_007:sink_startofpacket
	wire          nios2_gen2_0_instruction_master_agent_cp_endofpacket;                               // nios2_gen2_0_instruction_master_agent:cp_endofpacket -> router_007:sink_endofpacket
	wire          jtag_uart_0_avalon_jtag_slave_agent_rp_valid;                                       // jtag_uart_0_avalon_jtag_slave_agent:rp_valid -> router_008:sink_valid
	wire  [109:0] jtag_uart_0_avalon_jtag_slave_agent_rp_data;                                        // jtag_uart_0_avalon_jtag_slave_agent:rp_data -> router_008:sink_data
	wire          jtag_uart_0_avalon_jtag_slave_agent_rp_ready;                                       // router_008:sink_ready -> jtag_uart_0_avalon_jtag_slave_agent:rp_ready
	wire          jtag_uart_0_avalon_jtag_slave_agent_rp_startofpacket;                               // jtag_uart_0_avalon_jtag_slave_agent:rp_startofpacket -> router_008:sink_startofpacket
	wire          jtag_uart_0_avalon_jtag_slave_agent_rp_endofpacket;                                 // jtag_uart_0_avalon_jtag_slave_agent:rp_endofpacket -> router_008:sink_endofpacket
	wire          router_008_src_valid;                                                               // router_008:src_valid -> rsp_demux:sink_valid
	wire  [109:0] router_008_src_data;                                                                // router_008:src_data -> rsp_demux:sink_data
	wire          router_008_src_ready;                                                               // rsp_demux:sink_ready -> router_008:src_ready
	wire   [10:0] router_008_src_channel;                                                             // router_008:src_channel -> rsp_demux:sink_channel
	wire          router_008_src_startofpacket;                                                       // router_008:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_008_src_endofpacket;                                                         // router_008:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          tse_control_port_agent_rp_valid;                                                    // tse_control_port_agent:rp_valid -> router_009:sink_valid
	wire  [109:0] tse_control_port_agent_rp_data;                                                     // tse_control_port_agent:rp_data -> router_009:sink_data
	wire          tse_control_port_agent_rp_ready;                                                    // router_009:sink_ready -> tse_control_port_agent:rp_ready
	wire          tse_control_port_agent_rp_startofpacket;                                            // tse_control_port_agent:rp_startofpacket -> router_009:sink_startofpacket
	wire          tse_control_port_agent_rp_endofpacket;                                              // tse_control_port_agent:rp_endofpacket -> router_009:sink_endofpacket
	wire          router_009_src_valid;                                                               // router_009:src_valid -> rsp_demux_001:sink_valid
	wire  [109:0] router_009_src_data;                                                                // router_009:src_data -> rsp_demux_001:sink_data
	wire          router_009_src_ready;                                                               // rsp_demux_001:sink_ready -> router_009:src_ready
	wire   [10:0] router_009_src_channel;                                                             // router_009:src_channel -> rsp_demux_001:sink_channel
	wire          router_009_src_startofpacket;                                                       // router_009:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          router_009_src_endofpacket;                                                         // router_009:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          tx_dma_csr_agent_rp_valid;                                                          // tx_dma_csr_agent:rp_valid -> router_010:sink_valid
	wire  [109:0] tx_dma_csr_agent_rp_data;                                                           // tx_dma_csr_agent:rp_data -> router_010:sink_data
	wire          tx_dma_csr_agent_rp_ready;                                                          // router_010:sink_ready -> tx_dma_csr_agent:rp_ready
	wire          tx_dma_csr_agent_rp_startofpacket;                                                  // tx_dma_csr_agent:rp_startofpacket -> router_010:sink_startofpacket
	wire          tx_dma_csr_agent_rp_endofpacket;                                                    // tx_dma_csr_agent:rp_endofpacket -> router_010:sink_endofpacket
	wire          router_010_src_valid;                                                               // router_010:src_valid -> rsp_demux_002:sink_valid
	wire  [109:0] router_010_src_data;                                                                // router_010:src_data -> rsp_demux_002:sink_data
	wire          router_010_src_ready;                                                               // rsp_demux_002:sink_ready -> router_010:src_ready
	wire   [10:0] router_010_src_channel;                                                             // router_010:src_channel -> rsp_demux_002:sink_channel
	wire          router_010_src_startofpacket;                                                       // router_010:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire          router_010_src_endofpacket;                                                         // router_010:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire          rx_dma_csr_agent_rp_valid;                                                          // rx_dma_csr_agent:rp_valid -> router_011:sink_valid
	wire  [109:0] rx_dma_csr_agent_rp_data;                                                           // rx_dma_csr_agent:rp_data -> router_011:sink_data
	wire          rx_dma_csr_agent_rp_ready;                                                          // router_011:sink_ready -> rx_dma_csr_agent:rp_ready
	wire          rx_dma_csr_agent_rp_startofpacket;                                                  // rx_dma_csr_agent:rp_startofpacket -> router_011:sink_startofpacket
	wire          rx_dma_csr_agent_rp_endofpacket;                                                    // rx_dma_csr_agent:rp_endofpacket -> router_011:sink_endofpacket
	wire          router_011_src_valid;                                                               // router_011:src_valid -> rsp_demux_003:sink_valid
	wire  [109:0] router_011_src_data;                                                                // router_011:src_data -> rsp_demux_003:sink_data
	wire          router_011_src_ready;                                                               // rsp_demux_003:sink_ready -> router_011:src_ready
	wire   [10:0] router_011_src_channel;                                                             // router_011:src_channel -> rsp_demux_003:sink_channel
	wire          router_011_src_startofpacket;                                                       // router_011:src_startofpacket -> rsp_demux_003:sink_startofpacket
	wire          router_011_src_endofpacket;                                                         // router_011:src_endofpacket -> rsp_demux_003:sink_endofpacket
	wire          nios2_gen2_0_debug_mem_slave_agent_rp_valid;                                        // nios2_gen2_0_debug_mem_slave_agent:rp_valid -> router_012:sink_valid
	wire  [109:0] nios2_gen2_0_debug_mem_slave_agent_rp_data;                                         // nios2_gen2_0_debug_mem_slave_agent:rp_data -> router_012:sink_data
	wire          nios2_gen2_0_debug_mem_slave_agent_rp_ready;                                        // router_012:sink_ready -> nios2_gen2_0_debug_mem_slave_agent:rp_ready
	wire          nios2_gen2_0_debug_mem_slave_agent_rp_startofpacket;                                // nios2_gen2_0_debug_mem_slave_agent:rp_startofpacket -> router_012:sink_startofpacket
	wire          nios2_gen2_0_debug_mem_slave_agent_rp_endofpacket;                                  // nios2_gen2_0_debug_mem_slave_agent:rp_endofpacket -> router_012:sink_endofpacket
	wire          router_012_src_valid;                                                               // router_012:src_valid -> rsp_demux_004:sink_valid
	wire  [109:0] router_012_src_data;                                                                // router_012:src_data -> rsp_demux_004:sink_data
	wire          router_012_src_ready;                                                               // rsp_demux_004:sink_ready -> router_012:src_ready
	wire   [10:0] router_012_src_channel;                                                             // router_012:src_channel -> rsp_demux_004:sink_channel
	wire          router_012_src_startofpacket;                                                       // router_012:src_startofpacket -> rsp_demux_004:sink_startofpacket
	wire          router_012_src_endofpacket;                                                         // router_012:src_endofpacket -> rsp_demux_004:sink_endofpacket
	wire          system_ram_s1_agent_rp_valid;                                                       // system_ram_s1_agent:rp_valid -> router_013:sink_valid
	wire  [109:0] system_ram_s1_agent_rp_data;                                                        // system_ram_s1_agent:rp_data -> router_013:sink_data
	wire          system_ram_s1_agent_rp_ready;                                                       // router_013:sink_ready -> system_ram_s1_agent:rp_ready
	wire          system_ram_s1_agent_rp_startofpacket;                                               // system_ram_s1_agent:rp_startofpacket -> router_013:sink_startofpacket
	wire          system_ram_s1_agent_rp_endofpacket;                                                 // system_ram_s1_agent:rp_endofpacket -> router_013:sink_endofpacket
	wire          router_013_src_valid;                                                               // router_013:src_valid -> rsp_demux_005:sink_valid
	wire  [109:0] router_013_src_data;                                                                // router_013:src_data -> rsp_demux_005:sink_data
	wire          router_013_src_ready;                                                               // rsp_demux_005:sink_ready -> router_013:src_ready
	wire   [10:0] router_013_src_channel;                                                             // router_013:src_channel -> rsp_demux_005:sink_channel
	wire          router_013_src_startofpacket;                                                       // router_013:src_startofpacket -> rsp_demux_005:sink_startofpacket
	wire          router_013_src_endofpacket;                                                         // router_013:src_endofpacket -> rsp_demux_005:sink_endofpacket
	wire          header_ram_s1_agent_rp_valid;                                                       // header_ram_s1_agent:rp_valid -> router_014:sink_valid
	wire   [82:0] header_ram_s1_agent_rp_data;                                                        // header_ram_s1_agent:rp_data -> router_014:sink_data
	wire          header_ram_s1_agent_rp_ready;                                                       // router_014:sink_ready -> header_ram_s1_agent:rp_ready
	wire          header_ram_s1_agent_rp_startofpacket;                                               // header_ram_s1_agent:rp_startofpacket -> router_014:sink_startofpacket
	wire          header_ram_s1_agent_rp_endofpacket;                                                 // header_ram_s1_agent:rp_endofpacket -> router_014:sink_endofpacket
	wire          router_014_src_valid;                                                               // router_014:src_valid -> rsp_demux_006:sink_valid
	wire   [82:0] router_014_src_data;                                                                // router_014:src_data -> rsp_demux_006:sink_data
	wire          router_014_src_ready;                                                               // rsp_demux_006:sink_ready -> router_014:src_ready
	wire   [10:0] router_014_src_channel;                                                             // router_014:src_channel -> rsp_demux_006:sink_channel
	wire          router_014_src_startofpacket;                                                       // router_014:src_startofpacket -> rsp_demux_006:sink_startofpacket
	wire          router_014_src_endofpacket;                                                         // router_014:src_endofpacket -> rsp_demux_006:sink_endofpacket
	wire          timer_0_s1_agent_rp_valid;                                                          // timer_0_s1_agent:rp_valid -> router_015:sink_valid
	wire  [109:0] timer_0_s1_agent_rp_data;                                                           // timer_0_s1_agent:rp_data -> router_015:sink_data
	wire          timer_0_s1_agent_rp_ready;                                                          // router_015:sink_ready -> timer_0_s1_agent:rp_ready
	wire          timer_0_s1_agent_rp_startofpacket;                                                  // timer_0_s1_agent:rp_startofpacket -> router_015:sink_startofpacket
	wire          timer_0_s1_agent_rp_endofpacket;                                                    // timer_0_s1_agent:rp_endofpacket -> router_015:sink_endofpacket
	wire          router_015_src_valid;                                                               // router_015:src_valid -> rsp_demux_007:sink_valid
	wire  [109:0] router_015_src_data;                                                                // router_015:src_data -> rsp_demux_007:sink_data
	wire          router_015_src_ready;                                                               // rsp_demux_007:sink_ready -> router_015:src_ready
	wire   [10:0] router_015_src_channel;                                                             // router_015:src_channel -> rsp_demux_007:sink_channel
	wire          router_015_src_startofpacket;                                                       // router_015:src_startofpacket -> rsp_demux_007:sink_startofpacket
	wire          router_015_src_endofpacket;                                                         // router_015:src_endofpacket -> rsp_demux_007:sink_endofpacket
	wire          rx_buf_ram_s1_agent_rp_valid;                                                       // rx_buf_ram_s1_agent:rp_valid -> router_016:sink_valid
	wire   [82:0] rx_buf_ram_s1_agent_rp_data;                                                        // rx_buf_ram_s1_agent:rp_data -> router_016:sink_data
	wire          rx_buf_ram_s1_agent_rp_ready;                                                       // router_016:sink_ready -> rx_buf_ram_s1_agent:rp_ready
	wire          rx_buf_ram_s1_agent_rp_startofpacket;                                               // rx_buf_ram_s1_agent:rp_startofpacket -> router_016:sink_startofpacket
	wire          rx_buf_ram_s1_agent_rp_endofpacket;                                                 // rx_buf_ram_s1_agent:rp_endofpacket -> router_016:sink_endofpacket
	wire          router_016_src_valid;                                                               // router_016:src_valid -> rsp_demux_008:sink_valid
	wire   [82:0] router_016_src_data;                                                                // router_016:src_data -> rsp_demux_008:sink_data
	wire          router_016_src_ready;                                                               // rsp_demux_008:sink_ready -> router_016:src_ready
	wire   [10:0] router_016_src_channel;                                                             // router_016:src_channel -> rsp_demux_008:sink_channel
	wire          router_016_src_startofpacket;                                                       // router_016:src_startofpacket -> rsp_demux_008:sink_startofpacket
	wire          router_016_src_endofpacket;                                                         // router_016:src_endofpacket -> rsp_demux_008:sink_endofpacket
	wire          eth_irq_pio_s1_agent_rp_valid;                                                      // eth_irq_pio_s1_agent:rp_valid -> router_017:sink_valid
	wire  [109:0] eth_irq_pio_s1_agent_rp_data;                                                       // eth_irq_pio_s1_agent:rp_data -> router_017:sink_data
	wire          eth_irq_pio_s1_agent_rp_ready;                                                      // router_017:sink_ready -> eth_irq_pio_s1_agent:rp_ready
	wire          eth_irq_pio_s1_agent_rp_startofpacket;                                              // eth_irq_pio_s1_agent:rp_startofpacket -> router_017:sink_startofpacket
	wire          eth_irq_pio_s1_agent_rp_endofpacket;                                                // eth_irq_pio_s1_agent:rp_endofpacket -> router_017:sink_endofpacket
	wire          router_017_src_valid;                                                               // router_017:src_valid -> rsp_demux_009:sink_valid
	wire  [109:0] router_017_src_data;                                                                // router_017:src_data -> rsp_demux_009:sink_data
	wire          router_017_src_ready;                                                               // rsp_demux_009:sink_ready -> router_017:src_ready
	wire   [10:0] router_017_src_channel;                                                             // router_017:src_channel -> rsp_demux_009:sink_channel
	wire          router_017_src_startofpacket;                                                       // router_017:src_startofpacket -> rsp_demux_009:sink_startofpacket
	wire          router_017_src_endofpacket;                                                         // router_017:src_endofpacket -> rsp_demux_009:sink_endofpacket
	wire          tx_buff_ram_s1_agent_rp_valid;                                                      // tx_buff_ram_s1_agent:rp_valid -> router_018:sink_valid
	wire   [82:0] tx_buff_ram_s1_agent_rp_data;                                                       // tx_buff_ram_s1_agent:rp_data -> router_018:sink_data
	wire          tx_buff_ram_s1_agent_rp_ready;                                                      // router_018:sink_ready -> tx_buff_ram_s1_agent:rp_ready
	wire          tx_buff_ram_s1_agent_rp_startofpacket;                                              // tx_buff_ram_s1_agent:rp_startofpacket -> router_018:sink_startofpacket
	wire          tx_buff_ram_s1_agent_rp_endofpacket;                                                // tx_buff_ram_s1_agent:rp_endofpacket -> router_018:sink_endofpacket
	wire          router_018_src_valid;                                                               // router_018:src_valid -> rsp_demux_010:sink_valid
	wire   [82:0] router_018_src_data;                                                                // router_018:src_data -> rsp_demux_010:sink_data
	wire          router_018_src_ready;                                                               // rsp_demux_010:sink_ready -> router_018:src_ready
	wire   [10:0] router_018_src_channel;                                                             // router_018:src_channel -> rsp_demux_010:sink_channel
	wire          router_018_src_startofpacket;                                                       // router_018:src_startofpacket -> rsp_demux_010:sink_startofpacket
	wire          router_018_src_endofpacket;                                                         // router_018:src_endofpacket -> rsp_demux_010:sink_endofpacket
	wire          router_src_valid;                                                                   // router:src_valid -> nios2_gen2_0_data_master_limiter:cmd_sink_valid
	wire  [109:0] router_src_data;                                                                    // router:src_data -> nios2_gen2_0_data_master_limiter:cmd_sink_data
	wire          router_src_ready;                                                                   // nios2_gen2_0_data_master_limiter:cmd_sink_ready -> router:src_ready
	wire   [10:0] router_src_channel;                                                                 // router:src_channel -> nios2_gen2_0_data_master_limiter:cmd_sink_channel
	wire          router_src_startofpacket;                                                           // router:src_startofpacket -> nios2_gen2_0_data_master_limiter:cmd_sink_startofpacket
	wire          router_src_endofpacket;                                                             // router:src_endofpacket -> nios2_gen2_0_data_master_limiter:cmd_sink_endofpacket
	wire  [109:0] nios2_gen2_0_data_master_limiter_cmd_src_data;                                      // nios2_gen2_0_data_master_limiter:cmd_src_data -> cmd_demux:sink_data
	wire          nios2_gen2_0_data_master_limiter_cmd_src_ready;                                     // cmd_demux:sink_ready -> nios2_gen2_0_data_master_limiter:cmd_src_ready
	wire   [10:0] nios2_gen2_0_data_master_limiter_cmd_src_channel;                                   // nios2_gen2_0_data_master_limiter:cmd_src_channel -> cmd_demux:sink_channel
	wire          nios2_gen2_0_data_master_limiter_cmd_src_startofpacket;                             // nios2_gen2_0_data_master_limiter:cmd_src_startofpacket -> cmd_demux:sink_startofpacket
	wire          nios2_gen2_0_data_master_limiter_cmd_src_endofpacket;                               // nios2_gen2_0_data_master_limiter:cmd_src_endofpacket -> cmd_demux:sink_endofpacket
	wire          rsp_mux_src_valid;                                                                  // rsp_mux:src_valid -> nios2_gen2_0_data_master_limiter:rsp_sink_valid
	wire  [109:0] rsp_mux_src_data;                                                                   // rsp_mux:src_data -> nios2_gen2_0_data_master_limiter:rsp_sink_data
	wire          rsp_mux_src_ready;                                                                  // nios2_gen2_0_data_master_limiter:rsp_sink_ready -> rsp_mux:src_ready
	wire   [10:0] rsp_mux_src_channel;                                                                // rsp_mux:src_channel -> nios2_gen2_0_data_master_limiter:rsp_sink_channel
	wire          rsp_mux_src_startofpacket;                                                          // rsp_mux:src_startofpacket -> nios2_gen2_0_data_master_limiter:rsp_sink_startofpacket
	wire          rsp_mux_src_endofpacket;                                                            // rsp_mux:src_endofpacket -> nios2_gen2_0_data_master_limiter:rsp_sink_endofpacket
	wire          nios2_gen2_0_data_master_limiter_rsp_src_valid;                                     // nios2_gen2_0_data_master_limiter:rsp_src_valid -> nios2_gen2_0_data_master_agent:rp_valid
	wire  [109:0] nios2_gen2_0_data_master_limiter_rsp_src_data;                                      // nios2_gen2_0_data_master_limiter:rsp_src_data -> nios2_gen2_0_data_master_agent:rp_data
	wire          nios2_gen2_0_data_master_limiter_rsp_src_ready;                                     // nios2_gen2_0_data_master_agent:rp_ready -> nios2_gen2_0_data_master_limiter:rsp_src_ready
	wire   [10:0] nios2_gen2_0_data_master_limiter_rsp_src_channel;                                   // nios2_gen2_0_data_master_limiter:rsp_src_channel -> nios2_gen2_0_data_master_agent:rp_channel
	wire          nios2_gen2_0_data_master_limiter_rsp_src_startofpacket;                             // nios2_gen2_0_data_master_limiter:rsp_src_startofpacket -> nios2_gen2_0_data_master_agent:rp_startofpacket
	wire          nios2_gen2_0_data_master_limiter_rsp_src_endofpacket;                               // nios2_gen2_0_data_master_limiter:rsp_src_endofpacket -> nios2_gen2_0_data_master_agent:rp_endofpacket
	wire          router_002_src_valid;                                                               // router_002:src_valid -> tx_dma_m_read_limiter:cmd_sink_valid
	wire   [82:0] router_002_src_data;                                                                // router_002:src_data -> tx_dma_m_read_limiter:cmd_sink_data
	wire          router_002_src_ready;                                                               // tx_dma_m_read_limiter:cmd_sink_ready -> router_002:src_ready
	wire   [10:0] router_002_src_channel;                                                             // router_002:src_channel -> tx_dma_m_read_limiter:cmd_sink_channel
	wire          router_002_src_startofpacket;                                                       // router_002:src_startofpacket -> tx_dma_m_read_limiter:cmd_sink_startofpacket
	wire          router_002_src_endofpacket;                                                         // router_002:src_endofpacket -> tx_dma_m_read_limiter:cmd_sink_endofpacket
	wire   [82:0] tx_dma_m_read_limiter_cmd_src_data;                                                 // tx_dma_m_read_limiter:cmd_src_data -> cmd_demux_002:sink_data
	wire          tx_dma_m_read_limiter_cmd_src_ready;                                                // cmd_demux_002:sink_ready -> tx_dma_m_read_limiter:cmd_src_ready
	wire   [10:0] tx_dma_m_read_limiter_cmd_src_channel;                                              // tx_dma_m_read_limiter:cmd_src_channel -> cmd_demux_002:sink_channel
	wire          tx_dma_m_read_limiter_cmd_src_startofpacket;                                        // tx_dma_m_read_limiter:cmd_src_startofpacket -> cmd_demux_002:sink_startofpacket
	wire          tx_dma_m_read_limiter_cmd_src_endofpacket;                                          // tx_dma_m_read_limiter:cmd_src_endofpacket -> cmd_demux_002:sink_endofpacket
	wire          rsp_mux_002_src_valid;                                                              // rsp_mux_002:src_valid -> tx_dma_m_read_limiter:rsp_sink_valid
	wire   [82:0] rsp_mux_002_src_data;                                                               // rsp_mux_002:src_data -> tx_dma_m_read_limiter:rsp_sink_data
	wire          rsp_mux_002_src_ready;                                                              // tx_dma_m_read_limiter:rsp_sink_ready -> rsp_mux_002:src_ready
	wire   [10:0] rsp_mux_002_src_channel;                                                            // rsp_mux_002:src_channel -> tx_dma_m_read_limiter:rsp_sink_channel
	wire          rsp_mux_002_src_startofpacket;                                                      // rsp_mux_002:src_startofpacket -> tx_dma_m_read_limiter:rsp_sink_startofpacket
	wire          rsp_mux_002_src_endofpacket;                                                        // rsp_mux_002:src_endofpacket -> tx_dma_m_read_limiter:rsp_sink_endofpacket
	wire          tx_dma_m_read_limiter_rsp_src_valid;                                                // tx_dma_m_read_limiter:rsp_src_valid -> tx_dma_m_read_agent:rp_valid
	wire   [82:0] tx_dma_m_read_limiter_rsp_src_data;                                                 // tx_dma_m_read_limiter:rsp_src_data -> tx_dma_m_read_agent:rp_data
	wire          tx_dma_m_read_limiter_rsp_src_ready;                                                // tx_dma_m_read_agent:rp_ready -> tx_dma_m_read_limiter:rsp_src_ready
	wire   [10:0] tx_dma_m_read_limiter_rsp_src_channel;                                              // tx_dma_m_read_limiter:rsp_src_channel -> tx_dma_m_read_agent:rp_channel
	wire          tx_dma_m_read_limiter_rsp_src_startofpacket;                                        // tx_dma_m_read_limiter:rsp_src_startofpacket -> tx_dma_m_read_agent:rp_startofpacket
	wire          tx_dma_m_read_limiter_rsp_src_endofpacket;                                          // tx_dma_m_read_limiter:rsp_src_endofpacket -> tx_dma_m_read_agent:rp_endofpacket
	wire          router_007_src_valid;                                                               // router_007:src_valid -> nios2_gen2_0_instruction_master_limiter:cmd_sink_valid
	wire  [109:0] router_007_src_data;                                                                // router_007:src_data -> nios2_gen2_0_instruction_master_limiter:cmd_sink_data
	wire          router_007_src_ready;                                                               // nios2_gen2_0_instruction_master_limiter:cmd_sink_ready -> router_007:src_ready
	wire   [10:0] router_007_src_channel;                                                             // router_007:src_channel -> nios2_gen2_0_instruction_master_limiter:cmd_sink_channel
	wire          router_007_src_startofpacket;                                                       // router_007:src_startofpacket -> nios2_gen2_0_instruction_master_limiter:cmd_sink_startofpacket
	wire          router_007_src_endofpacket;                                                         // router_007:src_endofpacket -> nios2_gen2_0_instruction_master_limiter:cmd_sink_endofpacket
	wire  [109:0] nios2_gen2_0_instruction_master_limiter_cmd_src_data;                               // nios2_gen2_0_instruction_master_limiter:cmd_src_data -> cmd_demux_007:sink_data
	wire          nios2_gen2_0_instruction_master_limiter_cmd_src_ready;                              // cmd_demux_007:sink_ready -> nios2_gen2_0_instruction_master_limiter:cmd_src_ready
	wire   [10:0] nios2_gen2_0_instruction_master_limiter_cmd_src_channel;                            // nios2_gen2_0_instruction_master_limiter:cmd_src_channel -> cmd_demux_007:sink_channel
	wire          nios2_gen2_0_instruction_master_limiter_cmd_src_startofpacket;                      // nios2_gen2_0_instruction_master_limiter:cmd_src_startofpacket -> cmd_demux_007:sink_startofpacket
	wire          nios2_gen2_0_instruction_master_limiter_cmd_src_endofpacket;                        // nios2_gen2_0_instruction_master_limiter:cmd_src_endofpacket -> cmd_demux_007:sink_endofpacket
	wire          rsp_mux_007_src_valid;                                                              // rsp_mux_007:src_valid -> nios2_gen2_0_instruction_master_limiter:rsp_sink_valid
	wire  [109:0] rsp_mux_007_src_data;                                                               // rsp_mux_007:src_data -> nios2_gen2_0_instruction_master_limiter:rsp_sink_data
	wire          rsp_mux_007_src_ready;                                                              // nios2_gen2_0_instruction_master_limiter:rsp_sink_ready -> rsp_mux_007:src_ready
	wire   [10:0] rsp_mux_007_src_channel;                                                            // rsp_mux_007:src_channel -> nios2_gen2_0_instruction_master_limiter:rsp_sink_channel
	wire          rsp_mux_007_src_startofpacket;                                                      // rsp_mux_007:src_startofpacket -> nios2_gen2_0_instruction_master_limiter:rsp_sink_startofpacket
	wire          rsp_mux_007_src_endofpacket;                                                        // rsp_mux_007:src_endofpacket -> nios2_gen2_0_instruction_master_limiter:rsp_sink_endofpacket
	wire          nios2_gen2_0_instruction_master_limiter_rsp_src_valid;                              // nios2_gen2_0_instruction_master_limiter:rsp_src_valid -> nios2_gen2_0_instruction_master_agent:rp_valid
	wire  [109:0] nios2_gen2_0_instruction_master_limiter_rsp_src_data;                               // nios2_gen2_0_instruction_master_limiter:rsp_src_data -> nios2_gen2_0_instruction_master_agent:rp_data
	wire          nios2_gen2_0_instruction_master_limiter_rsp_src_ready;                              // nios2_gen2_0_instruction_master_agent:rp_ready -> nios2_gen2_0_instruction_master_limiter:rsp_src_ready
	wire   [10:0] nios2_gen2_0_instruction_master_limiter_rsp_src_channel;                            // nios2_gen2_0_instruction_master_limiter:rsp_src_channel -> nios2_gen2_0_instruction_master_agent:rp_channel
	wire          nios2_gen2_0_instruction_master_limiter_rsp_src_startofpacket;                      // nios2_gen2_0_instruction_master_limiter:rsp_src_startofpacket -> nios2_gen2_0_instruction_master_agent:rp_startofpacket
	wire          nios2_gen2_0_instruction_master_limiter_rsp_src_endofpacket;                        // nios2_gen2_0_instruction_master_limiter:rsp_src_endofpacket -> nios2_gen2_0_instruction_master_agent:rp_endofpacket
	wire          cmd_mux_006_src_valid;                                                              // cmd_mux_006:src_valid -> header_ram_s1_burst_adapter:sink0_valid
	wire   [82:0] cmd_mux_006_src_data;                                                               // cmd_mux_006:src_data -> header_ram_s1_burst_adapter:sink0_data
	wire          cmd_mux_006_src_ready;                                                              // header_ram_s1_burst_adapter:sink0_ready -> cmd_mux_006:src_ready
	wire   [10:0] cmd_mux_006_src_channel;                                                            // cmd_mux_006:src_channel -> header_ram_s1_burst_adapter:sink0_channel
	wire          cmd_mux_006_src_startofpacket;                                                      // cmd_mux_006:src_startofpacket -> header_ram_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_006_src_endofpacket;                                                        // cmd_mux_006:src_endofpacket -> header_ram_s1_burst_adapter:sink0_endofpacket
	wire          header_ram_s1_burst_adapter_source0_valid;                                          // header_ram_s1_burst_adapter:source0_valid -> header_ram_s1_agent:cp_valid
	wire   [82:0] header_ram_s1_burst_adapter_source0_data;                                           // header_ram_s1_burst_adapter:source0_data -> header_ram_s1_agent:cp_data
	wire          header_ram_s1_burst_adapter_source0_ready;                                          // header_ram_s1_agent:cp_ready -> header_ram_s1_burst_adapter:source0_ready
	wire   [10:0] header_ram_s1_burst_adapter_source0_channel;                                        // header_ram_s1_burst_adapter:source0_channel -> header_ram_s1_agent:cp_channel
	wire          header_ram_s1_burst_adapter_source0_startofpacket;                                  // header_ram_s1_burst_adapter:source0_startofpacket -> header_ram_s1_agent:cp_startofpacket
	wire          header_ram_s1_burst_adapter_source0_endofpacket;                                    // header_ram_s1_burst_adapter:source0_endofpacket -> header_ram_s1_agent:cp_endofpacket
	wire          cmd_mux_008_src_valid;                                                              // cmd_mux_008:src_valid -> rx_buf_ram_s1_burst_adapter:sink0_valid
	wire   [82:0] cmd_mux_008_src_data;                                                               // cmd_mux_008:src_data -> rx_buf_ram_s1_burst_adapter:sink0_data
	wire          cmd_mux_008_src_ready;                                                              // rx_buf_ram_s1_burst_adapter:sink0_ready -> cmd_mux_008:src_ready
	wire   [10:0] cmd_mux_008_src_channel;                                                            // cmd_mux_008:src_channel -> rx_buf_ram_s1_burst_adapter:sink0_channel
	wire          cmd_mux_008_src_startofpacket;                                                      // cmd_mux_008:src_startofpacket -> rx_buf_ram_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_008_src_endofpacket;                                                        // cmd_mux_008:src_endofpacket -> rx_buf_ram_s1_burst_adapter:sink0_endofpacket
	wire          rx_buf_ram_s1_burst_adapter_source0_valid;                                          // rx_buf_ram_s1_burst_adapter:source0_valid -> rx_buf_ram_s1_agent:cp_valid
	wire   [82:0] rx_buf_ram_s1_burst_adapter_source0_data;                                           // rx_buf_ram_s1_burst_adapter:source0_data -> rx_buf_ram_s1_agent:cp_data
	wire          rx_buf_ram_s1_burst_adapter_source0_ready;                                          // rx_buf_ram_s1_agent:cp_ready -> rx_buf_ram_s1_burst_adapter:source0_ready
	wire   [10:0] rx_buf_ram_s1_burst_adapter_source0_channel;                                        // rx_buf_ram_s1_burst_adapter:source0_channel -> rx_buf_ram_s1_agent:cp_channel
	wire          rx_buf_ram_s1_burst_adapter_source0_startofpacket;                                  // rx_buf_ram_s1_burst_adapter:source0_startofpacket -> rx_buf_ram_s1_agent:cp_startofpacket
	wire          rx_buf_ram_s1_burst_adapter_source0_endofpacket;                                    // rx_buf_ram_s1_burst_adapter:source0_endofpacket -> rx_buf_ram_s1_agent:cp_endofpacket
	wire          cmd_demux_src0_valid;                                                               // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [109:0] cmd_demux_src0_data;                                                                // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire          cmd_demux_src0_ready;                                                               // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire   [10:0] cmd_demux_src0_channel;                                                             // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire          cmd_demux_src0_startofpacket;                                                       // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire          cmd_demux_src0_endofpacket;                                                         // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_src1_valid;                                                               // cmd_demux:src1_valid -> cmd_mux_001:sink0_valid
	wire  [109:0] cmd_demux_src1_data;                                                                // cmd_demux:src1_data -> cmd_mux_001:sink0_data
	wire          cmd_demux_src1_ready;                                                               // cmd_mux_001:sink0_ready -> cmd_demux:src1_ready
	wire   [10:0] cmd_demux_src1_channel;                                                             // cmd_demux:src1_channel -> cmd_mux_001:sink0_channel
	wire          cmd_demux_src1_startofpacket;                                                       // cmd_demux:src1_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          cmd_demux_src1_endofpacket;                                                         // cmd_demux:src1_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          cmd_demux_src2_valid;                                                               // cmd_demux:src2_valid -> cmd_mux_002:sink0_valid
	wire  [109:0] cmd_demux_src2_data;                                                                // cmd_demux:src2_data -> cmd_mux_002:sink0_data
	wire          cmd_demux_src2_ready;                                                               // cmd_mux_002:sink0_ready -> cmd_demux:src2_ready
	wire   [10:0] cmd_demux_src2_channel;                                                             // cmd_demux:src2_channel -> cmd_mux_002:sink0_channel
	wire          cmd_demux_src2_startofpacket;                                                       // cmd_demux:src2_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire          cmd_demux_src2_endofpacket;                                                         // cmd_demux:src2_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire          cmd_demux_src3_valid;                                                               // cmd_demux:src3_valid -> cmd_mux_003:sink0_valid
	wire  [109:0] cmd_demux_src3_data;                                                                // cmd_demux:src3_data -> cmd_mux_003:sink0_data
	wire          cmd_demux_src3_ready;                                                               // cmd_mux_003:sink0_ready -> cmd_demux:src3_ready
	wire   [10:0] cmd_demux_src3_channel;                                                             // cmd_demux:src3_channel -> cmd_mux_003:sink0_channel
	wire          cmd_demux_src3_startofpacket;                                                       // cmd_demux:src3_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire          cmd_demux_src3_endofpacket;                                                         // cmd_demux:src3_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire          cmd_demux_src4_valid;                                                               // cmd_demux:src4_valid -> cmd_mux_004:sink0_valid
	wire  [109:0] cmd_demux_src4_data;                                                                // cmd_demux:src4_data -> cmd_mux_004:sink0_data
	wire          cmd_demux_src4_ready;                                                               // cmd_mux_004:sink0_ready -> cmd_demux:src4_ready
	wire   [10:0] cmd_demux_src4_channel;                                                             // cmd_demux:src4_channel -> cmd_mux_004:sink0_channel
	wire          cmd_demux_src4_startofpacket;                                                       // cmd_demux:src4_startofpacket -> cmd_mux_004:sink0_startofpacket
	wire          cmd_demux_src4_endofpacket;                                                         // cmd_demux:src4_endofpacket -> cmd_mux_004:sink0_endofpacket
	wire          cmd_demux_src5_valid;                                                               // cmd_demux:src5_valid -> cmd_mux_005:sink0_valid
	wire  [109:0] cmd_demux_src5_data;                                                                // cmd_demux:src5_data -> cmd_mux_005:sink0_data
	wire          cmd_demux_src5_ready;                                                               // cmd_mux_005:sink0_ready -> cmd_demux:src5_ready
	wire   [10:0] cmd_demux_src5_channel;                                                             // cmd_demux:src5_channel -> cmd_mux_005:sink0_channel
	wire          cmd_demux_src5_startofpacket;                                                       // cmd_demux:src5_startofpacket -> cmd_mux_005:sink0_startofpacket
	wire          cmd_demux_src5_endofpacket;                                                         // cmd_demux:src5_endofpacket -> cmd_mux_005:sink0_endofpacket
	wire          cmd_demux_src7_valid;                                                               // cmd_demux:src7_valid -> cmd_mux_007:sink0_valid
	wire  [109:0] cmd_demux_src7_data;                                                                // cmd_demux:src7_data -> cmd_mux_007:sink0_data
	wire          cmd_demux_src7_ready;                                                               // cmd_mux_007:sink0_ready -> cmd_demux:src7_ready
	wire   [10:0] cmd_demux_src7_channel;                                                             // cmd_demux:src7_channel -> cmd_mux_007:sink0_channel
	wire          cmd_demux_src7_startofpacket;                                                       // cmd_demux:src7_startofpacket -> cmd_mux_007:sink0_startofpacket
	wire          cmd_demux_src7_endofpacket;                                                         // cmd_demux:src7_endofpacket -> cmd_mux_007:sink0_endofpacket
	wire          cmd_demux_src9_valid;                                                               // cmd_demux:src9_valid -> cmd_mux_009:sink0_valid
	wire  [109:0] cmd_demux_src9_data;                                                                // cmd_demux:src9_data -> cmd_mux_009:sink0_data
	wire          cmd_demux_src9_ready;                                                               // cmd_mux_009:sink0_ready -> cmd_demux:src9_ready
	wire   [10:0] cmd_demux_src9_channel;                                                             // cmd_demux:src9_channel -> cmd_mux_009:sink0_channel
	wire          cmd_demux_src9_startofpacket;                                                       // cmd_demux:src9_startofpacket -> cmd_mux_009:sink0_startofpacket
	wire          cmd_demux_src9_endofpacket;                                                         // cmd_demux:src9_endofpacket -> cmd_mux_009:sink0_endofpacket
	wire          cmd_demux_001_src0_valid;                                                           // cmd_demux_001:src0_valid -> cmd_mux_008:sink1_valid
	wire   [82:0] cmd_demux_001_src0_data;                                                            // cmd_demux_001:src0_data -> cmd_mux_008:sink1_data
	wire          cmd_demux_001_src0_ready;                                                           // cmd_mux_008:sink1_ready -> cmd_demux_001:src0_ready
	wire   [10:0] cmd_demux_001_src0_channel;                                                         // cmd_demux_001:src0_channel -> cmd_mux_008:sink1_channel
	wire          cmd_demux_001_src0_startofpacket;                                                   // cmd_demux_001:src0_startofpacket -> cmd_mux_008:sink1_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                                                     // cmd_demux_001:src0_endofpacket -> cmd_mux_008:sink1_endofpacket
	wire          cmd_demux_002_src0_valid;                                                           // cmd_demux_002:src0_valid -> cmd_mux_006:sink1_valid
	wire   [82:0] cmd_demux_002_src0_data;                                                            // cmd_demux_002:src0_data -> cmd_mux_006:sink1_data
	wire          cmd_demux_002_src0_ready;                                                           // cmd_mux_006:sink1_ready -> cmd_demux_002:src0_ready
	wire   [10:0] cmd_demux_002_src0_channel;                                                         // cmd_demux_002:src0_channel -> cmd_mux_006:sink1_channel
	wire          cmd_demux_002_src0_startofpacket;                                                   // cmd_demux_002:src0_startofpacket -> cmd_mux_006:sink1_startofpacket
	wire          cmd_demux_002_src0_endofpacket;                                                     // cmd_demux_002:src0_endofpacket -> cmd_mux_006:sink1_endofpacket
	wire          cmd_demux_002_src1_valid;                                                           // cmd_demux_002:src1_valid -> cmd_mux_010:sink0_valid
	wire   [82:0] cmd_demux_002_src1_data;                                                            // cmd_demux_002:src1_data -> cmd_mux_010:sink0_data
	wire          cmd_demux_002_src1_ready;                                                           // cmd_mux_010:sink0_ready -> cmd_demux_002:src1_ready
	wire   [10:0] cmd_demux_002_src1_channel;                                                         // cmd_demux_002:src1_channel -> cmd_mux_010:sink0_channel
	wire          cmd_demux_002_src1_startofpacket;                                                   // cmd_demux_002:src1_startofpacket -> cmd_mux_010:sink0_startofpacket
	wire          cmd_demux_002_src1_endofpacket;                                                     // cmd_demux_002:src1_endofpacket -> cmd_mux_010:sink0_endofpacket
	wire          cmd_demux_003_src0_valid;                                                           // cmd_demux_003:src0_valid -> cmd_mux_005:sink1_valid
	wire  [109:0] cmd_demux_003_src0_data;                                                            // cmd_demux_003:src0_data -> cmd_mux_005:sink1_data
	wire          cmd_demux_003_src0_ready;                                                           // cmd_mux_005:sink1_ready -> cmd_demux_003:src0_ready
	wire   [10:0] cmd_demux_003_src0_channel;                                                         // cmd_demux_003:src0_channel -> cmd_mux_005:sink1_channel
	wire          cmd_demux_003_src0_startofpacket;                                                   // cmd_demux_003:src0_startofpacket -> cmd_mux_005:sink1_startofpacket
	wire          cmd_demux_003_src0_endofpacket;                                                     // cmd_demux_003:src0_endofpacket -> cmd_mux_005:sink1_endofpacket
	wire          cmd_demux_004_src0_valid;                                                           // cmd_demux_004:src0_valid -> cmd_mux_005:sink2_valid
	wire  [109:0] cmd_demux_004_src0_data;                                                            // cmd_demux_004:src0_data -> cmd_mux_005:sink2_data
	wire          cmd_demux_004_src0_ready;                                                           // cmd_mux_005:sink2_ready -> cmd_demux_004:src0_ready
	wire   [10:0] cmd_demux_004_src0_channel;                                                         // cmd_demux_004:src0_channel -> cmd_mux_005:sink2_channel
	wire          cmd_demux_004_src0_startofpacket;                                                   // cmd_demux_004:src0_startofpacket -> cmd_mux_005:sink2_startofpacket
	wire          cmd_demux_004_src0_endofpacket;                                                     // cmd_demux_004:src0_endofpacket -> cmd_mux_005:sink2_endofpacket
	wire          cmd_demux_005_src0_valid;                                                           // cmd_demux_005:src0_valid -> cmd_mux_005:sink3_valid
	wire  [109:0] cmd_demux_005_src0_data;                                                            // cmd_demux_005:src0_data -> cmd_mux_005:sink3_data
	wire          cmd_demux_005_src0_ready;                                                           // cmd_mux_005:sink3_ready -> cmd_demux_005:src0_ready
	wire   [10:0] cmd_demux_005_src0_channel;                                                         // cmd_demux_005:src0_channel -> cmd_mux_005:sink3_channel
	wire          cmd_demux_005_src0_startofpacket;                                                   // cmd_demux_005:src0_startofpacket -> cmd_mux_005:sink3_startofpacket
	wire          cmd_demux_005_src0_endofpacket;                                                     // cmd_demux_005:src0_endofpacket -> cmd_mux_005:sink3_endofpacket
	wire          cmd_demux_006_src0_valid;                                                           // cmd_demux_006:src0_valid -> cmd_mux_005:sink4_valid
	wire  [109:0] cmd_demux_006_src0_data;                                                            // cmd_demux_006:src0_data -> cmd_mux_005:sink4_data
	wire          cmd_demux_006_src0_ready;                                                           // cmd_mux_005:sink4_ready -> cmd_demux_006:src0_ready
	wire   [10:0] cmd_demux_006_src0_channel;                                                         // cmd_demux_006:src0_channel -> cmd_mux_005:sink4_channel
	wire          cmd_demux_006_src0_startofpacket;                                                   // cmd_demux_006:src0_startofpacket -> cmd_mux_005:sink4_startofpacket
	wire          cmd_demux_006_src0_endofpacket;                                                     // cmd_demux_006:src0_endofpacket -> cmd_mux_005:sink4_endofpacket
	wire          cmd_demux_007_src0_valid;                                                           // cmd_demux_007:src0_valid -> cmd_mux_004:sink1_valid
	wire  [109:0] cmd_demux_007_src0_data;                                                            // cmd_demux_007:src0_data -> cmd_mux_004:sink1_data
	wire          cmd_demux_007_src0_ready;                                                           // cmd_mux_004:sink1_ready -> cmd_demux_007:src0_ready
	wire   [10:0] cmd_demux_007_src0_channel;                                                         // cmd_demux_007:src0_channel -> cmd_mux_004:sink1_channel
	wire          cmd_demux_007_src0_startofpacket;                                                   // cmd_demux_007:src0_startofpacket -> cmd_mux_004:sink1_startofpacket
	wire          cmd_demux_007_src0_endofpacket;                                                     // cmd_demux_007:src0_endofpacket -> cmd_mux_004:sink1_endofpacket
	wire          cmd_demux_007_src1_valid;                                                           // cmd_demux_007:src1_valid -> cmd_mux_005:sink5_valid
	wire  [109:0] cmd_demux_007_src1_data;                                                            // cmd_demux_007:src1_data -> cmd_mux_005:sink5_data
	wire          cmd_demux_007_src1_ready;                                                           // cmd_mux_005:sink5_ready -> cmd_demux_007:src1_ready
	wire   [10:0] cmd_demux_007_src1_channel;                                                         // cmd_demux_007:src1_channel -> cmd_mux_005:sink5_channel
	wire          cmd_demux_007_src1_startofpacket;                                                   // cmd_demux_007:src1_startofpacket -> cmd_mux_005:sink5_startofpacket
	wire          cmd_demux_007_src1_endofpacket;                                                     // cmd_demux_007:src1_endofpacket -> cmd_mux_005:sink5_endofpacket
	wire          rsp_demux_src0_valid;                                                               // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [109:0] rsp_demux_src0_data;                                                                // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire          rsp_demux_src0_ready;                                                               // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire   [10:0] rsp_demux_src0_channel;                                                             // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire          rsp_demux_src0_startofpacket;                                                       // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire          rsp_demux_src0_endofpacket;                                                         // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_001_src0_valid;                                                           // rsp_demux_001:src0_valid -> rsp_mux:sink1_valid
	wire  [109:0] rsp_demux_001_src0_data;                                                            // rsp_demux_001:src0_data -> rsp_mux:sink1_data
	wire          rsp_demux_001_src0_ready;                                                           // rsp_mux:sink1_ready -> rsp_demux_001:src0_ready
	wire   [10:0] rsp_demux_001_src0_channel;                                                         // rsp_demux_001:src0_channel -> rsp_mux:sink1_channel
	wire          rsp_demux_001_src0_startofpacket;                                                   // rsp_demux_001:src0_startofpacket -> rsp_mux:sink1_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                                     // rsp_demux_001:src0_endofpacket -> rsp_mux:sink1_endofpacket
	wire          rsp_demux_002_src0_valid;                                                           // rsp_demux_002:src0_valid -> rsp_mux:sink2_valid
	wire  [109:0] rsp_demux_002_src0_data;                                                            // rsp_demux_002:src0_data -> rsp_mux:sink2_data
	wire          rsp_demux_002_src0_ready;                                                           // rsp_mux:sink2_ready -> rsp_demux_002:src0_ready
	wire   [10:0] rsp_demux_002_src0_channel;                                                         // rsp_demux_002:src0_channel -> rsp_mux:sink2_channel
	wire          rsp_demux_002_src0_startofpacket;                                                   // rsp_demux_002:src0_startofpacket -> rsp_mux:sink2_startofpacket
	wire          rsp_demux_002_src0_endofpacket;                                                     // rsp_demux_002:src0_endofpacket -> rsp_mux:sink2_endofpacket
	wire          rsp_demux_003_src0_valid;                                                           // rsp_demux_003:src0_valid -> rsp_mux:sink3_valid
	wire  [109:0] rsp_demux_003_src0_data;                                                            // rsp_demux_003:src0_data -> rsp_mux:sink3_data
	wire          rsp_demux_003_src0_ready;                                                           // rsp_mux:sink3_ready -> rsp_demux_003:src0_ready
	wire   [10:0] rsp_demux_003_src0_channel;                                                         // rsp_demux_003:src0_channel -> rsp_mux:sink3_channel
	wire          rsp_demux_003_src0_startofpacket;                                                   // rsp_demux_003:src0_startofpacket -> rsp_mux:sink3_startofpacket
	wire          rsp_demux_003_src0_endofpacket;                                                     // rsp_demux_003:src0_endofpacket -> rsp_mux:sink3_endofpacket
	wire          rsp_demux_004_src0_valid;                                                           // rsp_demux_004:src0_valid -> rsp_mux:sink4_valid
	wire  [109:0] rsp_demux_004_src0_data;                                                            // rsp_demux_004:src0_data -> rsp_mux:sink4_data
	wire          rsp_demux_004_src0_ready;                                                           // rsp_mux:sink4_ready -> rsp_demux_004:src0_ready
	wire   [10:0] rsp_demux_004_src0_channel;                                                         // rsp_demux_004:src0_channel -> rsp_mux:sink4_channel
	wire          rsp_demux_004_src0_startofpacket;                                                   // rsp_demux_004:src0_startofpacket -> rsp_mux:sink4_startofpacket
	wire          rsp_demux_004_src0_endofpacket;                                                     // rsp_demux_004:src0_endofpacket -> rsp_mux:sink4_endofpacket
	wire          rsp_demux_004_src1_valid;                                                           // rsp_demux_004:src1_valid -> rsp_mux_007:sink0_valid
	wire  [109:0] rsp_demux_004_src1_data;                                                            // rsp_demux_004:src1_data -> rsp_mux_007:sink0_data
	wire          rsp_demux_004_src1_ready;                                                           // rsp_mux_007:sink0_ready -> rsp_demux_004:src1_ready
	wire   [10:0] rsp_demux_004_src1_channel;                                                         // rsp_demux_004:src1_channel -> rsp_mux_007:sink0_channel
	wire          rsp_demux_004_src1_startofpacket;                                                   // rsp_demux_004:src1_startofpacket -> rsp_mux_007:sink0_startofpacket
	wire          rsp_demux_004_src1_endofpacket;                                                     // rsp_demux_004:src1_endofpacket -> rsp_mux_007:sink0_endofpacket
	wire          rsp_demux_005_src0_valid;                                                           // rsp_demux_005:src0_valid -> rsp_mux:sink5_valid
	wire  [109:0] rsp_demux_005_src0_data;                                                            // rsp_demux_005:src0_data -> rsp_mux:sink5_data
	wire          rsp_demux_005_src0_ready;                                                           // rsp_mux:sink5_ready -> rsp_demux_005:src0_ready
	wire   [10:0] rsp_demux_005_src0_channel;                                                         // rsp_demux_005:src0_channel -> rsp_mux:sink5_channel
	wire          rsp_demux_005_src0_startofpacket;                                                   // rsp_demux_005:src0_startofpacket -> rsp_mux:sink5_startofpacket
	wire          rsp_demux_005_src0_endofpacket;                                                     // rsp_demux_005:src0_endofpacket -> rsp_mux:sink5_endofpacket
	wire          rsp_demux_005_src1_valid;                                                           // rsp_demux_005:src1_valid -> rsp_mux_003:sink0_valid
	wire  [109:0] rsp_demux_005_src1_data;                                                            // rsp_demux_005:src1_data -> rsp_mux_003:sink0_data
	wire          rsp_demux_005_src1_ready;                                                           // rsp_mux_003:sink0_ready -> rsp_demux_005:src1_ready
	wire   [10:0] rsp_demux_005_src1_channel;                                                         // rsp_demux_005:src1_channel -> rsp_mux_003:sink0_channel
	wire          rsp_demux_005_src1_startofpacket;                                                   // rsp_demux_005:src1_startofpacket -> rsp_mux_003:sink0_startofpacket
	wire          rsp_demux_005_src1_endofpacket;                                                     // rsp_demux_005:src1_endofpacket -> rsp_mux_003:sink0_endofpacket
	wire          rsp_demux_005_src2_valid;                                                           // rsp_demux_005:src2_valid -> rsp_mux_004:sink0_valid
	wire  [109:0] rsp_demux_005_src2_data;                                                            // rsp_demux_005:src2_data -> rsp_mux_004:sink0_data
	wire          rsp_demux_005_src2_ready;                                                           // rsp_mux_004:sink0_ready -> rsp_demux_005:src2_ready
	wire   [10:0] rsp_demux_005_src2_channel;                                                         // rsp_demux_005:src2_channel -> rsp_mux_004:sink0_channel
	wire          rsp_demux_005_src2_startofpacket;                                                   // rsp_demux_005:src2_startofpacket -> rsp_mux_004:sink0_startofpacket
	wire          rsp_demux_005_src2_endofpacket;                                                     // rsp_demux_005:src2_endofpacket -> rsp_mux_004:sink0_endofpacket
	wire          rsp_demux_005_src3_valid;                                                           // rsp_demux_005:src3_valid -> rsp_mux_005:sink0_valid
	wire  [109:0] rsp_demux_005_src3_data;                                                            // rsp_demux_005:src3_data -> rsp_mux_005:sink0_data
	wire          rsp_demux_005_src3_ready;                                                           // rsp_mux_005:sink0_ready -> rsp_demux_005:src3_ready
	wire   [10:0] rsp_demux_005_src3_channel;                                                         // rsp_demux_005:src3_channel -> rsp_mux_005:sink0_channel
	wire          rsp_demux_005_src3_startofpacket;                                                   // rsp_demux_005:src3_startofpacket -> rsp_mux_005:sink0_startofpacket
	wire          rsp_demux_005_src3_endofpacket;                                                     // rsp_demux_005:src3_endofpacket -> rsp_mux_005:sink0_endofpacket
	wire          rsp_demux_005_src4_valid;                                                           // rsp_demux_005:src4_valid -> rsp_mux_006:sink0_valid
	wire  [109:0] rsp_demux_005_src4_data;                                                            // rsp_demux_005:src4_data -> rsp_mux_006:sink0_data
	wire          rsp_demux_005_src4_ready;                                                           // rsp_mux_006:sink0_ready -> rsp_demux_005:src4_ready
	wire   [10:0] rsp_demux_005_src4_channel;                                                         // rsp_demux_005:src4_channel -> rsp_mux_006:sink0_channel
	wire          rsp_demux_005_src4_startofpacket;                                                   // rsp_demux_005:src4_startofpacket -> rsp_mux_006:sink0_startofpacket
	wire          rsp_demux_005_src4_endofpacket;                                                     // rsp_demux_005:src4_endofpacket -> rsp_mux_006:sink0_endofpacket
	wire          rsp_demux_005_src5_valid;                                                           // rsp_demux_005:src5_valid -> rsp_mux_007:sink1_valid
	wire  [109:0] rsp_demux_005_src5_data;                                                            // rsp_demux_005:src5_data -> rsp_mux_007:sink1_data
	wire          rsp_demux_005_src5_ready;                                                           // rsp_mux_007:sink1_ready -> rsp_demux_005:src5_ready
	wire   [10:0] rsp_demux_005_src5_channel;                                                         // rsp_demux_005:src5_channel -> rsp_mux_007:sink1_channel
	wire          rsp_demux_005_src5_startofpacket;                                                   // rsp_demux_005:src5_startofpacket -> rsp_mux_007:sink1_startofpacket
	wire          rsp_demux_005_src5_endofpacket;                                                     // rsp_demux_005:src5_endofpacket -> rsp_mux_007:sink1_endofpacket
	wire          rsp_demux_006_src1_valid;                                                           // rsp_demux_006:src1_valid -> rsp_mux_002:sink0_valid
	wire   [82:0] rsp_demux_006_src1_data;                                                            // rsp_demux_006:src1_data -> rsp_mux_002:sink0_data
	wire          rsp_demux_006_src1_ready;                                                           // rsp_mux_002:sink0_ready -> rsp_demux_006:src1_ready
	wire   [10:0] rsp_demux_006_src1_channel;                                                         // rsp_demux_006:src1_channel -> rsp_mux_002:sink0_channel
	wire          rsp_demux_006_src1_startofpacket;                                                   // rsp_demux_006:src1_startofpacket -> rsp_mux_002:sink0_startofpacket
	wire          rsp_demux_006_src1_endofpacket;                                                     // rsp_demux_006:src1_endofpacket -> rsp_mux_002:sink0_endofpacket
	wire          rsp_demux_007_src0_valid;                                                           // rsp_demux_007:src0_valid -> rsp_mux:sink7_valid
	wire  [109:0] rsp_demux_007_src0_data;                                                            // rsp_demux_007:src0_data -> rsp_mux:sink7_data
	wire          rsp_demux_007_src0_ready;                                                           // rsp_mux:sink7_ready -> rsp_demux_007:src0_ready
	wire   [10:0] rsp_demux_007_src0_channel;                                                         // rsp_demux_007:src0_channel -> rsp_mux:sink7_channel
	wire          rsp_demux_007_src0_startofpacket;                                                   // rsp_demux_007:src0_startofpacket -> rsp_mux:sink7_startofpacket
	wire          rsp_demux_007_src0_endofpacket;                                                     // rsp_demux_007:src0_endofpacket -> rsp_mux:sink7_endofpacket
	wire          rsp_demux_008_src1_valid;                                                           // rsp_demux_008:src1_valid -> rsp_mux_001:sink0_valid
	wire   [82:0] rsp_demux_008_src1_data;                                                            // rsp_demux_008:src1_data -> rsp_mux_001:sink0_data
	wire          rsp_demux_008_src1_ready;                                                           // rsp_mux_001:sink0_ready -> rsp_demux_008:src1_ready
	wire   [10:0] rsp_demux_008_src1_channel;                                                         // rsp_demux_008:src1_channel -> rsp_mux_001:sink0_channel
	wire          rsp_demux_008_src1_startofpacket;                                                   // rsp_demux_008:src1_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          rsp_demux_008_src1_endofpacket;                                                     // rsp_demux_008:src1_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          rsp_demux_009_src0_valid;                                                           // rsp_demux_009:src0_valid -> rsp_mux:sink9_valid
	wire  [109:0] rsp_demux_009_src0_data;                                                            // rsp_demux_009:src0_data -> rsp_mux:sink9_data
	wire          rsp_demux_009_src0_ready;                                                           // rsp_mux:sink9_ready -> rsp_demux_009:src0_ready
	wire   [10:0] rsp_demux_009_src0_channel;                                                         // rsp_demux_009:src0_channel -> rsp_mux:sink9_channel
	wire          rsp_demux_009_src0_startofpacket;                                                   // rsp_demux_009:src0_startofpacket -> rsp_mux:sink9_startofpacket
	wire          rsp_demux_009_src0_endofpacket;                                                     // rsp_demux_009:src0_endofpacket -> rsp_mux:sink9_endofpacket
	wire          rsp_demux_010_src0_valid;                                                           // rsp_demux_010:src0_valid -> rsp_mux_002:sink1_valid
	wire   [82:0] rsp_demux_010_src0_data;                                                            // rsp_demux_010:src0_data -> rsp_mux_002:sink1_data
	wire          rsp_demux_010_src0_ready;                                                           // rsp_mux_002:sink1_ready -> rsp_demux_010:src0_ready
	wire   [10:0] rsp_demux_010_src0_channel;                                                         // rsp_demux_010:src0_channel -> rsp_mux_002:sink1_channel
	wire          rsp_demux_010_src0_startofpacket;                                                   // rsp_demux_010:src0_startofpacket -> rsp_mux_002:sink1_startofpacket
	wire          rsp_demux_010_src0_endofpacket;                                                     // rsp_demux_010:src0_endofpacket -> rsp_mux_002:sink1_endofpacket
	wire          cmd_demux_src6_valid;                                                               // cmd_demux:src6_valid -> nios2_gen2_0_data_master_to_header_ram_s1_cmd_width_adapter:in_valid
	wire  [109:0] cmd_demux_src6_data;                                                                // cmd_demux:src6_data -> nios2_gen2_0_data_master_to_header_ram_s1_cmd_width_adapter:in_data
	wire          cmd_demux_src6_ready;                                                               // nios2_gen2_0_data_master_to_header_ram_s1_cmd_width_adapter:in_ready -> cmd_demux:src6_ready
	wire   [10:0] cmd_demux_src6_channel;                                                             // cmd_demux:src6_channel -> nios2_gen2_0_data_master_to_header_ram_s1_cmd_width_adapter:in_channel
	wire          cmd_demux_src6_startofpacket;                                                       // cmd_demux:src6_startofpacket -> nios2_gen2_0_data_master_to_header_ram_s1_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_src6_endofpacket;                                                         // cmd_demux:src6_endofpacket -> nios2_gen2_0_data_master_to_header_ram_s1_cmd_width_adapter:in_endofpacket
	wire          nios2_gen2_0_data_master_to_header_ram_s1_cmd_width_adapter_src_valid;              // nios2_gen2_0_data_master_to_header_ram_s1_cmd_width_adapter:out_valid -> cmd_mux_006:sink0_valid
	wire   [82:0] nios2_gen2_0_data_master_to_header_ram_s1_cmd_width_adapter_src_data;               // nios2_gen2_0_data_master_to_header_ram_s1_cmd_width_adapter:out_data -> cmd_mux_006:sink0_data
	wire          nios2_gen2_0_data_master_to_header_ram_s1_cmd_width_adapter_src_ready;              // cmd_mux_006:sink0_ready -> nios2_gen2_0_data_master_to_header_ram_s1_cmd_width_adapter:out_ready
	wire   [10:0] nios2_gen2_0_data_master_to_header_ram_s1_cmd_width_adapter_src_channel;            // nios2_gen2_0_data_master_to_header_ram_s1_cmd_width_adapter:out_channel -> cmd_mux_006:sink0_channel
	wire          nios2_gen2_0_data_master_to_header_ram_s1_cmd_width_adapter_src_startofpacket;      // nios2_gen2_0_data_master_to_header_ram_s1_cmd_width_adapter:out_startofpacket -> cmd_mux_006:sink0_startofpacket
	wire          nios2_gen2_0_data_master_to_header_ram_s1_cmd_width_adapter_src_endofpacket;        // nios2_gen2_0_data_master_to_header_ram_s1_cmd_width_adapter:out_endofpacket -> cmd_mux_006:sink0_endofpacket
	wire          cmd_demux_src8_valid;                                                               // cmd_demux:src8_valid -> nios2_gen2_0_data_master_to_rx_buf_ram_s1_cmd_width_adapter:in_valid
	wire  [109:0] cmd_demux_src8_data;                                                                // cmd_demux:src8_data -> nios2_gen2_0_data_master_to_rx_buf_ram_s1_cmd_width_adapter:in_data
	wire          cmd_demux_src8_ready;                                                               // nios2_gen2_0_data_master_to_rx_buf_ram_s1_cmd_width_adapter:in_ready -> cmd_demux:src8_ready
	wire   [10:0] cmd_demux_src8_channel;                                                             // cmd_demux:src8_channel -> nios2_gen2_0_data_master_to_rx_buf_ram_s1_cmd_width_adapter:in_channel
	wire          cmd_demux_src8_startofpacket;                                                       // cmd_demux:src8_startofpacket -> nios2_gen2_0_data_master_to_rx_buf_ram_s1_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_src8_endofpacket;                                                         // cmd_demux:src8_endofpacket -> nios2_gen2_0_data_master_to_rx_buf_ram_s1_cmd_width_adapter:in_endofpacket
	wire          nios2_gen2_0_data_master_to_rx_buf_ram_s1_cmd_width_adapter_src_valid;              // nios2_gen2_0_data_master_to_rx_buf_ram_s1_cmd_width_adapter:out_valid -> cmd_mux_008:sink0_valid
	wire   [82:0] nios2_gen2_0_data_master_to_rx_buf_ram_s1_cmd_width_adapter_src_data;               // nios2_gen2_0_data_master_to_rx_buf_ram_s1_cmd_width_adapter:out_data -> cmd_mux_008:sink0_data
	wire          nios2_gen2_0_data_master_to_rx_buf_ram_s1_cmd_width_adapter_src_ready;              // cmd_mux_008:sink0_ready -> nios2_gen2_0_data_master_to_rx_buf_ram_s1_cmd_width_adapter:out_ready
	wire   [10:0] nios2_gen2_0_data_master_to_rx_buf_ram_s1_cmd_width_adapter_src_channel;            // nios2_gen2_0_data_master_to_rx_buf_ram_s1_cmd_width_adapter:out_channel -> cmd_mux_008:sink0_channel
	wire          nios2_gen2_0_data_master_to_rx_buf_ram_s1_cmd_width_adapter_src_startofpacket;      // nios2_gen2_0_data_master_to_rx_buf_ram_s1_cmd_width_adapter:out_startofpacket -> cmd_mux_008:sink0_startofpacket
	wire          nios2_gen2_0_data_master_to_rx_buf_ram_s1_cmd_width_adapter_src_endofpacket;        // nios2_gen2_0_data_master_to_rx_buf_ram_s1_cmd_width_adapter:out_endofpacket -> cmd_mux_008:sink0_endofpacket
	wire          rsp_demux_006_src0_valid;                                                           // rsp_demux_006:src0_valid -> header_ram_s1_to_nios2_gen2_0_data_master_rsp_width_adapter:in_valid
	wire   [82:0] rsp_demux_006_src0_data;                                                            // rsp_demux_006:src0_data -> header_ram_s1_to_nios2_gen2_0_data_master_rsp_width_adapter:in_data
	wire          rsp_demux_006_src0_ready;                                                           // header_ram_s1_to_nios2_gen2_0_data_master_rsp_width_adapter:in_ready -> rsp_demux_006:src0_ready
	wire   [10:0] rsp_demux_006_src0_channel;                                                         // rsp_demux_006:src0_channel -> header_ram_s1_to_nios2_gen2_0_data_master_rsp_width_adapter:in_channel
	wire          rsp_demux_006_src0_startofpacket;                                                   // rsp_demux_006:src0_startofpacket -> header_ram_s1_to_nios2_gen2_0_data_master_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_006_src0_endofpacket;                                                     // rsp_demux_006:src0_endofpacket -> header_ram_s1_to_nios2_gen2_0_data_master_rsp_width_adapter:in_endofpacket
	wire          header_ram_s1_to_nios2_gen2_0_data_master_rsp_width_adapter_src_valid;              // header_ram_s1_to_nios2_gen2_0_data_master_rsp_width_adapter:out_valid -> rsp_mux:sink6_valid
	wire  [109:0] header_ram_s1_to_nios2_gen2_0_data_master_rsp_width_adapter_src_data;               // header_ram_s1_to_nios2_gen2_0_data_master_rsp_width_adapter:out_data -> rsp_mux:sink6_data
	wire          header_ram_s1_to_nios2_gen2_0_data_master_rsp_width_adapter_src_ready;              // rsp_mux:sink6_ready -> header_ram_s1_to_nios2_gen2_0_data_master_rsp_width_adapter:out_ready
	wire   [10:0] header_ram_s1_to_nios2_gen2_0_data_master_rsp_width_adapter_src_channel;            // header_ram_s1_to_nios2_gen2_0_data_master_rsp_width_adapter:out_channel -> rsp_mux:sink6_channel
	wire          header_ram_s1_to_nios2_gen2_0_data_master_rsp_width_adapter_src_startofpacket;      // header_ram_s1_to_nios2_gen2_0_data_master_rsp_width_adapter:out_startofpacket -> rsp_mux:sink6_startofpacket
	wire          header_ram_s1_to_nios2_gen2_0_data_master_rsp_width_adapter_src_endofpacket;        // header_ram_s1_to_nios2_gen2_0_data_master_rsp_width_adapter:out_endofpacket -> rsp_mux:sink6_endofpacket
	wire          rsp_demux_008_src0_valid;                                                           // rsp_demux_008:src0_valid -> rx_buf_ram_s1_to_nios2_gen2_0_data_master_rsp_width_adapter:in_valid
	wire   [82:0] rsp_demux_008_src0_data;                                                            // rsp_demux_008:src0_data -> rx_buf_ram_s1_to_nios2_gen2_0_data_master_rsp_width_adapter:in_data
	wire          rsp_demux_008_src0_ready;                                                           // rx_buf_ram_s1_to_nios2_gen2_0_data_master_rsp_width_adapter:in_ready -> rsp_demux_008:src0_ready
	wire   [10:0] rsp_demux_008_src0_channel;                                                         // rsp_demux_008:src0_channel -> rx_buf_ram_s1_to_nios2_gen2_0_data_master_rsp_width_adapter:in_channel
	wire          rsp_demux_008_src0_startofpacket;                                                   // rsp_demux_008:src0_startofpacket -> rx_buf_ram_s1_to_nios2_gen2_0_data_master_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_008_src0_endofpacket;                                                     // rsp_demux_008:src0_endofpacket -> rx_buf_ram_s1_to_nios2_gen2_0_data_master_rsp_width_adapter:in_endofpacket
	wire          rx_buf_ram_s1_to_nios2_gen2_0_data_master_rsp_width_adapter_src_valid;              // rx_buf_ram_s1_to_nios2_gen2_0_data_master_rsp_width_adapter:out_valid -> rsp_mux:sink8_valid
	wire  [109:0] rx_buf_ram_s1_to_nios2_gen2_0_data_master_rsp_width_adapter_src_data;               // rx_buf_ram_s1_to_nios2_gen2_0_data_master_rsp_width_adapter:out_data -> rsp_mux:sink8_data
	wire          rx_buf_ram_s1_to_nios2_gen2_0_data_master_rsp_width_adapter_src_ready;              // rsp_mux:sink8_ready -> rx_buf_ram_s1_to_nios2_gen2_0_data_master_rsp_width_adapter:out_ready
	wire   [10:0] rx_buf_ram_s1_to_nios2_gen2_0_data_master_rsp_width_adapter_src_channel;            // rx_buf_ram_s1_to_nios2_gen2_0_data_master_rsp_width_adapter:out_channel -> rsp_mux:sink8_channel
	wire          rx_buf_ram_s1_to_nios2_gen2_0_data_master_rsp_width_adapter_src_startofpacket;      // rx_buf_ram_s1_to_nios2_gen2_0_data_master_rsp_width_adapter:out_startofpacket -> rsp_mux:sink8_startofpacket
	wire          rx_buf_ram_s1_to_nios2_gen2_0_data_master_rsp_width_adapter_src_endofpacket;        // rx_buf_ram_s1_to_nios2_gen2_0_data_master_rsp_width_adapter:out_endofpacket -> rsp_mux:sink8_endofpacket
	wire   [10:0] nios2_gen2_0_data_master_limiter_cmd_valid_data;                                    // nios2_gen2_0_data_master_limiter:cmd_src_valid -> cmd_demux:sink_valid
	wire   [10:0] tx_dma_m_read_limiter_cmd_valid_data;                                               // tx_dma_m_read_limiter:cmd_src_valid -> cmd_demux_002:sink_valid
	wire   [10:0] nios2_gen2_0_instruction_master_limiter_cmd_valid_data;                             // nios2_gen2_0_instruction_master_limiter:cmd_src_valid -> cmd_demux_007:sink_valid
	wire          jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_valid;                           // jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter:in_0_valid
	wire   [33:0] jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_data;                            // jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_src_data -> avalon_st_adapter:in_0_data
	wire          jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_ready;                           // avalon_st_adapter:in_0_ready -> jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_out_0_valid;                                                      // avalon_st_adapter:out_0_valid -> jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_out_0_data;                                                       // avalon_st_adapter:out_0_data -> jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_out_0_ready;                                                      // jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire    [0:0] avalon_st_adapter_out_0_error;                                                      // avalon_st_adapter:out_0_error -> jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_sink_error
	wire          tse_control_port_agent_rdata_fifo_src_valid;                                        // tse_control_port_agent:rdata_fifo_src_valid -> avalon_st_adapter_001:in_0_valid
	wire   [33:0] tse_control_port_agent_rdata_fifo_src_data;                                         // tse_control_port_agent:rdata_fifo_src_data -> avalon_st_adapter_001:in_0_data
	wire          tse_control_port_agent_rdata_fifo_src_ready;                                        // avalon_st_adapter_001:in_0_ready -> tse_control_port_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_001_out_0_valid;                                                  // avalon_st_adapter_001:out_0_valid -> tse_control_port_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_001_out_0_data;                                                   // avalon_st_adapter_001:out_0_data -> tse_control_port_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_001_out_0_ready;                                                  // tse_control_port_agent:rdata_fifo_sink_ready -> avalon_st_adapter_001:out_0_ready
	wire    [0:0] avalon_st_adapter_001_out_0_error;                                                  // avalon_st_adapter_001:out_0_error -> tse_control_port_agent:rdata_fifo_sink_error
	wire          tx_dma_csr_agent_rdata_fifo_src_valid;                                              // tx_dma_csr_agent:rdata_fifo_src_valid -> avalon_st_adapter_002:in_0_valid
	wire   [33:0] tx_dma_csr_agent_rdata_fifo_src_data;                                               // tx_dma_csr_agent:rdata_fifo_src_data -> avalon_st_adapter_002:in_0_data
	wire          tx_dma_csr_agent_rdata_fifo_src_ready;                                              // avalon_st_adapter_002:in_0_ready -> tx_dma_csr_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_002_out_0_valid;                                                  // avalon_st_adapter_002:out_0_valid -> tx_dma_csr_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_002_out_0_data;                                                   // avalon_st_adapter_002:out_0_data -> tx_dma_csr_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_002_out_0_ready;                                                  // tx_dma_csr_agent:rdata_fifo_sink_ready -> avalon_st_adapter_002:out_0_ready
	wire    [0:0] avalon_st_adapter_002_out_0_error;                                                  // avalon_st_adapter_002:out_0_error -> tx_dma_csr_agent:rdata_fifo_sink_error
	wire          rx_dma_csr_agent_rdata_fifo_src_valid;                                              // rx_dma_csr_agent:rdata_fifo_src_valid -> avalon_st_adapter_003:in_0_valid
	wire   [33:0] rx_dma_csr_agent_rdata_fifo_src_data;                                               // rx_dma_csr_agent:rdata_fifo_src_data -> avalon_st_adapter_003:in_0_data
	wire          rx_dma_csr_agent_rdata_fifo_src_ready;                                              // avalon_st_adapter_003:in_0_ready -> rx_dma_csr_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_003_out_0_valid;                                                  // avalon_st_adapter_003:out_0_valid -> rx_dma_csr_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_003_out_0_data;                                                   // avalon_st_adapter_003:out_0_data -> rx_dma_csr_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_003_out_0_ready;                                                  // rx_dma_csr_agent:rdata_fifo_sink_ready -> avalon_st_adapter_003:out_0_ready
	wire    [0:0] avalon_st_adapter_003_out_0_error;                                                  // avalon_st_adapter_003:out_0_error -> rx_dma_csr_agent:rdata_fifo_sink_error
	wire          nios2_gen2_0_debug_mem_slave_agent_rdata_fifo_src_valid;                            // nios2_gen2_0_debug_mem_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_004:in_0_valid
	wire   [33:0] nios2_gen2_0_debug_mem_slave_agent_rdata_fifo_src_data;                             // nios2_gen2_0_debug_mem_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_004:in_0_data
	wire          nios2_gen2_0_debug_mem_slave_agent_rdata_fifo_src_ready;                            // avalon_st_adapter_004:in_0_ready -> nios2_gen2_0_debug_mem_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_004_out_0_valid;                                                  // avalon_st_adapter_004:out_0_valid -> nios2_gen2_0_debug_mem_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_004_out_0_data;                                                   // avalon_st_adapter_004:out_0_data -> nios2_gen2_0_debug_mem_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_004_out_0_ready;                                                  // nios2_gen2_0_debug_mem_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_004:out_0_ready
	wire    [0:0] avalon_st_adapter_004_out_0_error;                                                  // avalon_st_adapter_004:out_0_error -> nios2_gen2_0_debug_mem_slave_agent:rdata_fifo_sink_error
	wire          system_ram_s1_agent_rdata_fifo_src_valid;                                           // system_ram_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_005:in_0_valid
	wire   [33:0] system_ram_s1_agent_rdata_fifo_src_data;                                            // system_ram_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_005:in_0_data
	wire          system_ram_s1_agent_rdata_fifo_src_ready;                                           // avalon_st_adapter_005:in_0_ready -> system_ram_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_005_out_0_valid;                                                  // avalon_st_adapter_005:out_0_valid -> system_ram_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_005_out_0_data;                                                   // avalon_st_adapter_005:out_0_data -> system_ram_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_005_out_0_ready;                                                  // system_ram_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_005:out_0_ready
	wire    [0:0] avalon_st_adapter_005_out_0_error;                                                  // avalon_st_adapter_005:out_0_error -> system_ram_s1_agent:rdata_fifo_sink_error
	wire          header_ram_s1_agent_rdata_fifo_src_valid;                                           // header_ram_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_006:in_0_valid
	wire    [9:0] header_ram_s1_agent_rdata_fifo_src_data;                                            // header_ram_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_006:in_0_data
	wire          header_ram_s1_agent_rdata_fifo_src_ready;                                           // avalon_st_adapter_006:in_0_ready -> header_ram_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_006_out_0_valid;                                                  // avalon_st_adapter_006:out_0_valid -> header_ram_s1_agent:rdata_fifo_sink_valid
	wire    [9:0] avalon_st_adapter_006_out_0_data;                                                   // avalon_st_adapter_006:out_0_data -> header_ram_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_006_out_0_ready;                                                  // header_ram_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_006:out_0_ready
	wire    [0:0] avalon_st_adapter_006_out_0_error;                                                  // avalon_st_adapter_006:out_0_error -> header_ram_s1_agent:rdata_fifo_sink_error
	wire          timer_0_s1_agent_rdata_fifo_src_valid;                                              // timer_0_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_007:in_0_valid
	wire   [33:0] timer_0_s1_agent_rdata_fifo_src_data;                                               // timer_0_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_007:in_0_data
	wire          timer_0_s1_agent_rdata_fifo_src_ready;                                              // avalon_st_adapter_007:in_0_ready -> timer_0_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_007_out_0_valid;                                                  // avalon_st_adapter_007:out_0_valid -> timer_0_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_007_out_0_data;                                                   // avalon_st_adapter_007:out_0_data -> timer_0_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_007_out_0_ready;                                                  // timer_0_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_007:out_0_ready
	wire    [0:0] avalon_st_adapter_007_out_0_error;                                                  // avalon_st_adapter_007:out_0_error -> timer_0_s1_agent:rdata_fifo_sink_error
	wire          rx_buf_ram_s1_agent_rdata_fifo_src_valid;                                           // rx_buf_ram_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_008:in_0_valid
	wire    [9:0] rx_buf_ram_s1_agent_rdata_fifo_src_data;                                            // rx_buf_ram_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_008:in_0_data
	wire          rx_buf_ram_s1_agent_rdata_fifo_src_ready;                                           // avalon_st_adapter_008:in_0_ready -> rx_buf_ram_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_008_out_0_valid;                                                  // avalon_st_adapter_008:out_0_valid -> rx_buf_ram_s1_agent:rdata_fifo_sink_valid
	wire    [9:0] avalon_st_adapter_008_out_0_data;                                                   // avalon_st_adapter_008:out_0_data -> rx_buf_ram_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_008_out_0_ready;                                                  // rx_buf_ram_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_008:out_0_ready
	wire    [0:0] avalon_st_adapter_008_out_0_error;                                                  // avalon_st_adapter_008:out_0_error -> rx_buf_ram_s1_agent:rdata_fifo_sink_error
	wire          eth_irq_pio_s1_agent_rdata_fifo_src_valid;                                          // eth_irq_pio_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_009:in_0_valid
	wire   [33:0] eth_irq_pio_s1_agent_rdata_fifo_src_data;                                           // eth_irq_pio_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_009:in_0_data
	wire          eth_irq_pio_s1_agent_rdata_fifo_src_ready;                                          // avalon_st_adapter_009:in_0_ready -> eth_irq_pio_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_009_out_0_valid;                                                  // avalon_st_adapter_009:out_0_valid -> eth_irq_pio_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_009_out_0_data;                                                   // avalon_st_adapter_009:out_0_data -> eth_irq_pio_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_009_out_0_ready;                                                  // eth_irq_pio_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_009:out_0_ready
	wire    [0:0] avalon_st_adapter_009_out_0_error;                                                  // avalon_st_adapter_009:out_0_error -> eth_irq_pio_s1_agent:rdata_fifo_sink_error
	wire          tx_buff_ram_s1_agent_rdata_fifo_src_valid;                                          // tx_buff_ram_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_010:in_0_valid
	wire    [9:0] tx_buff_ram_s1_agent_rdata_fifo_src_data;                                           // tx_buff_ram_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_010:in_0_data
	wire          tx_buff_ram_s1_agent_rdata_fifo_src_ready;                                          // avalon_st_adapter_010:in_0_ready -> tx_buff_ram_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_010_out_0_valid;                                                  // avalon_st_adapter_010:out_0_valid -> tx_buff_ram_s1_agent:rdata_fifo_sink_valid
	wire    [9:0] avalon_st_adapter_010_out_0_data;                                                   // avalon_st_adapter_010:out_0_data -> tx_buff_ram_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_010_out_0_ready;                                                  // tx_buff_ram_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_010:out_0_ready
	wire    [0:0] avalon_st_adapter_010_out_0_error;                                                  // avalon_st_adapter_010:out_0_error -> tx_buff_ram_s1_agent:rdata_fifo_sink_error

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (15),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) nios2_gen2_0_data_master_translator (
		.clk                    (clk_0_clk_clk),                                                               //                       clk.clk
		.reset                  (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                              //                     reset.reset
		.uav_address            (nios2_gen2_0_data_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (nios2_gen2_0_data_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (nios2_gen2_0_data_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (nios2_gen2_0_data_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (nios2_gen2_0_data_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (nios2_gen2_0_data_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (nios2_gen2_0_data_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (nios2_gen2_0_data_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (nios2_gen2_0_data_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (nios2_gen2_0_data_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (nios2_gen2_0_data_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (nios2_gen2_0_data_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (nios2_gen2_0_data_master_waitrequest),                                        //                          .waitrequest
		.av_byteenable          (nios2_gen2_0_data_master_byteenable),                                         //                          .byteenable
		.av_read                (nios2_gen2_0_data_master_read),                                               //                          .read
		.av_readdata            (nios2_gen2_0_data_master_readdata),                                           //                          .readdata
		.av_readdatavalid       (nios2_gen2_0_data_master_readdatavalid),                                      //                          .readdatavalid
		.av_write               (nios2_gen2_0_data_master_write),                                              //                          .write
		.av_writedata           (nios2_gen2_0_data_master_writedata),                                          //                          .writedata
		.av_debugaccess         (nios2_gen2_0_data_master_debugaccess),                                        //                          .debugaccess
		.av_burstcount          (1'b1),                                                                        //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                        //               (terminated)
		.av_begintransfer       (1'b0),                                                                        //               (terminated)
		.av_chipselect          (1'b0),                                                                        //               (terminated)
		.av_lock                (1'b0),                                                                        //               (terminated)
		.uav_clken              (),                                                                            //               (terminated)
		.av_clken               (1'b1),                                                                        //               (terminated)
		.uav_response           (2'b00),                                                                       //               (terminated)
		.av_response            (),                                                                            //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                        //               (terminated)
		.av_writeresponsevalid  ()                                                                             //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (8),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (1),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (1),
		.USE_READ                    (0),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (1),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) rx_dma_m_write_translator (
		.clk                    (clk_0_clk_clk),                                                     //                       clk.clk
		.reset                  (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                    //                     reset.reset
		.uav_address            (rx_dma_m_write_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (rx_dma_m_write_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (rx_dma_m_write_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (rx_dma_m_write_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (rx_dma_m_write_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (rx_dma_m_write_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (rx_dma_m_write_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (rx_dma_m_write_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (rx_dma_m_write_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (rx_dma_m_write_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (rx_dma_m_write_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (rx_dma_m_write_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (rx_dma_m_write_waitrequest),                                        //                          .waitrequest
		.av_write               (rx_dma_m_write_write),                                              //                          .write
		.av_writedata           (rx_dma_m_write_writedata),                                          //                          .writedata
		.av_burstcount          (1'b1),                                                              //               (terminated)
		.av_byteenable          (1'b1),                                                              //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                              //               (terminated)
		.av_begintransfer       (1'b0),                                                              //               (terminated)
		.av_chipselect          (1'b0),                                                              //               (terminated)
		.av_read                (1'b0),                                                              //               (terminated)
		.av_readdata            (),                                                                  //               (terminated)
		.av_readdatavalid       (),                                                                  //               (terminated)
		.av_lock                (1'b0),                                                              //               (terminated)
		.av_debugaccess         (1'b0),                                                              //               (terminated)
		.uav_clken              (),                                                                  //               (terminated)
		.av_clken               (1'b1),                                                              //               (terminated)
		.uav_response           (2'b00),                                                             //               (terminated)
		.av_response            (),                                                                  //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                              //               (terminated)
		.av_writeresponsevalid  ()                                                                   //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (8),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (1),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (1),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (1),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) tx_dma_m_read_translator (
		.clk                    (clk_0_clk_clk),                                                    //                       clk.clk
		.reset                  (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                   //                     reset.reset
		.uav_address            (tx_dma_m_read_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (tx_dma_m_read_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (tx_dma_m_read_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (tx_dma_m_read_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (tx_dma_m_read_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (tx_dma_m_read_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (tx_dma_m_read_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (tx_dma_m_read_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (tx_dma_m_read_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (tx_dma_m_read_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (tx_dma_m_read_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (tx_dma_m_read_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (tx_dma_m_read_waitrequest),                                        //                          .waitrequest
		.av_read                (tx_dma_m_read_read),                                               //                          .read
		.av_readdata            (tx_dma_m_read_readdata),                                           //                          .readdata
		.av_readdatavalid       (tx_dma_m_read_readdatavalid),                                      //                          .readdatavalid
		.av_burstcount          (1'b1),                                                             //               (terminated)
		.av_byteenable          (1'b1),                                                             //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                             //               (terminated)
		.av_begintransfer       (1'b0),                                                             //               (terminated)
		.av_chipselect          (1'b0),                                                             //               (terminated)
		.av_write               (1'b0),                                                             //               (terminated)
		.av_writedata           (8'b00000000),                                                      //               (terminated)
		.av_lock                (1'b0),                                                             //               (terminated)
		.av_debugaccess         (1'b0),                                                             //               (terminated)
		.uav_clken              (),                                                                 //               (terminated)
		.av_clken               (1'b1),                                                             //               (terminated)
		.uav_response           (2'b00),                                                            //               (terminated)
		.av_response            (),                                                                 //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                             //               (terminated)
		.av_writeresponsevalid  ()                                                                  //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) rx_dma_descriptor_read_translator (
		.clk                    (clk_0_clk_clk),                                                             //                       clk.clk
		.reset                  (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                            //                     reset.reset
		.uav_address            (rx_dma_descriptor_read_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (rx_dma_descriptor_read_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (rx_dma_descriptor_read_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (rx_dma_descriptor_read_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (rx_dma_descriptor_read_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (rx_dma_descriptor_read_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (rx_dma_descriptor_read_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (rx_dma_descriptor_read_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (rx_dma_descriptor_read_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (rx_dma_descriptor_read_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (rx_dma_descriptor_read_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (rx_dma_descriptor_read_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (rx_dma_descriptor_read_waitrequest),                                        //                          .waitrequest
		.av_read                (rx_dma_descriptor_read_read),                                               //                          .read
		.av_readdata            (rx_dma_descriptor_read_readdata),                                           //                          .readdata
		.av_readdatavalid       (rx_dma_descriptor_read_readdatavalid),                                      //                          .readdatavalid
		.av_burstcount          (1'b1),                                                                      //               (terminated)
		.av_byteenable          (4'b1111),                                                                   //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                      //               (terminated)
		.av_begintransfer       (1'b0),                                                                      //               (terminated)
		.av_chipselect          (1'b0),                                                                      //               (terminated)
		.av_write               (1'b0),                                                                      //               (terminated)
		.av_writedata           (32'b00000000000000000000000000000000),                                      //               (terminated)
		.av_lock                (1'b0),                                                                      //               (terminated)
		.av_debugaccess         (1'b0),                                                                      //               (terminated)
		.uav_clken              (),                                                                          //               (terminated)
		.av_clken               (1'b1),                                                                      //               (terminated)
		.uav_response           (2'b00),                                                                     //               (terminated)
		.av_response            (),                                                                          //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                      //               (terminated)
		.av_writeresponsevalid  ()                                                                           //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) tx_dma_descriptor_read_translator (
		.clk                    (clk_0_clk_clk),                                                             //                       clk.clk
		.reset                  (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                            //                     reset.reset
		.uav_address            (tx_dma_descriptor_read_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (tx_dma_descriptor_read_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (tx_dma_descriptor_read_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (tx_dma_descriptor_read_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (tx_dma_descriptor_read_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (tx_dma_descriptor_read_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (tx_dma_descriptor_read_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (tx_dma_descriptor_read_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (tx_dma_descriptor_read_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (tx_dma_descriptor_read_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (tx_dma_descriptor_read_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (tx_dma_descriptor_read_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (tx_dma_descriptor_read_waitrequest),                                        //                          .waitrequest
		.av_read                (tx_dma_descriptor_read_read),                                               //                          .read
		.av_readdata            (tx_dma_descriptor_read_readdata),                                           //                          .readdata
		.av_readdatavalid       (tx_dma_descriptor_read_readdatavalid),                                      //                          .readdatavalid
		.av_burstcount          (1'b1),                                                                      //               (terminated)
		.av_byteenable          (4'b1111),                                                                   //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                      //               (terminated)
		.av_begintransfer       (1'b0),                                                                      //               (terminated)
		.av_chipselect          (1'b0),                                                                      //               (terminated)
		.av_write               (1'b0),                                                                      //               (terminated)
		.av_writedata           (32'b00000000000000000000000000000000),                                      //               (terminated)
		.av_lock                (1'b0),                                                                      //               (terminated)
		.av_debugaccess         (1'b0),                                                                      //               (terminated)
		.uav_clken              (),                                                                          //               (terminated)
		.av_clken               (1'b1),                                                                      //               (terminated)
		.uav_response           (2'b00),                                                                     //               (terminated)
		.av_response            (),                                                                          //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                      //               (terminated)
		.av_writeresponsevalid  ()                                                                           //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (0),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) rx_dma_descriptor_write_translator (
		.clk                    (clk_0_clk_clk),                                                              //                       clk.clk
		.reset                  (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                             //                     reset.reset
		.uav_address            (rx_dma_descriptor_write_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (rx_dma_descriptor_write_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (rx_dma_descriptor_write_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (rx_dma_descriptor_write_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (rx_dma_descriptor_write_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (rx_dma_descriptor_write_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (rx_dma_descriptor_write_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (rx_dma_descriptor_write_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (rx_dma_descriptor_write_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (rx_dma_descriptor_write_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (rx_dma_descriptor_write_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (rx_dma_descriptor_write_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (rx_dma_descriptor_write_waitrequest),                                        //                          .waitrequest
		.av_write               (rx_dma_descriptor_write_write),                                              //                          .write
		.av_writedata           (rx_dma_descriptor_write_writedata),                                          //                          .writedata
		.av_burstcount          (1'b1),                                                                       //               (terminated)
		.av_byteenable          (4'b1111),                                                                    //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                       //               (terminated)
		.av_begintransfer       (1'b0),                                                                       //               (terminated)
		.av_chipselect          (1'b0),                                                                       //               (terminated)
		.av_read                (1'b0),                                                                       //               (terminated)
		.av_readdata            (),                                                                           //               (terminated)
		.av_readdatavalid       (),                                                                           //               (terminated)
		.av_lock                (1'b0),                                                                       //               (terminated)
		.av_debugaccess         (1'b0),                                                                       //               (terminated)
		.uav_clken              (),                                                                           //               (terminated)
		.av_clken               (1'b1),                                                                       //               (terminated)
		.uav_response           (2'b00),                                                                      //               (terminated)
		.av_response            (),                                                                           //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                       //               (terminated)
		.av_writeresponsevalid  ()                                                                            //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (0),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) tx_dma_descriptor_write_translator (
		.clk                    (clk_0_clk_clk),                                                              //                       clk.clk
		.reset                  (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                             //                     reset.reset
		.uav_address            (tx_dma_descriptor_write_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (tx_dma_descriptor_write_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (tx_dma_descriptor_write_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (tx_dma_descriptor_write_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (tx_dma_descriptor_write_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (tx_dma_descriptor_write_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (tx_dma_descriptor_write_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (tx_dma_descriptor_write_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (tx_dma_descriptor_write_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (tx_dma_descriptor_write_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (tx_dma_descriptor_write_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (tx_dma_descriptor_write_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (tx_dma_descriptor_write_waitrequest),                                        //                          .waitrequest
		.av_write               (tx_dma_descriptor_write_write),                                              //                          .write
		.av_writedata           (tx_dma_descriptor_write_writedata),                                          //                          .writedata
		.av_burstcount          (1'b1),                                                                       //               (terminated)
		.av_byteenable          (4'b1111),                                                                    //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                       //               (terminated)
		.av_begintransfer       (1'b0),                                                                       //               (terminated)
		.av_chipselect          (1'b0),                                                                       //               (terminated)
		.av_read                (1'b0),                                                                       //               (terminated)
		.av_readdata            (),                                                                           //               (terminated)
		.av_readdatavalid       (),                                                                           //               (terminated)
		.av_lock                (1'b0),                                                                       //               (terminated)
		.av_debugaccess         (1'b0),                                                                       //               (terminated)
		.uav_clken              (),                                                                           //               (terminated)
		.av_clken               (1'b1),                                                                       //               (terminated)
		.uav_response           (2'b00),                                                                      //               (terminated)
		.av_response            (),                                                                           //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                       //               (terminated)
		.av_writeresponsevalid  ()                                                                            //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (15),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (1),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) nios2_gen2_0_instruction_master_translator (
		.clk                    (clk_0_clk_clk),                                                                      //                       clk.clk
		.reset                  (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                                     //                     reset.reset
		.uav_address            (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (nios2_gen2_0_instruction_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (nios2_gen2_0_instruction_master_waitrequest),                                        //                          .waitrequest
		.av_read                (nios2_gen2_0_instruction_master_read),                                               //                          .read
		.av_readdata            (nios2_gen2_0_instruction_master_readdata),                                           //                          .readdata
		.av_readdatavalid       (nios2_gen2_0_instruction_master_readdatavalid),                                      //                          .readdatavalid
		.av_burstcount          (1'b1),                                                                               //               (terminated)
		.av_byteenable          (4'b1111),                                                                            //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                               //               (terminated)
		.av_begintransfer       (1'b0),                                                                               //               (terminated)
		.av_chipselect          (1'b0),                                                                               //               (terminated)
		.av_write               (1'b0),                                                                               //               (terminated)
		.av_writedata           (32'b00000000000000000000000000000000),                                               //               (terminated)
		.av_lock                (1'b0),                                                                               //               (terminated)
		.av_debugaccess         (1'b0),                                                                               //               (terminated)
		.uav_clken              (),                                                                                   //               (terminated)
		.av_clken               (1'b1),                                                                               //               (terminated)
		.uav_response           (2'b00),                                                                              //               (terminated)
		.av_response            (),                                                                                   //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                               //               (terminated)
		.av_writeresponsevalid  ()                                                                                    //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) jtag_uart_0_avalon_jtag_slave_translator (
		.clk                    (clk_0_clk_clk),                                        //                      clk.clk
		.reset                  (nios2_gen2_0_reset_reset_bridge_in_reset_reset),       //                    reset.reset
		.uav_address            (jtag_uart_0_avalon_jtag_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (jtag_uart_0_avalon_jtag_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (jtag_uart_0_avalon_jtag_slave_agent_m0_read),          //                         .read
		.uav_write              (jtag_uart_0_avalon_jtag_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (jtag_uart_0_avalon_jtag_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (jtag_uart_0_avalon_jtag_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (jtag_uart_0_avalon_jtag_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (jtag_uart_0_avalon_jtag_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (jtag_uart_0_avalon_jtag_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (jtag_uart_0_avalon_jtag_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (jtag_uart_0_avalon_jtag_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (jtag_uart_0_avalon_jtag_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (jtag_uart_0_avalon_jtag_slave_write),                  //                         .write
		.av_read                (jtag_uart_0_avalon_jtag_slave_read),                   //                         .read
		.av_readdata            (jtag_uart_0_avalon_jtag_slave_readdata),               //                         .readdata
		.av_writedata           (jtag_uart_0_avalon_jtag_slave_writedata),              //                         .writedata
		.av_waitrequest         (jtag_uart_0_avalon_jtag_slave_waitrequest),            //                         .waitrequest
		.av_chipselect          (jtag_uart_0_avalon_jtag_slave_chipselect),             //                         .chipselect
		.av_begintransfer       (),                                                     //              (terminated)
		.av_beginbursttransfer  (),                                                     //              (terminated)
		.av_burstcount          (),                                                     //              (terminated)
		.av_byteenable          (),                                                     //              (terminated)
		.av_readdatavalid       (1'b0),                                                 //              (terminated)
		.av_writebyteenable     (),                                                     //              (terminated)
		.av_lock                (),                                                     //              (terminated)
		.av_clken               (),                                                     //              (terminated)
		.uav_clken              (1'b0),                                                 //              (terminated)
		.av_debugaccess         (),                                                     //              (terminated)
		.av_outputenable        (),                                                     //              (terminated)
		.uav_response           (),                                                     //              (terminated)
		.av_response            (2'b00),                                                //              (terminated)
		.uav_writeresponsevalid (),                                                     //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                  //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (8),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (1),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) tse_control_port_translator (
		.clk                    (clk_0_clk_clk),                                  //                      clk.clk
		.reset                  (nios2_gen2_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (tse_control_port_agent_m0_address),              // avalon_universal_slave_0.address
		.uav_burstcount         (tse_control_port_agent_m0_burstcount),           //                         .burstcount
		.uav_read               (tse_control_port_agent_m0_read),                 //                         .read
		.uav_write              (tse_control_port_agent_m0_write),                //                         .write
		.uav_waitrequest        (tse_control_port_agent_m0_waitrequest),          //                         .waitrequest
		.uav_readdatavalid      (tse_control_port_agent_m0_readdatavalid),        //                         .readdatavalid
		.uav_byteenable         (tse_control_port_agent_m0_byteenable),           //                         .byteenable
		.uav_readdata           (tse_control_port_agent_m0_readdata),             //                         .readdata
		.uav_writedata          (tse_control_port_agent_m0_writedata),            //                         .writedata
		.uav_lock               (tse_control_port_agent_m0_lock),                 //                         .lock
		.uav_debugaccess        (tse_control_port_agent_m0_debugaccess),          //                         .debugaccess
		.av_address             (tse_control_port_address),                       //      avalon_anti_slave_0.address
		.av_write               (tse_control_port_write),                         //                         .write
		.av_read                (tse_control_port_read),                          //                         .read
		.av_readdata            (tse_control_port_readdata),                      //                         .readdata
		.av_writedata           (tse_control_port_writedata),                     //                         .writedata
		.av_waitrequest         (tse_control_port_waitrequest),                   //                         .waitrequest
		.av_begintransfer       (),                                               //              (terminated)
		.av_beginbursttransfer  (),                                               //              (terminated)
		.av_burstcount          (),                                               //              (terminated)
		.av_byteenable          (),                                               //              (terminated)
		.av_readdatavalid       (1'b0),                                           //              (terminated)
		.av_writebyteenable     (),                                               //              (terminated)
		.av_lock                (),                                               //              (terminated)
		.av_chipselect          (),                                               //              (terminated)
		.av_clken               (),                                               //              (terminated)
		.uav_clken              (1'b0),                                           //              (terminated)
		.av_debugaccess         (),                                               //              (terminated)
		.av_outputenable        (),                                               //              (terminated)
		.uav_response           (),                                               //              (terminated)
		.av_response            (2'b00),                                          //              (terminated)
		.uav_writeresponsevalid (),                                               //              (terminated)
		.av_writeresponsevalid  (1'b0)                                            //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (4),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) tx_dma_csr_translator (
		.clk                    (clk_0_clk_clk),                                  //                      clk.clk
		.reset                  (nios2_gen2_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (tx_dma_csr_agent_m0_address),                    // avalon_universal_slave_0.address
		.uav_burstcount         (tx_dma_csr_agent_m0_burstcount),                 //                         .burstcount
		.uav_read               (tx_dma_csr_agent_m0_read),                       //                         .read
		.uav_write              (tx_dma_csr_agent_m0_write),                      //                         .write
		.uav_waitrequest        (tx_dma_csr_agent_m0_waitrequest),                //                         .waitrequest
		.uav_readdatavalid      (tx_dma_csr_agent_m0_readdatavalid),              //                         .readdatavalid
		.uav_byteenable         (tx_dma_csr_agent_m0_byteenable),                 //                         .byteenable
		.uav_readdata           (tx_dma_csr_agent_m0_readdata),                   //                         .readdata
		.uav_writedata          (tx_dma_csr_agent_m0_writedata),                  //                         .writedata
		.uav_lock               (tx_dma_csr_agent_m0_lock),                       //                         .lock
		.uav_debugaccess        (tx_dma_csr_agent_m0_debugaccess),                //                         .debugaccess
		.av_address             (tx_dma_csr_address),                             //      avalon_anti_slave_0.address
		.av_write               (tx_dma_csr_write),                               //                         .write
		.av_read                (tx_dma_csr_read),                                //                         .read
		.av_readdata            (tx_dma_csr_readdata),                            //                         .readdata
		.av_writedata           (tx_dma_csr_writedata),                           //                         .writedata
		.av_chipselect          (tx_dma_csr_chipselect),                          //                         .chipselect
		.av_begintransfer       (),                                               //              (terminated)
		.av_beginbursttransfer  (),                                               //              (terminated)
		.av_burstcount          (),                                               //              (terminated)
		.av_byteenable          (),                                               //              (terminated)
		.av_readdatavalid       (1'b0),                                           //              (terminated)
		.av_waitrequest         (1'b0),                                           //              (terminated)
		.av_writebyteenable     (),                                               //              (terminated)
		.av_lock                (),                                               //              (terminated)
		.av_clken               (),                                               //              (terminated)
		.uav_clken              (1'b0),                                           //              (terminated)
		.av_debugaccess         (),                                               //              (terminated)
		.av_outputenable        (),                                               //              (terminated)
		.uav_response           (),                                               //              (terminated)
		.av_response            (2'b00),                                          //              (terminated)
		.uav_writeresponsevalid (),                                               //              (terminated)
		.av_writeresponsevalid  (1'b0)                                            //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (4),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) rx_dma_csr_translator (
		.clk                    (clk_0_clk_clk),                                  //                      clk.clk
		.reset                  (nios2_gen2_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (rx_dma_csr_agent_m0_address),                    // avalon_universal_slave_0.address
		.uav_burstcount         (rx_dma_csr_agent_m0_burstcount),                 //                         .burstcount
		.uav_read               (rx_dma_csr_agent_m0_read),                       //                         .read
		.uav_write              (rx_dma_csr_agent_m0_write),                      //                         .write
		.uav_waitrequest        (rx_dma_csr_agent_m0_waitrequest),                //                         .waitrequest
		.uav_readdatavalid      (rx_dma_csr_agent_m0_readdatavalid),              //                         .readdatavalid
		.uav_byteenable         (rx_dma_csr_agent_m0_byteenable),                 //                         .byteenable
		.uav_readdata           (rx_dma_csr_agent_m0_readdata),                   //                         .readdata
		.uav_writedata          (rx_dma_csr_agent_m0_writedata),                  //                         .writedata
		.uav_lock               (rx_dma_csr_agent_m0_lock),                       //                         .lock
		.uav_debugaccess        (rx_dma_csr_agent_m0_debugaccess),                //                         .debugaccess
		.av_address             (rx_dma_csr_address),                             //      avalon_anti_slave_0.address
		.av_write               (rx_dma_csr_write),                               //                         .write
		.av_read                (rx_dma_csr_read),                                //                         .read
		.av_readdata            (rx_dma_csr_readdata),                            //                         .readdata
		.av_writedata           (rx_dma_csr_writedata),                           //                         .writedata
		.av_chipselect          (rx_dma_csr_chipselect),                          //                         .chipselect
		.av_begintransfer       (),                                               //              (terminated)
		.av_beginbursttransfer  (),                                               //              (terminated)
		.av_burstcount          (),                                               //              (terminated)
		.av_byteenable          (),                                               //              (terminated)
		.av_readdatavalid       (1'b0),                                           //              (terminated)
		.av_waitrequest         (1'b0),                                           //              (terminated)
		.av_writebyteenable     (),                                               //              (terminated)
		.av_lock                (),                                               //              (terminated)
		.av_clken               (),                                               //              (terminated)
		.uav_clken              (1'b0),                                           //              (terminated)
		.av_debugaccess         (),                                               //              (terminated)
		.av_outputenable        (),                                               //              (terminated)
		.uav_response           (),                                               //              (terminated)
		.av_response            (2'b00),                                          //              (terminated)
		.uav_writeresponsevalid (),                                               //              (terminated)
		.av_writeresponsevalid  (1'b0)                                            //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (9),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) nios2_gen2_0_debug_mem_slave_translator (
		.clk                    (clk_0_clk_clk),                                       //                      clk.clk
		.reset                  (nios2_gen2_0_reset_reset_bridge_in_reset_reset),      //                    reset.reset
		.uav_address            (nios2_gen2_0_debug_mem_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (nios2_gen2_0_debug_mem_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (nios2_gen2_0_debug_mem_slave_agent_m0_read),          //                         .read
		.uav_write              (nios2_gen2_0_debug_mem_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (nios2_gen2_0_debug_mem_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (nios2_gen2_0_debug_mem_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (nios2_gen2_0_debug_mem_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (nios2_gen2_0_debug_mem_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (nios2_gen2_0_debug_mem_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (nios2_gen2_0_debug_mem_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (nios2_gen2_0_debug_mem_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (nios2_gen2_0_debug_mem_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (nios2_gen2_0_debug_mem_slave_write),                  //                         .write
		.av_read                (nios2_gen2_0_debug_mem_slave_read),                   //                         .read
		.av_readdata            (nios2_gen2_0_debug_mem_slave_readdata),               //                         .readdata
		.av_writedata           (nios2_gen2_0_debug_mem_slave_writedata),              //                         .writedata
		.av_byteenable          (nios2_gen2_0_debug_mem_slave_byteenable),             //                         .byteenable
		.av_waitrequest         (nios2_gen2_0_debug_mem_slave_waitrequest),            //                         .waitrequest
		.av_debugaccess         (nios2_gen2_0_debug_mem_slave_debugaccess),            //                         .debugaccess
		.av_begintransfer       (),                                                    //              (terminated)
		.av_beginbursttransfer  (),                                                    //              (terminated)
		.av_burstcount          (),                                                    //              (terminated)
		.av_readdatavalid       (1'b0),                                                //              (terminated)
		.av_writebyteenable     (),                                                    //              (terminated)
		.av_lock                (),                                                    //              (terminated)
		.av_chipselect          (),                                                    //              (terminated)
		.av_clken               (),                                                    //              (terminated)
		.uav_clken              (1'b0),                                                //              (terminated)
		.av_outputenable        (),                                                    //              (terminated)
		.uav_response           (),                                                    //              (terminated)
		.av_response            (2'b00),                                               //              (terminated)
		.uav_writeresponsevalid (),                                                    //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (11),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) system_ram_s1_translator (
		.clk                    (clk_0_clk_clk),                                  //                      clk.clk
		.reset                  (nios2_gen2_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (system_ram_s1_agent_m0_address),                 // avalon_universal_slave_0.address
		.uav_burstcount         (system_ram_s1_agent_m0_burstcount),              //                         .burstcount
		.uav_read               (system_ram_s1_agent_m0_read),                    //                         .read
		.uav_write              (system_ram_s1_agent_m0_write),                   //                         .write
		.uav_waitrequest        (system_ram_s1_agent_m0_waitrequest),             //                         .waitrequest
		.uav_readdatavalid      (system_ram_s1_agent_m0_readdatavalid),           //                         .readdatavalid
		.uav_byteenable         (system_ram_s1_agent_m0_byteenable),              //                         .byteenable
		.uav_readdata           (system_ram_s1_agent_m0_readdata),                //                         .readdata
		.uav_writedata          (system_ram_s1_agent_m0_writedata),               //                         .writedata
		.uav_lock               (system_ram_s1_agent_m0_lock),                    //                         .lock
		.uav_debugaccess        (system_ram_s1_agent_m0_debugaccess),             //                         .debugaccess
		.av_address             (system_ram_s1_address),                          //      avalon_anti_slave_0.address
		.av_write               (system_ram_s1_write),                            //                         .write
		.av_readdata            (system_ram_s1_readdata),                         //                         .readdata
		.av_writedata           (system_ram_s1_writedata),                        //                         .writedata
		.av_byteenable          (system_ram_s1_byteenable),                       //                         .byteenable
		.av_chipselect          (system_ram_s1_chipselect),                       //                         .chipselect
		.av_clken               (system_ram_s1_clken),                            //                         .clken
		.av_read                (),                                               //              (terminated)
		.av_begintransfer       (),                                               //              (terminated)
		.av_beginbursttransfer  (),                                               //              (terminated)
		.av_burstcount          (),                                               //              (terminated)
		.av_readdatavalid       (1'b0),                                           //              (terminated)
		.av_waitrequest         (1'b0),                                           //              (terminated)
		.av_writebyteenable     (),                                               //              (terminated)
		.av_lock                (),                                               //              (terminated)
		.uav_clken              (1'b0),                                           //              (terminated)
		.av_debugaccess         (),                                               //              (terminated)
		.av_outputenable        (),                                               //              (terminated)
		.uav_response           (),                                               //              (terminated)
		.av_response            (2'b00),                                          //              (terminated)
		.uav_writeresponsevalid (),                                               //              (terminated)
		.av_writeresponsevalid  (1'b0)                                            //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (8),
		.AV_DATA_W                      (8),
		.UAV_DATA_W                     (8),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (1),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (1),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (1),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) header_ram_s1_translator (
		.clk                    (clk_0_clk_clk),                                  //                      clk.clk
		.reset                  (nios2_gen2_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (header_ram_s1_agent_m0_address),                 // avalon_universal_slave_0.address
		.uav_burstcount         (header_ram_s1_agent_m0_burstcount),              //                         .burstcount
		.uav_read               (header_ram_s1_agent_m0_read),                    //                         .read
		.uav_write              (header_ram_s1_agent_m0_write),                   //                         .write
		.uav_waitrequest        (header_ram_s1_agent_m0_waitrequest),             //                         .waitrequest
		.uav_readdatavalid      (header_ram_s1_agent_m0_readdatavalid),           //                         .readdatavalid
		.uav_byteenable         (header_ram_s1_agent_m0_byteenable),              //                         .byteenable
		.uav_readdata           (header_ram_s1_agent_m0_readdata),                //                         .readdata
		.uav_writedata          (header_ram_s1_agent_m0_writedata),               //                         .writedata
		.uav_lock               (header_ram_s1_agent_m0_lock),                    //                         .lock
		.uav_debugaccess        (header_ram_s1_agent_m0_debugaccess),             //                         .debugaccess
		.av_address             (header_ram_s1_address),                          //      avalon_anti_slave_0.address
		.av_write               (header_ram_s1_write),                            //                         .write
		.av_readdata            (header_ram_s1_readdata),                         //                         .readdata
		.av_writedata           (header_ram_s1_writedata),                        //                         .writedata
		.av_chipselect          (header_ram_s1_chipselect),                       //                         .chipselect
		.av_clken               (header_ram_s1_clken),                            //                         .clken
		.av_read                (),                                               //              (terminated)
		.av_begintransfer       (),                                               //              (terminated)
		.av_beginbursttransfer  (),                                               //              (terminated)
		.av_burstcount          (),                                               //              (terminated)
		.av_byteenable          (),                                               //              (terminated)
		.av_readdatavalid       (1'b0),                                           //              (terminated)
		.av_waitrequest         (1'b0),                                           //              (terminated)
		.av_writebyteenable     (),                                               //              (terminated)
		.av_lock                (),                                               //              (terminated)
		.uav_clken              (1'b0),                                           //              (terminated)
		.av_debugaccess         (),                                               //              (terminated)
		.av_outputenable        (),                                               //              (terminated)
		.uav_response           (),                                               //              (terminated)
		.av_response            (2'b00),                                          //              (terminated)
		.uav_writeresponsevalid (),                                               //              (terminated)
		.av_writeresponsevalid  (1'b0)                                            //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) timer_0_s1_translator (
		.clk                    (clk_0_clk_clk),                                  //                      clk.clk
		.reset                  (nios2_gen2_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (timer_0_s1_agent_m0_address),                    // avalon_universal_slave_0.address
		.uav_burstcount         (timer_0_s1_agent_m0_burstcount),                 //                         .burstcount
		.uav_read               (timer_0_s1_agent_m0_read),                       //                         .read
		.uav_write              (timer_0_s1_agent_m0_write),                      //                         .write
		.uav_waitrequest        (timer_0_s1_agent_m0_waitrequest),                //                         .waitrequest
		.uav_readdatavalid      (timer_0_s1_agent_m0_readdatavalid),              //                         .readdatavalid
		.uav_byteenable         (timer_0_s1_agent_m0_byteenable),                 //                         .byteenable
		.uav_readdata           (timer_0_s1_agent_m0_readdata),                   //                         .readdata
		.uav_writedata          (timer_0_s1_agent_m0_writedata),                  //                         .writedata
		.uav_lock               (timer_0_s1_agent_m0_lock),                       //                         .lock
		.uav_debugaccess        (timer_0_s1_agent_m0_debugaccess),                //                         .debugaccess
		.av_address             (timer_0_s1_address),                             //      avalon_anti_slave_0.address
		.av_write               (timer_0_s1_write),                               //                         .write
		.av_readdata            (timer_0_s1_readdata),                            //                         .readdata
		.av_writedata           (timer_0_s1_writedata),                           //                         .writedata
		.av_chipselect          (timer_0_s1_chipselect),                          //                         .chipselect
		.av_read                (),                                               //              (terminated)
		.av_begintransfer       (),                                               //              (terminated)
		.av_beginbursttransfer  (),                                               //              (terminated)
		.av_burstcount          (),                                               //              (terminated)
		.av_byteenable          (),                                               //              (terminated)
		.av_readdatavalid       (1'b0),                                           //              (terminated)
		.av_waitrequest         (1'b0),                                           //              (terminated)
		.av_writebyteenable     (),                                               //              (terminated)
		.av_lock                (),                                               //              (terminated)
		.av_clken               (),                                               //              (terminated)
		.uav_clken              (1'b0),                                           //              (terminated)
		.av_debugaccess         (),                                               //              (terminated)
		.av_outputenable        (),                                               //              (terminated)
		.uav_response           (),                                               //              (terminated)
		.av_response            (2'b00),                                          //              (terminated)
		.uav_writeresponsevalid (),                                               //              (terminated)
		.av_writeresponsevalid  (1'b0)                                            //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (9),
		.AV_DATA_W                      (8),
		.UAV_DATA_W                     (8),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (1),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (1),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (1),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) rx_buf_ram_s1_translator (
		.clk                    (clk_0_clk_clk),                                  //                      clk.clk
		.reset                  (nios2_gen2_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (rx_buf_ram_s1_agent_m0_address),                 // avalon_universal_slave_0.address
		.uav_burstcount         (rx_buf_ram_s1_agent_m0_burstcount),              //                         .burstcount
		.uav_read               (rx_buf_ram_s1_agent_m0_read),                    //                         .read
		.uav_write              (rx_buf_ram_s1_agent_m0_write),                   //                         .write
		.uav_waitrequest        (rx_buf_ram_s1_agent_m0_waitrequest),             //                         .waitrequest
		.uav_readdatavalid      (rx_buf_ram_s1_agent_m0_readdatavalid),           //                         .readdatavalid
		.uav_byteenable         (rx_buf_ram_s1_agent_m0_byteenable),              //                         .byteenable
		.uav_readdata           (rx_buf_ram_s1_agent_m0_readdata),                //                         .readdata
		.uav_writedata          (rx_buf_ram_s1_agent_m0_writedata),               //                         .writedata
		.uav_lock               (rx_buf_ram_s1_agent_m0_lock),                    //                         .lock
		.uav_debugaccess        (rx_buf_ram_s1_agent_m0_debugaccess),             //                         .debugaccess
		.av_address             (rx_buf_ram_s1_address),                          //      avalon_anti_slave_0.address
		.av_write               (rx_buf_ram_s1_write),                            //                         .write
		.av_readdata            (rx_buf_ram_s1_readdata),                         //                         .readdata
		.av_writedata           (rx_buf_ram_s1_writedata),                        //                         .writedata
		.av_chipselect          (rx_buf_ram_s1_chipselect),                       //                         .chipselect
		.av_clken               (rx_buf_ram_s1_clken),                            //                         .clken
		.av_read                (),                                               //              (terminated)
		.av_begintransfer       (),                                               //              (terminated)
		.av_beginbursttransfer  (),                                               //              (terminated)
		.av_burstcount          (),                                               //              (terminated)
		.av_byteenable          (),                                               //              (terminated)
		.av_readdatavalid       (1'b0),                                           //              (terminated)
		.av_waitrequest         (1'b0),                                           //              (terminated)
		.av_writebyteenable     (),                                               //              (terminated)
		.av_lock                (),                                               //              (terminated)
		.uav_clken              (1'b0),                                           //              (terminated)
		.av_debugaccess         (),                                               //              (terminated)
		.av_outputenable        (),                                               //              (terminated)
		.uav_response           (),                                               //              (terminated)
		.av_response            (2'b00),                                          //              (terminated)
		.uav_writeresponsevalid (),                                               //              (terminated)
		.av_writeresponsevalid  (1'b0)                                            //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) eth_irq_pio_s1_translator (
		.clk                    (clk_0_clk_clk),                                  //                      clk.clk
		.reset                  (nios2_gen2_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (eth_irq_pio_s1_agent_m0_address),                // avalon_universal_slave_0.address
		.uav_burstcount         (eth_irq_pio_s1_agent_m0_burstcount),             //                         .burstcount
		.uav_read               (eth_irq_pio_s1_agent_m0_read),                   //                         .read
		.uav_write              (eth_irq_pio_s1_agent_m0_write),                  //                         .write
		.uav_waitrequest        (eth_irq_pio_s1_agent_m0_waitrequest),            //                         .waitrequest
		.uav_readdatavalid      (eth_irq_pio_s1_agent_m0_readdatavalid),          //                         .readdatavalid
		.uav_byteenable         (eth_irq_pio_s1_agent_m0_byteenable),             //                         .byteenable
		.uav_readdata           (eth_irq_pio_s1_agent_m0_readdata),               //                         .readdata
		.uav_writedata          (eth_irq_pio_s1_agent_m0_writedata),              //                         .writedata
		.uav_lock               (eth_irq_pio_s1_agent_m0_lock),                   //                         .lock
		.uav_debugaccess        (eth_irq_pio_s1_agent_m0_debugaccess),            //                         .debugaccess
		.av_address             (eth_irq_pio_s1_address),                         //      avalon_anti_slave_0.address
		.av_write               (eth_irq_pio_s1_write),                           //                         .write
		.av_readdata            (eth_irq_pio_s1_readdata),                        //                         .readdata
		.av_writedata           (eth_irq_pio_s1_writedata),                       //                         .writedata
		.av_chipselect          (eth_irq_pio_s1_chipselect),                      //                         .chipselect
		.av_read                (),                                               //              (terminated)
		.av_begintransfer       (),                                               //              (terminated)
		.av_beginbursttransfer  (),                                               //              (terminated)
		.av_burstcount          (),                                               //              (terminated)
		.av_byteenable          (),                                               //              (terminated)
		.av_readdatavalid       (1'b0),                                           //              (terminated)
		.av_waitrequest         (1'b0),                                           //              (terminated)
		.av_writebyteenable     (),                                               //              (terminated)
		.av_lock                (),                                               //              (terminated)
		.av_clken               (),                                               //              (terminated)
		.uav_clken              (1'b0),                                           //              (terminated)
		.av_debugaccess         (),                                               //              (terminated)
		.av_outputenable        (),                                               //              (terminated)
		.uav_response           (),                                               //              (terminated)
		.av_response            (2'b00),                                          //              (terminated)
		.uav_writeresponsevalid (),                                               //              (terminated)
		.av_writeresponsevalid  (1'b0)                                            //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (11),
		.AV_DATA_W                      (8),
		.UAV_DATA_W                     (8),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (1),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (1),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (1),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) tx_buff_ram_s1_translator (
		.clk                    (clk_0_clk_clk),                                  //                      clk.clk
		.reset                  (nios2_gen2_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (tx_buff_ram_s1_agent_m0_address),                // avalon_universal_slave_0.address
		.uav_burstcount         (tx_buff_ram_s1_agent_m0_burstcount),             //                         .burstcount
		.uav_read               (tx_buff_ram_s1_agent_m0_read),                   //                         .read
		.uav_write              (tx_buff_ram_s1_agent_m0_write),                  //                         .write
		.uav_waitrequest        (tx_buff_ram_s1_agent_m0_waitrequest),            //                         .waitrequest
		.uav_readdatavalid      (tx_buff_ram_s1_agent_m0_readdatavalid),          //                         .readdatavalid
		.uav_byteenable         (tx_buff_ram_s1_agent_m0_byteenable),             //                         .byteenable
		.uav_readdata           (tx_buff_ram_s1_agent_m0_readdata),               //                         .readdata
		.uav_writedata          (tx_buff_ram_s1_agent_m0_writedata),              //                         .writedata
		.uav_lock               (tx_buff_ram_s1_agent_m0_lock),                   //                         .lock
		.uav_debugaccess        (tx_buff_ram_s1_agent_m0_debugaccess),            //                         .debugaccess
		.av_address             (tx_buff_ram_s1_address),                         //      avalon_anti_slave_0.address
		.av_write               (tx_buff_ram_s1_write),                           //                         .write
		.av_readdata            (tx_buff_ram_s1_readdata),                        //                         .readdata
		.av_writedata           (tx_buff_ram_s1_writedata),                       //                         .writedata
		.av_chipselect          (tx_buff_ram_s1_chipselect),                      //                         .chipselect
		.av_clken               (tx_buff_ram_s1_clken),                           //                         .clken
		.av_read                (),                                               //              (terminated)
		.av_begintransfer       (),                                               //              (terminated)
		.av_beginbursttransfer  (),                                               //              (terminated)
		.av_burstcount          (),                                               //              (terminated)
		.av_byteenable          (),                                               //              (terminated)
		.av_readdatavalid       (1'b0),                                           //              (terminated)
		.av_waitrequest         (1'b0),                                           //              (terminated)
		.av_writebyteenable     (),                                               //              (terminated)
		.av_lock                (),                                               //              (terminated)
		.uav_clken              (1'b0),                                           //              (terminated)
		.av_debugaccess         (),                                               //              (terminated)
		.av_outputenable        (),                                               //              (terminated)
		.uav_response           (),                                               //              (terminated)
		.av_response            (2'b00),                                          //              (terminated)
		.uav_writeresponsevalid (),                                               //              (terminated)
		.av_writeresponsevalid  (1'b0)                                            //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (109),
		.PKT_ORI_BURST_SIZE_L      (107),
		.PKT_RESPONSE_STATUS_H     (106),
		.PKT_RESPONSE_STATUS_L     (105),
		.PKT_QOS_H                 (88),
		.PKT_QOS_L                 (88),
		.PKT_DATA_SIDEBAND_H       (86),
		.PKT_DATA_SIDEBAND_L       (86),
		.PKT_ADDR_SIDEBAND_H       (85),
		.PKT_ADDR_SIDEBAND_L       (85),
		.PKT_BURST_TYPE_H          (84),
		.PKT_BURST_TYPE_L          (83),
		.PKT_CACHE_H               (104),
		.PKT_CACHE_L               (101),
		.PKT_THREAD_ID_H           (97),
		.PKT_THREAD_ID_L           (97),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (100),
		.PKT_PROTECTION_L          (98),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (92),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (93),
		.ST_DATA_W                 (110),
		.ST_CHANNEL_W              (11),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) nios2_gen2_0_data_master_agent (
		.clk                   (clk_0_clk_clk),                                                               //       clk.clk
		.reset                 (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                              // clk_reset.reset
		.av_address            (nios2_gen2_0_data_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (nios2_gen2_0_data_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (nios2_gen2_0_data_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (nios2_gen2_0_data_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (nios2_gen2_0_data_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (nios2_gen2_0_data_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (nios2_gen2_0_data_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (nios2_gen2_0_data_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (nios2_gen2_0_data_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (nios2_gen2_0_data_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (nios2_gen2_0_data_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (nios2_gen2_0_data_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (nios2_gen2_0_data_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (nios2_gen2_0_data_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (nios2_gen2_0_data_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (nios2_gen2_0_data_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (nios2_gen2_0_data_master_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (nios2_gen2_0_data_master_limiter_rsp_src_data),                               //          .data
		.rp_channel            (nios2_gen2_0_data_master_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (nios2_gen2_0_data_master_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (nios2_gen2_0_data_master_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (nios2_gen2_0_data_master_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                            // (terminated)
		.av_writeresponsevalid ()                                                                             // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (82),
		.PKT_ORI_BURST_SIZE_L      (80),
		.PKT_RESPONSE_STATUS_H     (79),
		.PKT_RESPONSE_STATUS_L     (78),
		.PKT_QOS_H                 (61),
		.PKT_QOS_L                 (61),
		.PKT_DATA_SIDEBAND_H       (59),
		.PKT_DATA_SIDEBAND_L       (59),
		.PKT_ADDR_SIDEBAND_H       (58),
		.PKT_ADDR_SIDEBAND_L       (58),
		.PKT_BURST_TYPE_H          (57),
		.PKT_BURST_TYPE_L          (56),
		.PKT_CACHE_H               (77),
		.PKT_CACHE_L               (74),
		.PKT_THREAD_ID_H           (70),
		.PKT_THREAD_ID_L           (70),
		.PKT_BURST_SIZE_H          (55),
		.PKT_BURST_SIZE_L          (53),
		.PKT_TRANS_EXCLUSIVE       (46),
		.PKT_TRANS_LOCK            (45),
		.PKT_BEGIN_BURST           (60),
		.PKT_PROTECTION_H          (73),
		.PKT_PROTECTION_L          (71),
		.PKT_BURSTWRAP_H           (52),
		.PKT_BURSTWRAP_L           (50),
		.PKT_BYTE_CNT_H            (49),
		.PKT_BYTE_CNT_L            (47),
		.PKT_ADDR_H                (40),
		.PKT_ADDR_L                (9),
		.PKT_TRANS_COMPRESSED_READ (41),
		.PKT_TRANS_POSTED          (42),
		.PKT_TRANS_WRITE           (43),
		.PKT_TRANS_READ            (44),
		.PKT_DATA_H                (7),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_SRC_ID_H              (65),
		.PKT_SRC_ID_L              (62),
		.PKT_DEST_ID_H             (69),
		.PKT_DEST_ID_L             (66),
		.ST_DATA_W                 (83),
		.ST_CHANNEL_W              (11),
		.AV_BURSTCOUNT_W           (1),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (4),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) rx_dma_m_write_agent (
		.clk                   (clk_0_clk_clk),                                                     //       clk.clk
		.reset                 (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                    // clk_reset.reset
		.av_address            (rx_dma_m_write_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (rx_dma_m_write_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (rx_dma_m_write_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (rx_dma_m_write_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (rx_dma_m_write_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (rx_dma_m_write_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (rx_dma_m_write_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (rx_dma_m_write_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (rx_dma_m_write_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (rx_dma_m_write_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (rx_dma_m_write_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (rx_dma_m_write_agent_cp_valid),                                     //        cp.valid
		.cp_data               (rx_dma_m_write_agent_cp_data),                                      //          .data
		.cp_startofpacket      (rx_dma_m_write_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (rx_dma_m_write_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (rx_dma_m_write_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_001_src_valid),                                             //        rp.valid
		.rp_data               (rsp_mux_001_src_data),                                              //          .data
		.rp_channel            (rsp_mux_001_src_channel),                                           //          .channel
		.rp_startofpacket      (rsp_mux_001_src_startofpacket),                                     //          .startofpacket
		.rp_endofpacket        (rsp_mux_001_src_endofpacket),                                       //          .endofpacket
		.rp_ready              (rsp_mux_001_src_ready),                                             //          .ready
		.av_response           (),                                                                  // (terminated)
		.av_writeresponsevalid ()                                                                   // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (82),
		.PKT_ORI_BURST_SIZE_L      (80),
		.PKT_RESPONSE_STATUS_H     (79),
		.PKT_RESPONSE_STATUS_L     (78),
		.PKT_QOS_H                 (61),
		.PKT_QOS_L                 (61),
		.PKT_DATA_SIDEBAND_H       (59),
		.PKT_DATA_SIDEBAND_L       (59),
		.PKT_ADDR_SIDEBAND_H       (58),
		.PKT_ADDR_SIDEBAND_L       (58),
		.PKT_BURST_TYPE_H          (57),
		.PKT_BURST_TYPE_L          (56),
		.PKT_CACHE_H               (77),
		.PKT_CACHE_L               (74),
		.PKT_THREAD_ID_H           (70),
		.PKT_THREAD_ID_L           (70),
		.PKT_BURST_SIZE_H          (55),
		.PKT_BURST_SIZE_L          (53),
		.PKT_TRANS_EXCLUSIVE       (46),
		.PKT_TRANS_LOCK            (45),
		.PKT_BEGIN_BURST           (60),
		.PKT_PROTECTION_H          (73),
		.PKT_PROTECTION_L          (71),
		.PKT_BURSTWRAP_H           (52),
		.PKT_BURSTWRAP_L           (50),
		.PKT_BYTE_CNT_H            (49),
		.PKT_BYTE_CNT_L            (47),
		.PKT_ADDR_H                (40),
		.PKT_ADDR_L                (9),
		.PKT_TRANS_COMPRESSED_READ (41),
		.PKT_TRANS_POSTED          (42),
		.PKT_TRANS_WRITE           (43),
		.PKT_TRANS_READ            (44),
		.PKT_DATA_H                (7),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_SRC_ID_H              (65),
		.PKT_SRC_ID_L              (62),
		.PKT_DEST_ID_H             (69),
		.PKT_DEST_ID_L             (66),
		.ST_DATA_W                 (83),
		.ST_CHANNEL_W              (11),
		.AV_BURSTCOUNT_W           (1),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (7),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) tx_dma_m_read_agent (
		.clk                   (clk_0_clk_clk),                                                    //       clk.clk
		.reset                 (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                   // clk_reset.reset
		.av_address            (tx_dma_m_read_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (tx_dma_m_read_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (tx_dma_m_read_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (tx_dma_m_read_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (tx_dma_m_read_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (tx_dma_m_read_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (tx_dma_m_read_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (tx_dma_m_read_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (tx_dma_m_read_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (tx_dma_m_read_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (tx_dma_m_read_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (tx_dma_m_read_agent_cp_valid),                                     //        cp.valid
		.cp_data               (tx_dma_m_read_agent_cp_data),                                      //          .data
		.cp_startofpacket      (tx_dma_m_read_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (tx_dma_m_read_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (tx_dma_m_read_agent_cp_ready),                                     //          .ready
		.rp_valid              (tx_dma_m_read_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (tx_dma_m_read_limiter_rsp_src_data),                               //          .data
		.rp_channel            (tx_dma_m_read_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (tx_dma_m_read_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (tx_dma_m_read_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (tx_dma_m_read_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                 // (terminated)
		.av_writeresponsevalid ()                                                                  // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (109),
		.PKT_ORI_BURST_SIZE_L      (107),
		.PKT_RESPONSE_STATUS_H     (106),
		.PKT_RESPONSE_STATUS_L     (105),
		.PKT_QOS_H                 (88),
		.PKT_QOS_L                 (88),
		.PKT_DATA_SIDEBAND_H       (86),
		.PKT_DATA_SIDEBAND_L       (86),
		.PKT_ADDR_SIDEBAND_H       (85),
		.PKT_ADDR_SIDEBAND_L       (85),
		.PKT_BURST_TYPE_H          (84),
		.PKT_BURST_TYPE_L          (83),
		.PKT_CACHE_H               (104),
		.PKT_CACHE_L               (101),
		.PKT_THREAD_ID_H           (97),
		.PKT_THREAD_ID_L           (97),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (100),
		.PKT_PROTECTION_L          (98),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (92),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (93),
		.ST_DATA_W                 (110),
		.ST_CHANNEL_W              (11),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (2),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) rx_dma_descriptor_read_agent (
		.clk                   (clk_0_clk_clk),                                                             //       clk.clk
		.reset                 (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                            // clk_reset.reset
		.av_address            (rx_dma_descriptor_read_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (rx_dma_descriptor_read_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (rx_dma_descriptor_read_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (rx_dma_descriptor_read_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (rx_dma_descriptor_read_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (rx_dma_descriptor_read_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (rx_dma_descriptor_read_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (rx_dma_descriptor_read_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (rx_dma_descriptor_read_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (rx_dma_descriptor_read_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (rx_dma_descriptor_read_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (rx_dma_descriptor_read_agent_cp_valid),                                     //        cp.valid
		.cp_data               (rx_dma_descriptor_read_agent_cp_data),                                      //          .data
		.cp_startofpacket      (rx_dma_descriptor_read_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (rx_dma_descriptor_read_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (rx_dma_descriptor_read_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_003_src_valid),                                                     //        rp.valid
		.rp_data               (rsp_mux_003_src_data),                                                      //          .data
		.rp_channel            (rsp_mux_003_src_channel),                                                   //          .channel
		.rp_startofpacket      (rsp_mux_003_src_startofpacket),                                             //          .startofpacket
		.rp_endofpacket        (rsp_mux_003_src_endofpacket),                                               //          .endofpacket
		.rp_ready              (rsp_mux_003_src_ready),                                                     //          .ready
		.av_response           (),                                                                          // (terminated)
		.av_writeresponsevalid ()                                                                           // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (109),
		.PKT_ORI_BURST_SIZE_L      (107),
		.PKT_RESPONSE_STATUS_H     (106),
		.PKT_RESPONSE_STATUS_L     (105),
		.PKT_QOS_H                 (88),
		.PKT_QOS_L                 (88),
		.PKT_DATA_SIDEBAND_H       (86),
		.PKT_DATA_SIDEBAND_L       (86),
		.PKT_ADDR_SIDEBAND_H       (85),
		.PKT_ADDR_SIDEBAND_L       (85),
		.PKT_BURST_TYPE_H          (84),
		.PKT_BURST_TYPE_L          (83),
		.PKT_CACHE_H               (104),
		.PKT_CACHE_L               (101),
		.PKT_THREAD_ID_H           (97),
		.PKT_THREAD_ID_L           (97),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (100),
		.PKT_PROTECTION_L          (98),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (92),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (93),
		.ST_DATA_W                 (110),
		.ST_CHANNEL_W              (11),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (5),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) tx_dma_descriptor_read_agent (
		.clk                   (clk_0_clk_clk),                                                             //       clk.clk
		.reset                 (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                            // clk_reset.reset
		.av_address            (tx_dma_descriptor_read_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (tx_dma_descriptor_read_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (tx_dma_descriptor_read_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (tx_dma_descriptor_read_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (tx_dma_descriptor_read_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (tx_dma_descriptor_read_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (tx_dma_descriptor_read_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (tx_dma_descriptor_read_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (tx_dma_descriptor_read_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (tx_dma_descriptor_read_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (tx_dma_descriptor_read_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (tx_dma_descriptor_read_agent_cp_valid),                                     //        cp.valid
		.cp_data               (tx_dma_descriptor_read_agent_cp_data),                                      //          .data
		.cp_startofpacket      (tx_dma_descriptor_read_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (tx_dma_descriptor_read_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (tx_dma_descriptor_read_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_004_src_valid),                                                     //        rp.valid
		.rp_data               (rsp_mux_004_src_data),                                                      //          .data
		.rp_channel            (rsp_mux_004_src_channel),                                                   //          .channel
		.rp_startofpacket      (rsp_mux_004_src_startofpacket),                                             //          .startofpacket
		.rp_endofpacket        (rsp_mux_004_src_endofpacket),                                               //          .endofpacket
		.rp_ready              (rsp_mux_004_src_ready),                                                     //          .ready
		.av_response           (),                                                                          // (terminated)
		.av_writeresponsevalid ()                                                                           // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (109),
		.PKT_ORI_BURST_SIZE_L      (107),
		.PKT_RESPONSE_STATUS_H     (106),
		.PKT_RESPONSE_STATUS_L     (105),
		.PKT_QOS_H                 (88),
		.PKT_QOS_L                 (88),
		.PKT_DATA_SIDEBAND_H       (86),
		.PKT_DATA_SIDEBAND_L       (86),
		.PKT_ADDR_SIDEBAND_H       (85),
		.PKT_ADDR_SIDEBAND_L       (85),
		.PKT_BURST_TYPE_H          (84),
		.PKT_BURST_TYPE_L          (83),
		.PKT_CACHE_H               (104),
		.PKT_CACHE_L               (101),
		.PKT_THREAD_ID_H           (97),
		.PKT_THREAD_ID_L           (97),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (100),
		.PKT_PROTECTION_L          (98),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (92),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (93),
		.ST_DATA_W                 (110),
		.ST_CHANNEL_W              (11),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (3),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) rx_dma_descriptor_write_agent (
		.clk                   (clk_0_clk_clk),                                                              //       clk.clk
		.reset                 (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                             // clk_reset.reset
		.av_address            (rx_dma_descriptor_write_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (rx_dma_descriptor_write_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (rx_dma_descriptor_write_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (rx_dma_descriptor_write_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (rx_dma_descriptor_write_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (rx_dma_descriptor_write_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (rx_dma_descriptor_write_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (rx_dma_descriptor_write_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (rx_dma_descriptor_write_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (rx_dma_descriptor_write_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (rx_dma_descriptor_write_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (rx_dma_descriptor_write_agent_cp_valid),                                     //        cp.valid
		.cp_data               (rx_dma_descriptor_write_agent_cp_data),                                      //          .data
		.cp_startofpacket      (rx_dma_descriptor_write_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (rx_dma_descriptor_write_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (rx_dma_descriptor_write_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_005_src_valid),                                                      //        rp.valid
		.rp_data               (rsp_mux_005_src_data),                                                       //          .data
		.rp_channel            (rsp_mux_005_src_channel),                                                    //          .channel
		.rp_startofpacket      (rsp_mux_005_src_startofpacket),                                              //          .startofpacket
		.rp_endofpacket        (rsp_mux_005_src_endofpacket),                                                //          .endofpacket
		.rp_ready              (rsp_mux_005_src_ready),                                                      //          .ready
		.av_response           (),                                                                           // (terminated)
		.av_writeresponsevalid ()                                                                            // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (109),
		.PKT_ORI_BURST_SIZE_L      (107),
		.PKT_RESPONSE_STATUS_H     (106),
		.PKT_RESPONSE_STATUS_L     (105),
		.PKT_QOS_H                 (88),
		.PKT_QOS_L                 (88),
		.PKT_DATA_SIDEBAND_H       (86),
		.PKT_DATA_SIDEBAND_L       (86),
		.PKT_ADDR_SIDEBAND_H       (85),
		.PKT_ADDR_SIDEBAND_L       (85),
		.PKT_BURST_TYPE_H          (84),
		.PKT_BURST_TYPE_L          (83),
		.PKT_CACHE_H               (104),
		.PKT_CACHE_L               (101),
		.PKT_THREAD_ID_H           (97),
		.PKT_THREAD_ID_L           (97),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (100),
		.PKT_PROTECTION_L          (98),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (92),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (93),
		.ST_DATA_W                 (110),
		.ST_CHANNEL_W              (11),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (6),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) tx_dma_descriptor_write_agent (
		.clk                   (clk_0_clk_clk),                                                              //       clk.clk
		.reset                 (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                             // clk_reset.reset
		.av_address            (tx_dma_descriptor_write_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (tx_dma_descriptor_write_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (tx_dma_descriptor_write_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (tx_dma_descriptor_write_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (tx_dma_descriptor_write_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (tx_dma_descriptor_write_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (tx_dma_descriptor_write_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (tx_dma_descriptor_write_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (tx_dma_descriptor_write_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (tx_dma_descriptor_write_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (tx_dma_descriptor_write_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (tx_dma_descriptor_write_agent_cp_valid),                                     //        cp.valid
		.cp_data               (tx_dma_descriptor_write_agent_cp_data),                                      //          .data
		.cp_startofpacket      (tx_dma_descriptor_write_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (tx_dma_descriptor_write_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (tx_dma_descriptor_write_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_006_src_valid),                                                      //        rp.valid
		.rp_data               (rsp_mux_006_src_data),                                                       //          .data
		.rp_channel            (rsp_mux_006_src_channel),                                                    //          .channel
		.rp_startofpacket      (rsp_mux_006_src_startofpacket),                                              //          .startofpacket
		.rp_endofpacket        (rsp_mux_006_src_endofpacket),                                                //          .endofpacket
		.rp_ready              (rsp_mux_006_src_ready),                                                      //          .ready
		.av_response           (),                                                                           // (terminated)
		.av_writeresponsevalid ()                                                                            // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (109),
		.PKT_ORI_BURST_SIZE_L      (107),
		.PKT_RESPONSE_STATUS_H     (106),
		.PKT_RESPONSE_STATUS_L     (105),
		.PKT_QOS_H                 (88),
		.PKT_QOS_L                 (88),
		.PKT_DATA_SIDEBAND_H       (86),
		.PKT_DATA_SIDEBAND_L       (86),
		.PKT_ADDR_SIDEBAND_H       (85),
		.PKT_ADDR_SIDEBAND_L       (85),
		.PKT_BURST_TYPE_H          (84),
		.PKT_BURST_TYPE_L          (83),
		.PKT_CACHE_H               (104),
		.PKT_CACHE_L               (101),
		.PKT_THREAD_ID_H           (97),
		.PKT_THREAD_ID_L           (97),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (100),
		.PKT_PROTECTION_L          (98),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (92),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (93),
		.ST_DATA_W                 (110),
		.ST_CHANNEL_W              (11),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (1),
		.BURSTWRAP_VALUE           (3),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) nios2_gen2_0_instruction_master_agent (
		.clk                   (clk_0_clk_clk),                                                                      //       clk.clk
		.reset                 (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                                     // clk_reset.reset
		.av_address            (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (nios2_gen2_0_instruction_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (nios2_gen2_0_instruction_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (nios2_gen2_0_instruction_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (nios2_gen2_0_instruction_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (nios2_gen2_0_instruction_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (nios2_gen2_0_instruction_master_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (nios2_gen2_0_instruction_master_limiter_rsp_src_data),                               //          .data
		.rp_channel            (nios2_gen2_0_instruction_master_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (nios2_gen2_0_instruction_master_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (nios2_gen2_0_instruction_master_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (nios2_gen2_0_instruction_master_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                                   // (terminated)
		.av_writeresponsevalid ()                                                                                    // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (109),
		.PKT_ORI_BURST_SIZE_L      (107),
		.PKT_RESPONSE_STATUS_H     (106),
		.PKT_RESPONSE_STATUS_L     (105),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (100),
		.PKT_PROTECTION_L          (98),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (92),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (93),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (11),
		.ST_DATA_W                 (110),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) jtag_uart_0_avalon_jtag_slave_agent (
		.clk                     (clk_0_clk_clk),                                                  //             clk.clk
		.reset                   (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                 //       clk_reset.reset
		.m0_address              (jtag_uart_0_avalon_jtag_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (jtag_uart_0_avalon_jtag_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (jtag_uart_0_avalon_jtag_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (jtag_uart_0_avalon_jtag_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (jtag_uart_0_avalon_jtag_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (jtag_uart_0_avalon_jtag_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (jtag_uart_0_avalon_jtag_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (jtag_uart_0_avalon_jtag_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (jtag_uart_0_avalon_jtag_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (jtag_uart_0_avalon_jtag_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (jtag_uart_0_avalon_jtag_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (jtag_uart_0_avalon_jtag_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (jtag_uart_0_avalon_jtag_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (jtag_uart_0_avalon_jtag_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (jtag_uart_0_avalon_jtag_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (jtag_uart_0_avalon_jtag_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_src_ready),                                              //              cp.ready
		.cp_valid                (cmd_mux_src_valid),                                              //                .valid
		.cp_data                 (cmd_mux_src_data),                                               //                .data
		.cp_startofpacket        (cmd_mux_src_startofpacket),                                      //                .startofpacket
		.cp_endofpacket          (cmd_mux_src_endofpacket),                                        //                .endofpacket
		.cp_channel              (cmd_mux_src_channel),                                            //                .channel
		.rf_sink_ready           (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (jtag_uart_0_avalon_jtag_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (jtag_uart_0_avalon_jtag_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (jtag_uart_0_avalon_jtag_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (jtag_uart_0_avalon_jtag_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (jtag_uart_0_avalon_jtag_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                                  // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                                  //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                                   //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                                  //                .error
		.rdata_fifo_src_ready    (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (111),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                  //       clk.clk
		.reset             (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                 // clk_reset.reset
		.in_data           (jtag_uart_0_avalon_jtag_slave_agent_rf_source_data),             //        in.data
		.in_valid          (jtag_uart_0_avalon_jtag_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (jtag_uart_0_avalon_jtag_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (jtag_uart_0_avalon_jtag_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (jtag_uart_0_avalon_jtag_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                          // (terminated)
		.csr_read          (1'b0),                                                           // (terminated)
		.csr_write         (1'b0),                                                           // (terminated)
		.csr_readdata      (),                                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                           // (terminated)
		.almost_full_data  (),                                                               // (terminated)
		.almost_empty_data (),                                                               // (terminated)
		.in_empty          (1'b0),                                                           // (terminated)
		.out_empty         (),                                                               // (terminated)
		.in_error          (1'b0),                                                           // (terminated)
		.out_error         (),                                                               // (terminated)
		.in_channel        (1'b0),                                                           // (terminated)
		.out_channel       ()                                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (109),
		.PKT_ORI_BURST_SIZE_L      (107),
		.PKT_RESPONSE_STATUS_H     (106),
		.PKT_RESPONSE_STATUS_L     (105),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (100),
		.PKT_PROTECTION_L          (98),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (92),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (93),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (11),
		.ST_DATA_W                 (110),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) tse_control_port_agent (
		.clk                     (clk_0_clk_clk),                                     //             clk.clk
		.reset                   (nios2_gen2_0_reset_reset_bridge_in_reset_reset),    //       clk_reset.reset
		.m0_address              (tse_control_port_agent_m0_address),                 //              m0.address
		.m0_burstcount           (tse_control_port_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (tse_control_port_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (tse_control_port_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (tse_control_port_agent_m0_lock),                    //                .lock
		.m0_readdata             (tse_control_port_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (tse_control_port_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (tse_control_port_agent_m0_read),                    //                .read
		.m0_waitrequest          (tse_control_port_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (tse_control_port_agent_m0_writedata),               //                .writedata
		.m0_write                (tse_control_port_agent_m0_write),                   //                .write
		.rp_endofpacket          (tse_control_port_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (tse_control_port_agent_rp_ready),                   //                .ready
		.rp_valid                (tse_control_port_agent_rp_valid),                   //                .valid
		.rp_data                 (tse_control_port_agent_rp_data),                    //                .data
		.rp_startofpacket        (tse_control_port_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_001_src_ready),                             //              cp.ready
		.cp_valid                (cmd_mux_001_src_valid),                             //                .valid
		.cp_data                 (cmd_mux_001_src_data),                              //                .data
		.cp_startofpacket        (cmd_mux_001_src_startofpacket),                     //                .startofpacket
		.cp_endofpacket          (cmd_mux_001_src_endofpacket),                       //                .endofpacket
		.cp_channel              (cmd_mux_001_src_channel),                           //                .channel
		.rf_sink_ready           (tse_control_port_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (tse_control_port_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (tse_control_port_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (tse_control_port_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (tse_control_port_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (tse_control_port_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (tse_control_port_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (tse_control_port_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (tse_control_port_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (tse_control_port_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_001_out_0_ready),                 // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_001_out_0_valid),                 //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_001_out_0_data),                  //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_001_out_0_error),                 //                .error
		.rdata_fifo_src_ready    (tse_control_port_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (tse_control_port_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (tse_control_port_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                             //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                               //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (111),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) tse_control_port_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                     //       clk.clk
		.reset             (nios2_gen2_0_reset_reset_bridge_in_reset_reset),    // clk_reset.reset
		.in_data           (tse_control_port_agent_rf_source_data),             //        in.data
		.in_valid          (tse_control_port_agent_rf_source_valid),            //          .valid
		.in_ready          (tse_control_port_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (tse_control_port_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (tse_control_port_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (tse_control_port_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (tse_control_port_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (tse_control_port_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (tse_control_port_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (tse_control_port_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                             // (terminated)
		.csr_read          (1'b0),                                              // (terminated)
		.csr_write         (1'b0),                                              // (terminated)
		.csr_readdata      (),                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),              // (terminated)
		.almost_full_data  (),                                                  // (terminated)
		.almost_empty_data (),                                                  // (terminated)
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.in_error          (1'b0),                                              // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_channel        (1'b0),                                              // (terminated)
		.out_channel       ()                                                   // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (109),
		.PKT_ORI_BURST_SIZE_L      (107),
		.PKT_RESPONSE_STATUS_H     (106),
		.PKT_RESPONSE_STATUS_L     (105),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (100),
		.PKT_PROTECTION_L          (98),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (92),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (93),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (11),
		.ST_DATA_W                 (110),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) tx_dma_csr_agent (
		.clk                     (clk_0_clk_clk),                                  //             clk.clk
		.reset                   (nios2_gen2_0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (tx_dma_csr_agent_m0_address),                    //              m0.address
		.m0_burstcount           (tx_dma_csr_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (tx_dma_csr_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (tx_dma_csr_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (tx_dma_csr_agent_m0_lock),                       //                .lock
		.m0_readdata             (tx_dma_csr_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (tx_dma_csr_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (tx_dma_csr_agent_m0_read),                       //                .read
		.m0_waitrequest          (tx_dma_csr_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (tx_dma_csr_agent_m0_writedata),                  //                .writedata
		.m0_write                (tx_dma_csr_agent_m0_write),                      //                .write
		.rp_endofpacket          (tx_dma_csr_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (tx_dma_csr_agent_rp_ready),                      //                .ready
		.rp_valid                (tx_dma_csr_agent_rp_valid),                      //                .valid
		.rp_data                 (tx_dma_csr_agent_rp_data),                       //                .data
		.rp_startofpacket        (tx_dma_csr_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (cmd_mux_002_src_ready),                          //              cp.ready
		.cp_valid                (cmd_mux_002_src_valid),                          //                .valid
		.cp_data                 (cmd_mux_002_src_data),                           //                .data
		.cp_startofpacket        (cmd_mux_002_src_startofpacket),                  //                .startofpacket
		.cp_endofpacket          (cmd_mux_002_src_endofpacket),                    //                .endofpacket
		.cp_channel              (cmd_mux_002_src_channel),                        //                .channel
		.rf_sink_ready           (tx_dma_csr_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (tx_dma_csr_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (tx_dma_csr_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (tx_dma_csr_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (tx_dma_csr_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (tx_dma_csr_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (tx_dma_csr_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (tx_dma_csr_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (tx_dma_csr_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (tx_dma_csr_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_002_out_0_ready),              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_002_out_0_valid),              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_002_out_0_data),               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_002_out_0_error),              //                .error
		.rdata_fifo_src_ready    (tx_dma_csr_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (tx_dma_csr_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (tx_dma_csr_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (111),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) tx_dma_csr_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                  //       clk.clk
		.reset             (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (tx_dma_csr_agent_rf_source_data),                //        in.data
		.in_valid          (tx_dma_csr_agent_rf_source_valid),               //          .valid
		.in_ready          (tx_dma_csr_agent_rf_source_ready),               //          .ready
		.in_startofpacket  (tx_dma_csr_agent_rf_source_startofpacket),       //          .startofpacket
		.in_endofpacket    (tx_dma_csr_agent_rf_source_endofpacket),         //          .endofpacket
		.out_data          (tx_dma_csr_agent_rsp_fifo_out_data),             //       out.data
		.out_valid         (tx_dma_csr_agent_rsp_fifo_out_valid),            //          .valid
		.out_ready         (tx_dma_csr_agent_rsp_fifo_out_ready),            //          .ready
		.out_startofpacket (tx_dma_csr_agent_rsp_fifo_out_startofpacket),    //          .startofpacket
		.out_endofpacket   (tx_dma_csr_agent_rsp_fifo_out_endofpacket),      //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (109),
		.PKT_ORI_BURST_SIZE_L      (107),
		.PKT_RESPONSE_STATUS_H     (106),
		.PKT_RESPONSE_STATUS_L     (105),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (100),
		.PKT_PROTECTION_L          (98),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (92),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (93),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (11),
		.ST_DATA_W                 (110),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) rx_dma_csr_agent (
		.clk                     (clk_0_clk_clk),                                  //             clk.clk
		.reset                   (nios2_gen2_0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (rx_dma_csr_agent_m0_address),                    //              m0.address
		.m0_burstcount           (rx_dma_csr_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (rx_dma_csr_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (rx_dma_csr_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (rx_dma_csr_agent_m0_lock),                       //                .lock
		.m0_readdata             (rx_dma_csr_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (rx_dma_csr_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (rx_dma_csr_agent_m0_read),                       //                .read
		.m0_waitrequest          (rx_dma_csr_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (rx_dma_csr_agent_m0_writedata),                  //                .writedata
		.m0_write                (rx_dma_csr_agent_m0_write),                      //                .write
		.rp_endofpacket          (rx_dma_csr_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (rx_dma_csr_agent_rp_ready),                      //                .ready
		.rp_valid                (rx_dma_csr_agent_rp_valid),                      //                .valid
		.rp_data                 (rx_dma_csr_agent_rp_data),                       //                .data
		.rp_startofpacket        (rx_dma_csr_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (cmd_mux_003_src_ready),                          //              cp.ready
		.cp_valid                (cmd_mux_003_src_valid),                          //                .valid
		.cp_data                 (cmd_mux_003_src_data),                           //                .data
		.cp_startofpacket        (cmd_mux_003_src_startofpacket),                  //                .startofpacket
		.cp_endofpacket          (cmd_mux_003_src_endofpacket),                    //                .endofpacket
		.cp_channel              (cmd_mux_003_src_channel),                        //                .channel
		.rf_sink_ready           (rx_dma_csr_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (rx_dma_csr_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (rx_dma_csr_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (rx_dma_csr_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (rx_dma_csr_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (rx_dma_csr_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (rx_dma_csr_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (rx_dma_csr_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (rx_dma_csr_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (rx_dma_csr_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_003_out_0_ready),              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_003_out_0_valid),              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_003_out_0_data),               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_003_out_0_error),              //                .error
		.rdata_fifo_src_ready    (rx_dma_csr_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (rx_dma_csr_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (rx_dma_csr_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (111),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) rx_dma_csr_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                  //       clk.clk
		.reset             (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (rx_dma_csr_agent_rf_source_data),                //        in.data
		.in_valid          (rx_dma_csr_agent_rf_source_valid),               //          .valid
		.in_ready          (rx_dma_csr_agent_rf_source_ready),               //          .ready
		.in_startofpacket  (rx_dma_csr_agent_rf_source_startofpacket),       //          .startofpacket
		.in_endofpacket    (rx_dma_csr_agent_rf_source_endofpacket),         //          .endofpacket
		.out_data          (rx_dma_csr_agent_rsp_fifo_out_data),             //       out.data
		.out_valid         (rx_dma_csr_agent_rsp_fifo_out_valid),            //          .valid
		.out_ready         (rx_dma_csr_agent_rsp_fifo_out_ready),            //          .ready
		.out_startofpacket (rx_dma_csr_agent_rsp_fifo_out_startofpacket),    //          .startofpacket
		.out_endofpacket   (rx_dma_csr_agent_rsp_fifo_out_endofpacket),      //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (109),
		.PKT_ORI_BURST_SIZE_L      (107),
		.PKT_RESPONSE_STATUS_H     (106),
		.PKT_RESPONSE_STATUS_L     (105),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (100),
		.PKT_PROTECTION_L          (98),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (92),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (93),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (11),
		.ST_DATA_W                 (110),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) nios2_gen2_0_debug_mem_slave_agent (
		.clk                     (clk_0_clk_clk),                                                 //             clk.clk
		.reset                   (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                //       clk_reset.reset
		.m0_address              (nios2_gen2_0_debug_mem_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (nios2_gen2_0_debug_mem_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (nios2_gen2_0_debug_mem_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (nios2_gen2_0_debug_mem_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (nios2_gen2_0_debug_mem_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (nios2_gen2_0_debug_mem_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (nios2_gen2_0_debug_mem_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (nios2_gen2_0_debug_mem_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (nios2_gen2_0_debug_mem_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (nios2_gen2_0_debug_mem_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (nios2_gen2_0_debug_mem_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (nios2_gen2_0_debug_mem_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (nios2_gen2_0_debug_mem_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (nios2_gen2_0_debug_mem_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (nios2_gen2_0_debug_mem_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (nios2_gen2_0_debug_mem_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_004_src_ready),                                         //              cp.ready
		.cp_valid                (cmd_mux_004_src_valid),                                         //                .valid
		.cp_data                 (cmd_mux_004_src_data),                                          //                .data
		.cp_startofpacket        (cmd_mux_004_src_startofpacket),                                 //                .startofpacket
		.cp_endofpacket          (cmd_mux_004_src_endofpacket),                                   //                .endofpacket
		.cp_channel              (cmd_mux_004_src_channel),                                       //                .channel
		.rf_sink_ready           (nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (nios2_gen2_0_debug_mem_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (nios2_gen2_0_debug_mem_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (nios2_gen2_0_debug_mem_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (nios2_gen2_0_debug_mem_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (nios2_gen2_0_debug_mem_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_004_out_0_ready),                             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_004_out_0_valid),                             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_004_out_0_data),                              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_004_out_0_error),                             //                .error
		.rdata_fifo_src_ready    (nios2_gen2_0_debug_mem_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (nios2_gen2_0_debug_mem_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (nios2_gen2_0_debug_mem_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (111),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) nios2_gen2_0_debug_mem_slave_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                 //       clk.clk
		.reset             (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                // clk_reset.reset
		.in_data           (nios2_gen2_0_debug_mem_slave_agent_rf_source_data),             //        in.data
		.in_valid          (nios2_gen2_0_debug_mem_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (nios2_gen2_0_debug_mem_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (nios2_gen2_0_debug_mem_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (nios2_gen2_0_debug_mem_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                         // (terminated)
		.csr_read          (1'b0),                                                          // (terminated)
		.csr_write         (1'b0),                                                          // (terminated)
		.csr_readdata      (),                                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                          // (terminated)
		.almost_full_data  (),                                                              // (terminated)
		.almost_empty_data (),                                                              // (terminated)
		.in_empty          (1'b0),                                                          // (terminated)
		.out_empty         (),                                                              // (terminated)
		.in_error          (1'b0),                                                          // (terminated)
		.out_error         (),                                                              // (terminated)
		.in_channel        (1'b0),                                                          // (terminated)
		.out_channel       ()                                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (109),
		.PKT_ORI_BURST_SIZE_L      (107),
		.PKT_RESPONSE_STATUS_H     (106),
		.PKT_RESPONSE_STATUS_L     (105),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (100),
		.PKT_PROTECTION_L          (98),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (92),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (93),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (11),
		.ST_DATA_W                 (110),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) system_ram_s1_agent (
		.clk                     (clk_0_clk_clk),                                  //             clk.clk
		.reset                   (nios2_gen2_0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (system_ram_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (system_ram_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (system_ram_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (system_ram_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (system_ram_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (system_ram_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (system_ram_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (system_ram_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (system_ram_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (system_ram_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (system_ram_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (system_ram_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (system_ram_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (system_ram_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (system_ram_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (system_ram_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_005_src_ready),                          //              cp.ready
		.cp_valid                (cmd_mux_005_src_valid),                          //                .valid
		.cp_data                 (cmd_mux_005_src_data),                           //                .data
		.cp_startofpacket        (cmd_mux_005_src_startofpacket),                  //                .startofpacket
		.cp_endofpacket          (cmd_mux_005_src_endofpacket),                    //                .endofpacket
		.cp_channel              (cmd_mux_005_src_channel),                        //                .channel
		.rf_sink_ready           (system_ram_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (system_ram_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (system_ram_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (system_ram_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (system_ram_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (system_ram_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (system_ram_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (system_ram_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (system_ram_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (system_ram_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_005_out_0_ready),              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_005_out_0_valid),              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_005_out_0_data),               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_005_out_0_error),              //                .error
		.rdata_fifo_src_ready    (system_ram_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (system_ram_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (system_ram_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (111),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) system_ram_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                  //       clk.clk
		.reset             (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (system_ram_s1_agent_rf_source_data),             //        in.data
		.in_valid          (system_ram_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (system_ram_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (system_ram_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (system_ram_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (system_ram_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (system_ram_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (system_ram_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (system_ram_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (system_ram_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (82),
		.PKT_ORI_BURST_SIZE_L      (80),
		.PKT_RESPONSE_STATUS_H     (79),
		.PKT_RESPONSE_STATUS_L     (78),
		.PKT_BURST_SIZE_H          (55),
		.PKT_BURST_SIZE_L          (53),
		.PKT_TRANS_LOCK            (45),
		.PKT_BEGIN_BURST           (60),
		.PKT_PROTECTION_H          (73),
		.PKT_PROTECTION_L          (71),
		.PKT_BURSTWRAP_H           (52),
		.PKT_BURSTWRAP_L           (50),
		.PKT_BYTE_CNT_H            (49),
		.PKT_BYTE_CNT_L            (47),
		.PKT_ADDR_H                (40),
		.PKT_ADDR_L                (9),
		.PKT_TRANS_COMPRESSED_READ (41),
		.PKT_TRANS_POSTED          (42),
		.PKT_TRANS_WRITE           (43),
		.PKT_TRANS_READ            (44),
		.PKT_DATA_H                (7),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_SRC_ID_H              (65),
		.PKT_SRC_ID_L              (62),
		.PKT_DEST_ID_H             (69),
		.PKT_DEST_ID_L             (66),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (11),
		.ST_DATA_W                 (83),
		.AVS_BURSTCOUNT_W          (1),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) header_ram_s1_agent (
		.clk                     (clk_0_clk_clk),                                     //             clk.clk
		.reset                   (nios2_gen2_0_reset_reset_bridge_in_reset_reset),    //       clk_reset.reset
		.m0_address              (header_ram_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (header_ram_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (header_ram_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (header_ram_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (header_ram_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (header_ram_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (header_ram_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (header_ram_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (header_ram_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (header_ram_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (header_ram_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (header_ram_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (header_ram_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (header_ram_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (header_ram_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (header_ram_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (header_ram_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (header_ram_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (header_ram_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (header_ram_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (header_ram_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (header_ram_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (header_ram_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (header_ram_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (header_ram_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (header_ram_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (header_ram_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (header_ram_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (header_ram_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (header_ram_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (header_ram_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (header_ram_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_006_out_0_ready),                 // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_006_out_0_valid),                 //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_006_out_0_data),                  //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_006_out_0_error),                 //                .error
		.rdata_fifo_src_ready    (header_ram_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (header_ram_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (header_ram_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                             //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                               //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (84),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) header_ram_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                  //       clk.clk
		.reset             (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (header_ram_s1_agent_rf_source_data),             //        in.data
		.in_valid          (header_ram_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (header_ram_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (header_ram_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (header_ram_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (header_ram_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (header_ram_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (header_ram_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (header_ram_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (header_ram_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (109),
		.PKT_ORI_BURST_SIZE_L      (107),
		.PKT_RESPONSE_STATUS_H     (106),
		.PKT_RESPONSE_STATUS_L     (105),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (100),
		.PKT_PROTECTION_L          (98),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (92),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (93),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (11),
		.ST_DATA_W                 (110),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) timer_0_s1_agent (
		.clk                     (clk_0_clk_clk),                                  //             clk.clk
		.reset                   (nios2_gen2_0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (timer_0_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (timer_0_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (timer_0_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (timer_0_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (timer_0_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (timer_0_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (timer_0_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (timer_0_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (timer_0_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (timer_0_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (timer_0_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (timer_0_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (timer_0_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (timer_0_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (timer_0_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (timer_0_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (cmd_mux_007_src_ready),                          //              cp.ready
		.cp_valid                (cmd_mux_007_src_valid),                          //                .valid
		.cp_data                 (cmd_mux_007_src_data),                           //                .data
		.cp_startofpacket        (cmd_mux_007_src_startofpacket),                  //                .startofpacket
		.cp_endofpacket          (cmd_mux_007_src_endofpacket),                    //                .endofpacket
		.cp_channel              (cmd_mux_007_src_channel),                        //                .channel
		.rf_sink_ready           (timer_0_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (timer_0_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (timer_0_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (timer_0_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (timer_0_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (timer_0_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (timer_0_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (timer_0_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (timer_0_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (timer_0_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_007_out_0_ready),              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_007_out_0_valid),              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_007_out_0_data),               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_007_out_0_error),              //                .error
		.rdata_fifo_src_ready    (timer_0_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (timer_0_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (timer_0_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (111),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) timer_0_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                  //       clk.clk
		.reset             (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (timer_0_s1_agent_rf_source_data),                //        in.data
		.in_valid          (timer_0_s1_agent_rf_source_valid),               //          .valid
		.in_ready          (timer_0_s1_agent_rf_source_ready),               //          .ready
		.in_startofpacket  (timer_0_s1_agent_rf_source_startofpacket),       //          .startofpacket
		.in_endofpacket    (timer_0_s1_agent_rf_source_endofpacket),         //          .endofpacket
		.out_data          (timer_0_s1_agent_rsp_fifo_out_data),             //       out.data
		.out_valid         (timer_0_s1_agent_rsp_fifo_out_valid),            //          .valid
		.out_ready         (timer_0_s1_agent_rsp_fifo_out_ready),            //          .ready
		.out_startofpacket (timer_0_s1_agent_rsp_fifo_out_startofpacket),    //          .startofpacket
		.out_endofpacket   (timer_0_s1_agent_rsp_fifo_out_endofpacket),      //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (82),
		.PKT_ORI_BURST_SIZE_L      (80),
		.PKT_RESPONSE_STATUS_H     (79),
		.PKT_RESPONSE_STATUS_L     (78),
		.PKT_BURST_SIZE_H          (55),
		.PKT_BURST_SIZE_L          (53),
		.PKT_TRANS_LOCK            (45),
		.PKT_BEGIN_BURST           (60),
		.PKT_PROTECTION_H          (73),
		.PKT_PROTECTION_L          (71),
		.PKT_BURSTWRAP_H           (52),
		.PKT_BURSTWRAP_L           (50),
		.PKT_BYTE_CNT_H            (49),
		.PKT_BYTE_CNT_L            (47),
		.PKT_ADDR_H                (40),
		.PKT_ADDR_L                (9),
		.PKT_TRANS_COMPRESSED_READ (41),
		.PKT_TRANS_POSTED          (42),
		.PKT_TRANS_WRITE           (43),
		.PKT_TRANS_READ            (44),
		.PKT_DATA_H                (7),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_SRC_ID_H              (65),
		.PKT_SRC_ID_L              (62),
		.PKT_DEST_ID_H             (69),
		.PKT_DEST_ID_L             (66),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (11),
		.ST_DATA_W                 (83),
		.AVS_BURSTCOUNT_W          (1),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) rx_buf_ram_s1_agent (
		.clk                     (clk_0_clk_clk),                                     //             clk.clk
		.reset                   (nios2_gen2_0_reset_reset_bridge_in_reset_reset),    //       clk_reset.reset
		.m0_address              (rx_buf_ram_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (rx_buf_ram_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (rx_buf_ram_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (rx_buf_ram_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (rx_buf_ram_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (rx_buf_ram_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (rx_buf_ram_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (rx_buf_ram_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (rx_buf_ram_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (rx_buf_ram_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (rx_buf_ram_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (rx_buf_ram_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (rx_buf_ram_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (rx_buf_ram_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (rx_buf_ram_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (rx_buf_ram_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (rx_buf_ram_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (rx_buf_ram_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (rx_buf_ram_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (rx_buf_ram_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (rx_buf_ram_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (rx_buf_ram_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (rx_buf_ram_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (rx_buf_ram_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (rx_buf_ram_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (rx_buf_ram_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (rx_buf_ram_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (rx_buf_ram_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (rx_buf_ram_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (rx_buf_ram_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (rx_buf_ram_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (rx_buf_ram_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_008_out_0_ready),                 // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_008_out_0_valid),                 //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_008_out_0_data),                  //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_008_out_0_error),                 //                .error
		.rdata_fifo_src_ready    (rx_buf_ram_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (rx_buf_ram_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (rx_buf_ram_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                             //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                               //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (84),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) rx_buf_ram_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                  //       clk.clk
		.reset             (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (rx_buf_ram_s1_agent_rf_source_data),             //        in.data
		.in_valid          (rx_buf_ram_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (rx_buf_ram_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (rx_buf_ram_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (rx_buf_ram_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (rx_buf_ram_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (rx_buf_ram_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (rx_buf_ram_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (rx_buf_ram_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (rx_buf_ram_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (109),
		.PKT_ORI_BURST_SIZE_L      (107),
		.PKT_RESPONSE_STATUS_H     (106),
		.PKT_RESPONSE_STATUS_L     (105),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (100),
		.PKT_PROTECTION_L          (98),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (92),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (93),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (11),
		.ST_DATA_W                 (110),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) eth_irq_pio_s1_agent (
		.clk                     (clk_0_clk_clk),                                   //             clk.clk
		.reset                   (nios2_gen2_0_reset_reset_bridge_in_reset_reset),  //       clk_reset.reset
		.m0_address              (eth_irq_pio_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (eth_irq_pio_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (eth_irq_pio_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (eth_irq_pio_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (eth_irq_pio_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (eth_irq_pio_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (eth_irq_pio_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (eth_irq_pio_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (eth_irq_pio_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (eth_irq_pio_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (eth_irq_pio_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (eth_irq_pio_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (eth_irq_pio_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (eth_irq_pio_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (eth_irq_pio_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (eth_irq_pio_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_009_src_ready),                           //              cp.ready
		.cp_valid                (cmd_mux_009_src_valid),                           //                .valid
		.cp_data                 (cmd_mux_009_src_data),                            //                .data
		.cp_startofpacket        (cmd_mux_009_src_startofpacket),                   //                .startofpacket
		.cp_endofpacket          (cmd_mux_009_src_endofpacket),                     //                .endofpacket
		.cp_channel              (cmd_mux_009_src_channel),                         //                .channel
		.rf_sink_ready           (eth_irq_pio_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (eth_irq_pio_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (eth_irq_pio_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (eth_irq_pio_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (eth_irq_pio_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (eth_irq_pio_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (eth_irq_pio_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (eth_irq_pio_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (eth_irq_pio_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (eth_irq_pio_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_009_out_0_ready),               // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_009_out_0_valid),               //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_009_out_0_data),                //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_009_out_0_error),               //                .error
		.rdata_fifo_src_ready    (eth_irq_pio_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (eth_irq_pio_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (eth_irq_pio_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (111),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) eth_irq_pio_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                   //       clk.clk
		.reset             (nios2_gen2_0_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_data           (eth_irq_pio_s1_agent_rf_source_data),             //        in.data
		.in_valid          (eth_irq_pio_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (eth_irq_pio_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (eth_irq_pio_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (eth_irq_pio_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (eth_irq_pio_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (eth_irq_pio_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (eth_irq_pio_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (eth_irq_pio_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (eth_irq_pio_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                           // (terminated)
		.csr_read          (1'b0),                                            // (terminated)
		.csr_write         (1'b0),                                            // (terminated)
		.csr_readdata      (),                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),            // (terminated)
		.almost_full_data  (),                                                // (terminated)
		.almost_empty_data (),                                                // (terminated)
		.in_empty          (1'b0),                                            // (terminated)
		.out_empty         (),                                                // (terminated)
		.in_error          (1'b0),                                            // (terminated)
		.out_error         (),                                                // (terminated)
		.in_channel        (1'b0),                                            // (terminated)
		.out_channel       ()                                                 // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (82),
		.PKT_ORI_BURST_SIZE_L      (80),
		.PKT_RESPONSE_STATUS_H     (79),
		.PKT_RESPONSE_STATUS_L     (78),
		.PKT_BURST_SIZE_H          (55),
		.PKT_BURST_SIZE_L          (53),
		.PKT_TRANS_LOCK            (45),
		.PKT_BEGIN_BURST           (60),
		.PKT_PROTECTION_H          (73),
		.PKT_PROTECTION_L          (71),
		.PKT_BURSTWRAP_H           (52),
		.PKT_BURSTWRAP_L           (50),
		.PKT_BYTE_CNT_H            (49),
		.PKT_BYTE_CNT_L            (47),
		.PKT_ADDR_H                (40),
		.PKT_ADDR_L                (9),
		.PKT_TRANS_COMPRESSED_READ (41),
		.PKT_TRANS_POSTED          (42),
		.PKT_TRANS_WRITE           (43),
		.PKT_TRANS_READ            (44),
		.PKT_DATA_H                (7),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_SRC_ID_H              (65),
		.PKT_SRC_ID_L              (62),
		.PKT_DEST_ID_H             (69),
		.PKT_DEST_ID_L             (66),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (11),
		.ST_DATA_W                 (83),
		.AVS_BURSTCOUNT_W          (1),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) tx_buff_ram_s1_agent (
		.clk                     (clk_0_clk_clk),                                   //             clk.clk
		.reset                   (nios2_gen2_0_reset_reset_bridge_in_reset_reset),  //       clk_reset.reset
		.m0_address              (tx_buff_ram_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (tx_buff_ram_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (tx_buff_ram_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (tx_buff_ram_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (tx_buff_ram_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (tx_buff_ram_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (tx_buff_ram_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (tx_buff_ram_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (tx_buff_ram_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (tx_buff_ram_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (tx_buff_ram_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (tx_buff_ram_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (tx_buff_ram_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (tx_buff_ram_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (tx_buff_ram_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (tx_buff_ram_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_010_src_ready),                           //              cp.ready
		.cp_valid                (cmd_mux_010_src_valid),                           //                .valid
		.cp_data                 (cmd_mux_010_src_data),                            //                .data
		.cp_startofpacket        (cmd_mux_010_src_startofpacket),                   //                .startofpacket
		.cp_endofpacket          (cmd_mux_010_src_endofpacket),                     //                .endofpacket
		.cp_channel              (cmd_mux_010_src_channel),                         //                .channel
		.rf_sink_ready           (tx_buff_ram_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (tx_buff_ram_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (tx_buff_ram_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (tx_buff_ram_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (tx_buff_ram_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (tx_buff_ram_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (tx_buff_ram_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (tx_buff_ram_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (tx_buff_ram_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (tx_buff_ram_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_010_out_0_ready),               // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_010_out_0_valid),               //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_010_out_0_data),                //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_010_out_0_error),               //                .error
		.rdata_fifo_src_ready    (tx_buff_ram_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (tx_buff_ram_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (tx_buff_ram_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (84),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) tx_buff_ram_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                   //       clk.clk
		.reset             (nios2_gen2_0_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_data           (tx_buff_ram_s1_agent_rf_source_data),             //        in.data
		.in_valid          (tx_buff_ram_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (tx_buff_ram_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (tx_buff_ram_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (tx_buff_ram_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (tx_buff_ram_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (tx_buff_ram_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (tx_buff_ram_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (tx_buff_ram_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (tx_buff_ram_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                           // (terminated)
		.csr_read          (1'b0),                                            // (terminated)
		.csr_write         (1'b0),                                            // (terminated)
		.csr_readdata      (),                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),            // (terminated)
		.almost_full_data  (),                                                // (terminated)
		.almost_empty_data (),                                                // (terminated)
		.in_empty          (1'b0),                                            // (terminated)
		.out_empty         (),                                                // (terminated)
		.in_error          (1'b0),                                            // (terminated)
		.out_error         (),                                                // (terminated)
		.in_channel        (1'b0),                                            // (terminated)
		.out_channel       ()                                                 // (terminated)
	);

	eth_nios_v2_mm_interconnect_0_router router (
		.sink_ready         (nios2_gen2_0_data_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (nios2_gen2_0_data_master_agent_cp_valid),         //          .valid
		.sink_data          (nios2_gen2_0_data_master_agent_cp_data),          //          .data
		.sink_startofpacket (nios2_gen2_0_data_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (nios2_gen2_0_data_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                   //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_src_ready),                                //       src.ready
		.src_valid          (router_src_valid),                                //          .valid
		.src_data           (router_src_data),                                 //          .data
		.src_channel        (router_src_channel),                              //          .channel
		.src_startofpacket  (router_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                           //          .endofpacket
	);

	eth_nios_v2_mm_interconnect_0_router_001 router_001 (
		.sink_ready         (rx_dma_m_write_agent_cp_ready),                  //      sink.ready
		.sink_valid         (rx_dma_m_write_agent_cp_valid),                  //          .valid
		.sink_data          (rx_dma_m_write_agent_cp_data),                   //          .data
		.sink_startofpacket (rx_dma_m_write_agent_cp_startofpacket),          //          .startofpacket
		.sink_endofpacket   (rx_dma_m_write_agent_cp_endofpacket),            //          .endofpacket
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_001_src_ready),                           //       src.ready
		.src_valid          (router_001_src_valid),                           //          .valid
		.src_data           (router_001_src_data),                            //          .data
		.src_channel        (router_001_src_channel),                         //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                      //          .endofpacket
	);

	eth_nios_v2_mm_interconnect_0_router_002 router_002 (
		.sink_ready         (tx_dma_m_read_agent_cp_ready),                   //      sink.ready
		.sink_valid         (tx_dma_m_read_agent_cp_valid),                   //          .valid
		.sink_data          (tx_dma_m_read_agent_cp_data),                    //          .data
		.sink_startofpacket (tx_dma_m_read_agent_cp_startofpacket),           //          .startofpacket
		.sink_endofpacket   (tx_dma_m_read_agent_cp_endofpacket),             //          .endofpacket
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_002_src_ready),                           //       src.ready
		.src_valid          (router_002_src_valid),                           //          .valid
		.src_data           (router_002_src_data),                            //          .data
		.src_channel        (router_002_src_channel),                         //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                      //          .endofpacket
	);

	eth_nios_v2_mm_interconnect_0_router_003 router_003 (
		.sink_ready         (rx_dma_descriptor_read_agent_cp_ready),          //      sink.ready
		.sink_valid         (rx_dma_descriptor_read_agent_cp_valid),          //          .valid
		.sink_data          (rx_dma_descriptor_read_agent_cp_data),           //          .data
		.sink_startofpacket (rx_dma_descriptor_read_agent_cp_startofpacket),  //          .startofpacket
		.sink_endofpacket   (rx_dma_descriptor_read_agent_cp_endofpacket),    //          .endofpacket
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_003_src_ready),                           //       src.ready
		.src_valid          (router_003_src_valid),                           //          .valid
		.src_data           (router_003_src_data),                            //          .data
		.src_channel        (router_003_src_channel),                         //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                      //          .endofpacket
	);

	eth_nios_v2_mm_interconnect_0_router_003 router_004 (
		.sink_ready         (tx_dma_descriptor_read_agent_cp_ready),          //      sink.ready
		.sink_valid         (tx_dma_descriptor_read_agent_cp_valid),          //          .valid
		.sink_data          (tx_dma_descriptor_read_agent_cp_data),           //          .data
		.sink_startofpacket (tx_dma_descriptor_read_agent_cp_startofpacket),  //          .startofpacket
		.sink_endofpacket   (tx_dma_descriptor_read_agent_cp_endofpacket),    //          .endofpacket
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_004_src_ready),                           //       src.ready
		.src_valid          (router_004_src_valid),                           //          .valid
		.src_data           (router_004_src_data),                            //          .data
		.src_channel        (router_004_src_channel),                         //          .channel
		.src_startofpacket  (router_004_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                      //          .endofpacket
	);

	eth_nios_v2_mm_interconnect_0_router_003 router_005 (
		.sink_ready         (rx_dma_descriptor_write_agent_cp_ready),         //      sink.ready
		.sink_valid         (rx_dma_descriptor_write_agent_cp_valid),         //          .valid
		.sink_data          (rx_dma_descriptor_write_agent_cp_data),          //          .data
		.sink_startofpacket (rx_dma_descriptor_write_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (rx_dma_descriptor_write_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_005_src_ready),                           //       src.ready
		.src_valid          (router_005_src_valid),                           //          .valid
		.src_data           (router_005_src_data),                            //          .data
		.src_channel        (router_005_src_channel),                         //          .channel
		.src_startofpacket  (router_005_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                      //          .endofpacket
	);

	eth_nios_v2_mm_interconnect_0_router_003 router_006 (
		.sink_ready         (tx_dma_descriptor_write_agent_cp_ready),         //      sink.ready
		.sink_valid         (tx_dma_descriptor_write_agent_cp_valid),         //          .valid
		.sink_data          (tx_dma_descriptor_write_agent_cp_data),          //          .data
		.sink_startofpacket (tx_dma_descriptor_write_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (tx_dma_descriptor_write_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_006_src_ready),                           //       src.ready
		.src_valid          (router_006_src_valid),                           //          .valid
		.src_data           (router_006_src_data),                            //          .data
		.src_channel        (router_006_src_channel),                         //          .channel
		.src_startofpacket  (router_006_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)                      //          .endofpacket
	);

	eth_nios_v2_mm_interconnect_0_router_007 router_007 (
		.sink_ready         (nios2_gen2_0_instruction_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (nios2_gen2_0_instruction_master_agent_cp_valid),         //          .valid
		.sink_data          (nios2_gen2_0_instruction_master_agent_cp_data),          //          .data
		.sink_startofpacket (nios2_gen2_0_instruction_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (nios2_gen2_0_instruction_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                          //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.src_ready          (router_007_src_ready),                                   //       src.ready
		.src_valid          (router_007_src_valid),                                   //          .valid
		.src_data           (router_007_src_data),                                    //          .data
		.src_channel        (router_007_src_channel),                                 //          .channel
		.src_startofpacket  (router_007_src_startofpacket),                           //          .startofpacket
		.src_endofpacket    (router_007_src_endofpacket)                              //          .endofpacket
	);

	eth_nios_v2_mm_interconnect_0_router_008 router_008 (
		.sink_ready         (jtag_uart_0_avalon_jtag_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (jtag_uart_0_avalon_jtag_slave_agent_rp_valid),         //          .valid
		.sink_data          (jtag_uart_0_avalon_jtag_slave_agent_rp_data),          //          .data
		.sink_startofpacket (jtag_uart_0_avalon_jtag_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (jtag_uart_0_avalon_jtag_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                        //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset),       // clk_reset.reset
		.src_ready          (router_008_src_ready),                                 //       src.ready
		.src_valid          (router_008_src_valid),                                 //          .valid
		.src_data           (router_008_src_data),                                  //          .data
		.src_channel        (router_008_src_channel),                               //          .channel
		.src_startofpacket  (router_008_src_startofpacket),                         //          .startofpacket
		.src_endofpacket    (router_008_src_endofpacket)                            //          .endofpacket
	);

	eth_nios_v2_mm_interconnect_0_router_008 router_009 (
		.sink_ready         (tse_control_port_agent_rp_ready),                //      sink.ready
		.sink_valid         (tse_control_port_agent_rp_valid),                //          .valid
		.sink_data          (tse_control_port_agent_rp_data),                 //          .data
		.sink_startofpacket (tse_control_port_agent_rp_startofpacket),        //          .startofpacket
		.sink_endofpacket   (tse_control_port_agent_rp_endofpacket),          //          .endofpacket
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_009_src_ready),                           //       src.ready
		.src_valid          (router_009_src_valid),                           //          .valid
		.src_data           (router_009_src_data),                            //          .data
		.src_channel        (router_009_src_channel),                         //          .channel
		.src_startofpacket  (router_009_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_009_src_endofpacket)                      //          .endofpacket
	);

	eth_nios_v2_mm_interconnect_0_router_008 router_010 (
		.sink_ready         (tx_dma_csr_agent_rp_ready),                      //      sink.ready
		.sink_valid         (tx_dma_csr_agent_rp_valid),                      //          .valid
		.sink_data          (tx_dma_csr_agent_rp_data),                       //          .data
		.sink_startofpacket (tx_dma_csr_agent_rp_startofpacket),              //          .startofpacket
		.sink_endofpacket   (tx_dma_csr_agent_rp_endofpacket),                //          .endofpacket
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_010_src_ready),                           //       src.ready
		.src_valid          (router_010_src_valid),                           //          .valid
		.src_data           (router_010_src_data),                            //          .data
		.src_channel        (router_010_src_channel),                         //          .channel
		.src_startofpacket  (router_010_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_010_src_endofpacket)                      //          .endofpacket
	);

	eth_nios_v2_mm_interconnect_0_router_008 router_011 (
		.sink_ready         (rx_dma_csr_agent_rp_ready),                      //      sink.ready
		.sink_valid         (rx_dma_csr_agent_rp_valid),                      //          .valid
		.sink_data          (rx_dma_csr_agent_rp_data),                       //          .data
		.sink_startofpacket (rx_dma_csr_agent_rp_startofpacket),              //          .startofpacket
		.sink_endofpacket   (rx_dma_csr_agent_rp_endofpacket),                //          .endofpacket
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_011_src_ready),                           //       src.ready
		.src_valid          (router_011_src_valid),                           //          .valid
		.src_data           (router_011_src_data),                            //          .data
		.src_channel        (router_011_src_channel),                         //          .channel
		.src_startofpacket  (router_011_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_011_src_endofpacket)                      //          .endofpacket
	);

	eth_nios_v2_mm_interconnect_0_router_012 router_012 (
		.sink_ready         (nios2_gen2_0_debug_mem_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (nios2_gen2_0_debug_mem_slave_agent_rp_valid),         //          .valid
		.sink_data          (nios2_gen2_0_debug_mem_slave_agent_rp_data),          //          .data
		.sink_startofpacket (nios2_gen2_0_debug_mem_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (nios2_gen2_0_debug_mem_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.src_ready          (router_012_src_ready),                                //       src.ready
		.src_valid          (router_012_src_valid),                                //          .valid
		.src_data           (router_012_src_data),                                 //          .data
		.src_channel        (router_012_src_channel),                              //          .channel
		.src_startofpacket  (router_012_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_012_src_endofpacket)                           //          .endofpacket
	);

	eth_nios_v2_mm_interconnect_0_router_013 router_013 (
		.sink_ready         (system_ram_s1_agent_rp_ready),                   //      sink.ready
		.sink_valid         (system_ram_s1_agent_rp_valid),                   //          .valid
		.sink_data          (system_ram_s1_agent_rp_data),                    //          .data
		.sink_startofpacket (system_ram_s1_agent_rp_startofpacket),           //          .startofpacket
		.sink_endofpacket   (system_ram_s1_agent_rp_endofpacket),             //          .endofpacket
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_013_src_ready),                           //       src.ready
		.src_valid          (router_013_src_valid),                           //          .valid
		.src_data           (router_013_src_data),                            //          .data
		.src_channel        (router_013_src_channel),                         //          .channel
		.src_startofpacket  (router_013_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_013_src_endofpacket)                      //          .endofpacket
	);

	eth_nios_v2_mm_interconnect_0_router_014 router_014 (
		.sink_ready         (header_ram_s1_agent_rp_ready),                   //      sink.ready
		.sink_valid         (header_ram_s1_agent_rp_valid),                   //          .valid
		.sink_data          (header_ram_s1_agent_rp_data),                    //          .data
		.sink_startofpacket (header_ram_s1_agent_rp_startofpacket),           //          .startofpacket
		.sink_endofpacket   (header_ram_s1_agent_rp_endofpacket),             //          .endofpacket
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_014_src_ready),                           //       src.ready
		.src_valid          (router_014_src_valid),                           //          .valid
		.src_data           (router_014_src_data),                            //          .data
		.src_channel        (router_014_src_channel),                         //          .channel
		.src_startofpacket  (router_014_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_014_src_endofpacket)                      //          .endofpacket
	);

	eth_nios_v2_mm_interconnect_0_router_008 router_015 (
		.sink_ready         (timer_0_s1_agent_rp_ready),                      //      sink.ready
		.sink_valid         (timer_0_s1_agent_rp_valid),                      //          .valid
		.sink_data          (timer_0_s1_agent_rp_data),                       //          .data
		.sink_startofpacket (timer_0_s1_agent_rp_startofpacket),              //          .startofpacket
		.sink_endofpacket   (timer_0_s1_agent_rp_endofpacket),                //          .endofpacket
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_015_src_ready),                           //       src.ready
		.src_valid          (router_015_src_valid),                           //          .valid
		.src_data           (router_015_src_data),                            //          .data
		.src_channel        (router_015_src_channel),                         //          .channel
		.src_startofpacket  (router_015_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_015_src_endofpacket)                      //          .endofpacket
	);

	eth_nios_v2_mm_interconnect_0_router_016 router_016 (
		.sink_ready         (rx_buf_ram_s1_agent_rp_ready),                   //      sink.ready
		.sink_valid         (rx_buf_ram_s1_agent_rp_valid),                   //          .valid
		.sink_data          (rx_buf_ram_s1_agent_rp_data),                    //          .data
		.sink_startofpacket (rx_buf_ram_s1_agent_rp_startofpacket),           //          .startofpacket
		.sink_endofpacket   (rx_buf_ram_s1_agent_rp_endofpacket),             //          .endofpacket
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_016_src_ready),                           //       src.ready
		.src_valid          (router_016_src_valid),                           //          .valid
		.src_data           (router_016_src_data),                            //          .data
		.src_channel        (router_016_src_channel),                         //          .channel
		.src_startofpacket  (router_016_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_016_src_endofpacket)                      //          .endofpacket
	);

	eth_nios_v2_mm_interconnect_0_router_008 router_017 (
		.sink_ready         (eth_irq_pio_s1_agent_rp_ready),                  //      sink.ready
		.sink_valid         (eth_irq_pio_s1_agent_rp_valid),                  //          .valid
		.sink_data          (eth_irq_pio_s1_agent_rp_data),                   //          .data
		.sink_startofpacket (eth_irq_pio_s1_agent_rp_startofpacket),          //          .startofpacket
		.sink_endofpacket   (eth_irq_pio_s1_agent_rp_endofpacket),            //          .endofpacket
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_017_src_ready),                           //       src.ready
		.src_valid          (router_017_src_valid),                           //          .valid
		.src_data           (router_017_src_data),                            //          .data
		.src_channel        (router_017_src_channel),                         //          .channel
		.src_startofpacket  (router_017_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_017_src_endofpacket)                      //          .endofpacket
	);

	eth_nios_v2_mm_interconnect_0_router_018 router_018 (
		.sink_ready         (tx_buff_ram_s1_agent_rp_ready),                  //      sink.ready
		.sink_valid         (tx_buff_ram_s1_agent_rp_valid),                  //          .valid
		.sink_data          (tx_buff_ram_s1_agent_rp_data),                   //          .data
		.sink_startofpacket (tx_buff_ram_s1_agent_rp_startofpacket),          //          .startofpacket
		.sink_endofpacket   (tx_buff_ram_s1_agent_rp_endofpacket),            //          .endofpacket
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_018_src_ready),                           //       src.ready
		.src_valid          (router_018_src_valid),                           //          .valid
		.src_data           (router_018_src_data),                            //          .data
		.src_channel        (router_018_src_channel),                         //          .channel
		.src_startofpacket  (router_018_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_018_src_endofpacket)                      //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (93),
		.PKT_SRC_ID_H              (92),
		.PKT_SRC_ID_L              (89),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.MAX_OUTSTANDING_RESPONSES (3),
		.PIPELINED                 (0),
		.ST_DATA_W                 (110),
		.ST_CHANNEL_W              (11),
		.VALID_WIDTH               (11),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) nios2_gen2_0_data_master_limiter (
		.clk                    (clk_0_clk_clk),                                          //       clk.clk
		.reset                  (nios2_gen2_0_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.cmd_sink_ready         (router_src_ready),                                       //  cmd_sink.ready
		.cmd_sink_valid         (router_src_valid),                                       //          .valid
		.cmd_sink_data          (router_src_data),                                        //          .data
		.cmd_sink_channel       (router_src_channel),                                     //          .channel
		.cmd_sink_startofpacket (router_src_startofpacket),                               //          .startofpacket
		.cmd_sink_endofpacket   (router_src_endofpacket),                                 //          .endofpacket
		.cmd_src_ready          (nios2_gen2_0_data_master_limiter_cmd_src_ready),         //   cmd_src.ready
		.cmd_src_data           (nios2_gen2_0_data_master_limiter_cmd_src_data),          //          .data
		.cmd_src_channel        (nios2_gen2_0_data_master_limiter_cmd_src_channel),       //          .channel
		.cmd_src_startofpacket  (nios2_gen2_0_data_master_limiter_cmd_src_startofpacket), //          .startofpacket
		.cmd_src_endofpacket    (nios2_gen2_0_data_master_limiter_cmd_src_endofpacket),   //          .endofpacket
		.rsp_sink_ready         (rsp_mux_src_ready),                                      //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_src_valid),                                      //          .valid
		.rsp_sink_channel       (rsp_mux_src_channel),                                    //          .channel
		.rsp_sink_data          (rsp_mux_src_data),                                       //          .data
		.rsp_sink_startofpacket (rsp_mux_src_startofpacket),                              //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_src_endofpacket),                                //          .endofpacket
		.rsp_src_ready          (nios2_gen2_0_data_master_limiter_rsp_src_ready),         //   rsp_src.ready
		.rsp_src_valid          (nios2_gen2_0_data_master_limiter_rsp_src_valid),         //          .valid
		.rsp_src_data           (nios2_gen2_0_data_master_limiter_rsp_src_data),          //          .data
		.rsp_src_channel        (nios2_gen2_0_data_master_limiter_rsp_src_channel),       //          .channel
		.rsp_src_startofpacket  (nios2_gen2_0_data_master_limiter_rsp_src_startofpacket), //          .startofpacket
		.rsp_src_endofpacket    (nios2_gen2_0_data_master_limiter_rsp_src_endofpacket),   //          .endofpacket
		.cmd_src_valid          (nios2_gen2_0_data_master_limiter_cmd_valid_data)         // cmd_valid.data
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (69),
		.PKT_DEST_ID_L             (66),
		.PKT_SRC_ID_H              (65),
		.PKT_SRC_ID_L              (62),
		.PKT_BYTE_CNT_H            (49),
		.PKT_BYTE_CNT_L            (47),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_TRANS_POSTED          (42),
		.PKT_TRANS_WRITE           (43),
		.MAX_OUTSTANDING_RESPONSES (3),
		.PIPELINED                 (0),
		.ST_DATA_W                 (83),
		.ST_CHANNEL_W              (11),
		.VALID_WIDTH               (11),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) tx_dma_m_read_limiter (
		.clk                    (clk_0_clk_clk),                                  //       clk.clk
		.reset                  (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (router_002_src_ready),                           //  cmd_sink.ready
		.cmd_sink_valid         (router_002_src_valid),                           //          .valid
		.cmd_sink_data          (router_002_src_data),                            //          .data
		.cmd_sink_channel       (router_002_src_channel),                         //          .channel
		.cmd_sink_startofpacket (router_002_src_startofpacket),                   //          .startofpacket
		.cmd_sink_endofpacket   (router_002_src_endofpacket),                     //          .endofpacket
		.cmd_src_ready          (tx_dma_m_read_limiter_cmd_src_ready),            //   cmd_src.ready
		.cmd_src_data           (tx_dma_m_read_limiter_cmd_src_data),             //          .data
		.cmd_src_channel        (tx_dma_m_read_limiter_cmd_src_channel),          //          .channel
		.cmd_src_startofpacket  (tx_dma_m_read_limiter_cmd_src_startofpacket),    //          .startofpacket
		.cmd_src_endofpacket    (tx_dma_m_read_limiter_cmd_src_endofpacket),      //          .endofpacket
		.rsp_sink_ready         (rsp_mux_002_src_ready),                          //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_002_src_valid),                          //          .valid
		.rsp_sink_channel       (rsp_mux_002_src_channel),                        //          .channel
		.rsp_sink_data          (rsp_mux_002_src_data),                           //          .data
		.rsp_sink_startofpacket (rsp_mux_002_src_startofpacket),                  //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_002_src_endofpacket),                    //          .endofpacket
		.rsp_src_ready          (tx_dma_m_read_limiter_rsp_src_ready),            //   rsp_src.ready
		.rsp_src_valid          (tx_dma_m_read_limiter_rsp_src_valid),            //          .valid
		.rsp_src_data           (tx_dma_m_read_limiter_rsp_src_data),             //          .data
		.rsp_src_channel        (tx_dma_m_read_limiter_rsp_src_channel),          //          .channel
		.rsp_src_startofpacket  (tx_dma_m_read_limiter_rsp_src_startofpacket),    //          .startofpacket
		.rsp_src_endofpacket    (tx_dma_m_read_limiter_rsp_src_endofpacket),      //          .endofpacket
		.cmd_src_valid          (tx_dma_m_read_limiter_cmd_valid_data)            // cmd_valid.data
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (93),
		.PKT_SRC_ID_H              (92),
		.PKT_SRC_ID_L              (89),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.MAX_OUTSTANDING_RESPONSES (1),
		.PIPELINED                 (0),
		.ST_DATA_W                 (110),
		.ST_CHANNEL_W              (11),
		.VALID_WIDTH               (11),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) nios2_gen2_0_instruction_master_limiter (
		.clk                    (clk_0_clk_clk),                                                 //       clk.clk
		.reset                  (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                // clk_reset.reset
		.cmd_sink_ready         (router_007_src_ready),                                          //  cmd_sink.ready
		.cmd_sink_valid         (router_007_src_valid),                                          //          .valid
		.cmd_sink_data          (router_007_src_data),                                           //          .data
		.cmd_sink_channel       (router_007_src_channel),                                        //          .channel
		.cmd_sink_startofpacket (router_007_src_startofpacket),                                  //          .startofpacket
		.cmd_sink_endofpacket   (router_007_src_endofpacket),                                    //          .endofpacket
		.cmd_src_ready          (nios2_gen2_0_instruction_master_limiter_cmd_src_ready),         //   cmd_src.ready
		.cmd_src_data           (nios2_gen2_0_instruction_master_limiter_cmd_src_data),          //          .data
		.cmd_src_channel        (nios2_gen2_0_instruction_master_limiter_cmd_src_channel),       //          .channel
		.cmd_src_startofpacket  (nios2_gen2_0_instruction_master_limiter_cmd_src_startofpacket), //          .startofpacket
		.cmd_src_endofpacket    (nios2_gen2_0_instruction_master_limiter_cmd_src_endofpacket),   //          .endofpacket
		.rsp_sink_ready         (rsp_mux_007_src_ready),                                         //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_007_src_valid),                                         //          .valid
		.rsp_sink_channel       (rsp_mux_007_src_channel),                                       //          .channel
		.rsp_sink_data          (rsp_mux_007_src_data),                                          //          .data
		.rsp_sink_startofpacket (rsp_mux_007_src_startofpacket),                                 //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_007_src_endofpacket),                                   //          .endofpacket
		.rsp_src_ready          (nios2_gen2_0_instruction_master_limiter_rsp_src_ready),         //   rsp_src.ready
		.rsp_src_valid          (nios2_gen2_0_instruction_master_limiter_rsp_src_valid),         //          .valid
		.rsp_src_data           (nios2_gen2_0_instruction_master_limiter_rsp_src_data),          //          .data
		.rsp_src_channel        (nios2_gen2_0_instruction_master_limiter_rsp_src_channel),       //          .channel
		.rsp_src_startofpacket  (nios2_gen2_0_instruction_master_limiter_rsp_src_startofpacket), //          .startofpacket
		.rsp_src_endofpacket    (nios2_gen2_0_instruction_master_limiter_rsp_src_endofpacket),   //          .endofpacket
		.cmd_src_valid          (nios2_gen2_0_instruction_master_limiter_cmd_valid_data)         // cmd_valid.data
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (40),
		.PKT_ADDR_L                (9),
		.PKT_BEGIN_BURST           (60),
		.PKT_BYTE_CNT_H            (49),
		.PKT_BYTE_CNT_L            (47),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_BURST_SIZE_H          (55),
		.PKT_BURST_SIZE_L          (53),
		.PKT_BURST_TYPE_H          (57),
		.PKT_BURST_TYPE_L          (56),
		.PKT_BURSTWRAP_H           (52),
		.PKT_BURSTWRAP_L           (50),
		.PKT_TRANS_COMPRESSED_READ (41),
		.PKT_TRANS_WRITE           (43),
		.PKT_TRANS_READ            (44),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (83),
		.ST_CHANNEL_W              (11),
		.OUT_BYTE_CNT_H            (47),
		.OUT_BURSTWRAP_H           (52),
		.COMPRESSED_READ_SUPPORT   (0),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (7),
		.BURSTWRAP_CONST_VALUE     (7),
		.ADAPTER_VERSION           ("13.1")
	) header_ram_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                     //       cr0.clk
		.reset                 (nios2_gen2_0_reset_reset_bridge_in_reset_reset),    // cr0_reset.reset
		.sink0_valid           (cmd_mux_006_src_valid),                             //     sink0.valid
		.sink0_data            (cmd_mux_006_src_data),                              //          .data
		.sink0_channel         (cmd_mux_006_src_channel),                           //          .channel
		.sink0_startofpacket   (cmd_mux_006_src_startofpacket),                     //          .startofpacket
		.sink0_endofpacket     (cmd_mux_006_src_endofpacket),                       //          .endofpacket
		.sink0_ready           (cmd_mux_006_src_ready),                             //          .ready
		.source0_valid         (header_ram_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (header_ram_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (header_ram_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (header_ram_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (header_ram_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (header_ram_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (40),
		.PKT_ADDR_L                (9),
		.PKT_BEGIN_BURST           (60),
		.PKT_BYTE_CNT_H            (49),
		.PKT_BYTE_CNT_L            (47),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_BURST_SIZE_H          (55),
		.PKT_BURST_SIZE_L          (53),
		.PKT_BURST_TYPE_H          (57),
		.PKT_BURST_TYPE_L          (56),
		.PKT_BURSTWRAP_H           (52),
		.PKT_BURSTWRAP_L           (50),
		.PKT_TRANS_COMPRESSED_READ (41),
		.PKT_TRANS_WRITE           (43),
		.PKT_TRANS_READ            (44),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (83),
		.ST_CHANNEL_W              (11),
		.OUT_BYTE_CNT_H            (47),
		.OUT_BURSTWRAP_H           (52),
		.COMPRESSED_READ_SUPPORT   (0),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (7),
		.BURSTWRAP_CONST_VALUE     (7),
		.ADAPTER_VERSION           ("13.1")
	) rx_buf_ram_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                     //       cr0.clk
		.reset                 (nios2_gen2_0_reset_reset_bridge_in_reset_reset),    // cr0_reset.reset
		.sink0_valid           (cmd_mux_008_src_valid),                             //     sink0.valid
		.sink0_data            (cmd_mux_008_src_data),                              //          .data
		.sink0_channel         (cmd_mux_008_src_channel),                           //          .channel
		.sink0_startofpacket   (cmd_mux_008_src_startofpacket),                     //          .startofpacket
		.sink0_endofpacket     (cmd_mux_008_src_endofpacket),                       //          .endofpacket
		.sink0_ready           (cmd_mux_008_src_ready),                             //          .ready
		.source0_valid         (rx_buf_ram_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (rx_buf_ram_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (rx_buf_ram_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (rx_buf_ram_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (rx_buf_ram_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (rx_buf_ram_s1_burst_adapter_source0_ready)          //          .ready
	);

	eth_nios_v2_mm_interconnect_0_cmd_demux cmd_demux (
		.clk                (clk_0_clk_clk),                                          //        clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset),         //  clk_reset.reset
		.sink_ready         (nios2_gen2_0_data_master_limiter_cmd_src_ready),         //       sink.ready
		.sink_channel       (nios2_gen2_0_data_master_limiter_cmd_src_channel),       //           .channel
		.sink_data          (nios2_gen2_0_data_master_limiter_cmd_src_data),          //           .data
		.sink_startofpacket (nios2_gen2_0_data_master_limiter_cmd_src_startofpacket), //           .startofpacket
		.sink_endofpacket   (nios2_gen2_0_data_master_limiter_cmd_src_endofpacket),   //           .endofpacket
		.sink_valid         (nios2_gen2_0_data_master_limiter_cmd_valid_data),        // sink_valid.data
		.src0_ready         (cmd_demux_src0_ready),                                   //       src0.ready
		.src0_valid         (cmd_demux_src0_valid),                                   //           .valid
		.src0_data          (cmd_demux_src0_data),                                    //           .data
		.src0_channel       (cmd_demux_src0_channel),                                 //           .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                           //           .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket),                             //           .endofpacket
		.src1_ready         (cmd_demux_src1_ready),                                   //       src1.ready
		.src1_valid         (cmd_demux_src1_valid),                                   //           .valid
		.src1_data          (cmd_demux_src1_data),                                    //           .data
		.src1_channel       (cmd_demux_src1_channel),                                 //           .channel
		.src1_startofpacket (cmd_demux_src1_startofpacket),                           //           .startofpacket
		.src1_endofpacket   (cmd_demux_src1_endofpacket),                             //           .endofpacket
		.src2_ready         (cmd_demux_src2_ready),                                   //       src2.ready
		.src2_valid         (cmd_demux_src2_valid),                                   //           .valid
		.src2_data          (cmd_demux_src2_data),                                    //           .data
		.src2_channel       (cmd_demux_src2_channel),                                 //           .channel
		.src2_startofpacket (cmd_demux_src2_startofpacket),                           //           .startofpacket
		.src2_endofpacket   (cmd_demux_src2_endofpacket),                             //           .endofpacket
		.src3_ready         (cmd_demux_src3_ready),                                   //       src3.ready
		.src3_valid         (cmd_demux_src3_valid),                                   //           .valid
		.src3_data          (cmd_demux_src3_data),                                    //           .data
		.src3_channel       (cmd_demux_src3_channel),                                 //           .channel
		.src3_startofpacket (cmd_demux_src3_startofpacket),                           //           .startofpacket
		.src3_endofpacket   (cmd_demux_src3_endofpacket),                             //           .endofpacket
		.src4_ready         (cmd_demux_src4_ready),                                   //       src4.ready
		.src4_valid         (cmd_demux_src4_valid),                                   //           .valid
		.src4_data          (cmd_demux_src4_data),                                    //           .data
		.src4_channel       (cmd_demux_src4_channel),                                 //           .channel
		.src4_startofpacket (cmd_demux_src4_startofpacket),                           //           .startofpacket
		.src4_endofpacket   (cmd_demux_src4_endofpacket),                             //           .endofpacket
		.src5_ready         (cmd_demux_src5_ready),                                   //       src5.ready
		.src5_valid         (cmd_demux_src5_valid),                                   //           .valid
		.src5_data          (cmd_demux_src5_data),                                    //           .data
		.src5_channel       (cmd_demux_src5_channel),                                 //           .channel
		.src5_startofpacket (cmd_demux_src5_startofpacket),                           //           .startofpacket
		.src5_endofpacket   (cmd_demux_src5_endofpacket),                             //           .endofpacket
		.src6_ready         (cmd_demux_src6_ready),                                   //       src6.ready
		.src6_valid         (cmd_demux_src6_valid),                                   //           .valid
		.src6_data          (cmd_demux_src6_data),                                    //           .data
		.src6_channel       (cmd_demux_src6_channel),                                 //           .channel
		.src6_startofpacket (cmd_demux_src6_startofpacket),                           //           .startofpacket
		.src6_endofpacket   (cmd_demux_src6_endofpacket),                             //           .endofpacket
		.src7_ready         (cmd_demux_src7_ready),                                   //       src7.ready
		.src7_valid         (cmd_demux_src7_valid),                                   //           .valid
		.src7_data          (cmd_demux_src7_data),                                    //           .data
		.src7_channel       (cmd_demux_src7_channel),                                 //           .channel
		.src7_startofpacket (cmd_demux_src7_startofpacket),                           //           .startofpacket
		.src7_endofpacket   (cmd_demux_src7_endofpacket),                             //           .endofpacket
		.src8_ready         (cmd_demux_src8_ready),                                   //       src8.ready
		.src8_valid         (cmd_demux_src8_valid),                                   //           .valid
		.src8_data          (cmd_demux_src8_data),                                    //           .data
		.src8_channel       (cmd_demux_src8_channel),                                 //           .channel
		.src8_startofpacket (cmd_demux_src8_startofpacket),                           //           .startofpacket
		.src8_endofpacket   (cmd_demux_src8_endofpacket),                             //           .endofpacket
		.src9_ready         (cmd_demux_src9_ready),                                   //       src9.ready
		.src9_valid         (cmd_demux_src9_valid),                                   //           .valid
		.src9_data          (cmd_demux_src9_data),                                    //           .data
		.src9_channel       (cmd_demux_src9_channel),                                 //           .channel
		.src9_startofpacket (cmd_demux_src9_startofpacket),                           //           .startofpacket
		.src9_endofpacket   (cmd_demux_src9_endofpacket)                              //           .endofpacket
	);

	eth_nios_v2_mm_interconnect_0_cmd_demux_001 cmd_demux_001 (
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_001_src_ready),                           //      sink.ready
		.sink_channel       (router_001_src_channel),                         //          .channel
		.sink_data          (router_001_src_data),                            //          .data
		.sink_startofpacket (router_001_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_001_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_001_src_valid),                           //          .valid
		.src0_ready         (cmd_demux_001_src0_ready),                       //      src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),                       //          .valid
		.src0_data          (cmd_demux_001_src0_data),                        //          .data
		.src0_channel       (cmd_demux_001_src0_channel),                     //          .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket)                  //          .endofpacket
	);

	eth_nios_v2_mm_interconnect_0_cmd_demux_002 cmd_demux_002 (
		.clk                (clk_0_clk_clk),                                  //        clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), //  clk_reset.reset
		.sink_ready         (tx_dma_m_read_limiter_cmd_src_ready),            //       sink.ready
		.sink_channel       (tx_dma_m_read_limiter_cmd_src_channel),          //           .channel
		.sink_data          (tx_dma_m_read_limiter_cmd_src_data),             //           .data
		.sink_startofpacket (tx_dma_m_read_limiter_cmd_src_startofpacket),    //           .startofpacket
		.sink_endofpacket   (tx_dma_m_read_limiter_cmd_src_endofpacket),      //           .endofpacket
		.sink_valid         (tx_dma_m_read_limiter_cmd_valid_data),           // sink_valid.data
		.src0_ready         (cmd_demux_002_src0_ready),                       //       src0.ready
		.src0_valid         (cmd_demux_002_src0_valid),                       //           .valid
		.src0_data          (cmd_demux_002_src0_data),                        //           .data
		.src0_channel       (cmd_demux_002_src0_channel),                     //           .channel
		.src0_startofpacket (cmd_demux_002_src0_startofpacket),               //           .startofpacket
		.src0_endofpacket   (cmd_demux_002_src0_endofpacket),                 //           .endofpacket
		.src1_ready         (cmd_demux_002_src1_ready),                       //       src1.ready
		.src1_valid         (cmd_demux_002_src1_valid),                       //           .valid
		.src1_data          (cmd_demux_002_src1_data),                        //           .data
		.src1_channel       (cmd_demux_002_src1_channel),                     //           .channel
		.src1_startofpacket (cmd_demux_002_src1_startofpacket),               //           .startofpacket
		.src1_endofpacket   (cmd_demux_002_src1_endofpacket)                  //           .endofpacket
	);

	eth_nios_v2_mm_interconnect_0_cmd_demux_003 cmd_demux_003 (
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_003_src_ready),                           //      sink.ready
		.sink_channel       (router_003_src_channel),                         //          .channel
		.sink_data          (router_003_src_data),                            //          .data
		.sink_startofpacket (router_003_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_003_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_003_src_valid),                           //          .valid
		.src0_ready         (cmd_demux_003_src0_ready),                       //      src0.ready
		.src0_valid         (cmd_demux_003_src0_valid),                       //          .valid
		.src0_data          (cmd_demux_003_src0_data),                        //          .data
		.src0_channel       (cmd_demux_003_src0_channel),                     //          .channel
		.src0_startofpacket (cmd_demux_003_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (cmd_demux_003_src0_endofpacket)                  //          .endofpacket
	);

	eth_nios_v2_mm_interconnect_0_cmd_demux_003 cmd_demux_004 (
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_004_src_ready),                           //      sink.ready
		.sink_channel       (router_004_src_channel),                         //          .channel
		.sink_data          (router_004_src_data),                            //          .data
		.sink_startofpacket (router_004_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_004_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_004_src_valid),                           //          .valid
		.src0_ready         (cmd_demux_004_src0_ready),                       //      src0.ready
		.src0_valid         (cmd_demux_004_src0_valid),                       //          .valid
		.src0_data          (cmd_demux_004_src0_data),                        //          .data
		.src0_channel       (cmd_demux_004_src0_channel),                     //          .channel
		.src0_startofpacket (cmd_demux_004_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (cmd_demux_004_src0_endofpacket)                  //          .endofpacket
	);

	eth_nios_v2_mm_interconnect_0_cmd_demux_003 cmd_demux_005 (
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_005_src_ready),                           //      sink.ready
		.sink_channel       (router_005_src_channel),                         //          .channel
		.sink_data          (router_005_src_data),                            //          .data
		.sink_startofpacket (router_005_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_005_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_005_src_valid),                           //          .valid
		.src0_ready         (cmd_demux_005_src0_ready),                       //      src0.ready
		.src0_valid         (cmd_demux_005_src0_valid),                       //          .valid
		.src0_data          (cmd_demux_005_src0_data),                        //          .data
		.src0_channel       (cmd_demux_005_src0_channel),                     //          .channel
		.src0_startofpacket (cmd_demux_005_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (cmd_demux_005_src0_endofpacket)                  //          .endofpacket
	);

	eth_nios_v2_mm_interconnect_0_cmd_demux_003 cmd_demux_006 (
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_006_src_ready),                           //      sink.ready
		.sink_channel       (router_006_src_channel),                         //          .channel
		.sink_data          (router_006_src_data),                            //          .data
		.sink_startofpacket (router_006_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_006_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_006_src_valid),                           //          .valid
		.src0_ready         (cmd_demux_006_src0_ready),                       //      src0.ready
		.src0_valid         (cmd_demux_006_src0_valid),                       //          .valid
		.src0_data          (cmd_demux_006_src0_data),                        //          .data
		.src0_channel       (cmd_demux_006_src0_channel),                     //          .channel
		.src0_startofpacket (cmd_demux_006_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (cmd_demux_006_src0_endofpacket)                  //          .endofpacket
	);

	eth_nios_v2_mm_interconnect_0_cmd_demux_007 cmd_demux_007 (
		.clk                (clk_0_clk_clk),                                                 //        clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                //  clk_reset.reset
		.sink_ready         (nios2_gen2_0_instruction_master_limiter_cmd_src_ready),         //       sink.ready
		.sink_channel       (nios2_gen2_0_instruction_master_limiter_cmd_src_channel),       //           .channel
		.sink_data          (nios2_gen2_0_instruction_master_limiter_cmd_src_data),          //           .data
		.sink_startofpacket (nios2_gen2_0_instruction_master_limiter_cmd_src_startofpacket), //           .startofpacket
		.sink_endofpacket   (nios2_gen2_0_instruction_master_limiter_cmd_src_endofpacket),   //           .endofpacket
		.sink_valid         (nios2_gen2_0_instruction_master_limiter_cmd_valid_data),        // sink_valid.data
		.src0_ready         (cmd_demux_007_src0_ready),                                      //       src0.ready
		.src0_valid         (cmd_demux_007_src0_valid),                                      //           .valid
		.src0_data          (cmd_demux_007_src0_data),                                       //           .data
		.src0_channel       (cmd_demux_007_src0_channel),                                    //           .channel
		.src0_startofpacket (cmd_demux_007_src0_startofpacket),                              //           .startofpacket
		.src0_endofpacket   (cmd_demux_007_src0_endofpacket),                                //           .endofpacket
		.src1_ready         (cmd_demux_007_src1_ready),                                      //       src1.ready
		.src1_valid         (cmd_demux_007_src1_valid),                                      //           .valid
		.src1_data          (cmd_demux_007_src1_data),                                       //           .data
		.src1_channel       (cmd_demux_007_src1_channel),                                    //           .channel
		.src1_startofpacket (cmd_demux_007_src1_startofpacket),                              //           .startofpacket
		.src1_endofpacket   (cmd_demux_007_src1_endofpacket)                                 //           .endofpacket
	);

	eth_nios_v2_mm_interconnect_0_cmd_mux cmd_mux (
		.clk                 (clk_0_clk_clk),                                  //       clk.clk
		.reset               (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                              //       src.ready
		.src_valid           (cmd_mux_src_valid),                              //          .valid
		.src_data            (cmd_mux_src_data),                               //          .data
		.src_channel         (cmd_mux_src_channel),                            //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                      //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                        //          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                           //     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                           //          .valid
		.sink0_channel       (cmd_demux_src0_channel),                         //          .channel
		.sink0_data          (cmd_demux_src0_data),                            //          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket)                      //          .endofpacket
	);

	eth_nios_v2_mm_interconnect_0_cmd_mux cmd_mux_001 (
		.clk                 (clk_0_clk_clk),                                  //       clk.clk
		.reset               (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                          //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                          //          .valid
		.src_data            (cmd_mux_001_src_data),                           //          .data
		.src_channel         (cmd_mux_001_src_channel),                        //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_demux_src1_ready),                           //     sink0.ready
		.sink0_valid         (cmd_demux_src1_valid),                           //          .valid
		.sink0_channel       (cmd_demux_src1_channel),                         //          .channel
		.sink0_data          (cmd_demux_src1_data),                            //          .data
		.sink0_startofpacket (cmd_demux_src1_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src1_endofpacket)                      //          .endofpacket
	);

	eth_nios_v2_mm_interconnect_0_cmd_mux cmd_mux_002 (
		.clk                 (clk_0_clk_clk),                                  //       clk.clk
		.reset               (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                          //       src.ready
		.src_valid           (cmd_mux_002_src_valid),                          //          .valid
		.src_data            (cmd_mux_002_src_data),                           //          .data
		.src_channel         (cmd_mux_002_src_channel),                        //          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_demux_src2_ready),                           //     sink0.ready
		.sink0_valid         (cmd_demux_src2_valid),                           //          .valid
		.sink0_channel       (cmd_demux_src2_channel),                         //          .channel
		.sink0_data          (cmd_demux_src2_data),                            //          .data
		.sink0_startofpacket (cmd_demux_src2_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src2_endofpacket)                      //          .endofpacket
	);

	eth_nios_v2_mm_interconnect_0_cmd_mux cmd_mux_003 (
		.clk                 (clk_0_clk_clk),                                  //       clk.clk
		.reset               (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                          //       src.ready
		.src_valid           (cmd_mux_003_src_valid),                          //          .valid
		.src_data            (cmd_mux_003_src_data),                           //          .data
		.src_channel         (cmd_mux_003_src_channel),                        //          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_demux_src3_ready),                           //     sink0.ready
		.sink0_valid         (cmd_demux_src3_valid),                           //          .valid
		.sink0_channel       (cmd_demux_src3_channel),                         //          .channel
		.sink0_data          (cmd_demux_src3_data),                            //          .data
		.sink0_startofpacket (cmd_demux_src3_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src3_endofpacket)                      //          .endofpacket
	);

	eth_nios_v2_mm_interconnect_0_cmd_mux_004 cmd_mux_004 (
		.clk                 (clk_0_clk_clk),                                  //       clk.clk
		.reset               (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_004_src_ready),                          //       src.ready
		.src_valid           (cmd_mux_004_src_valid),                          //          .valid
		.src_data            (cmd_mux_004_src_data),                           //          .data
		.src_channel         (cmd_mux_004_src_channel),                        //          .channel
		.src_startofpacket   (cmd_mux_004_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_mux_004_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_demux_src4_ready),                           //     sink0.ready
		.sink0_valid         (cmd_demux_src4_valid),                           //          .valid
		.sink0_channel       (cmd_demux_src4_channel),                         //          .channel
		.sink0_data          (cmd_demux_src4_data),                            //          .data
		.sink0_startofpacket (cmd_demux_src4_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src4_endofpacket),                     //          .endofpacket
		.sink1_ready         (cmd_demux_007_src0_ready),                       //     sink1.ready
		.sink1_valid         (cmd_demux_007_src0_valid),                       //          .valid
		.sink1_channel       (cmd_demux_007_src0_channel),                     //          .channel
		.sink1_data          (cmd_demux_007_src0_data),                        //          .data
		.sink1_startofpacket (cmd_demux_007_src0_startofpacket),               //          .startofpacket
		.sink1_endofpacket   (cmd_demux_007_src0_endofpacket)                  //          .endofpacket
	);

	eth_nios_v2_mm_interconnect_0_cmd_mux_005 cmd_mux_005 (
		.clk                 (clk_0_clk_clk),                                  //       clk.clk
		.reset               (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_005_src_ready),                          //       src.ready
		.src_valid           (cmd_mux_005_src_valid),                          //          .valid
		.src_data            (cmd_mux_005_src_data),                           //          .data
		.src_channel         (cmd_mux_005_src_channel),                        //          .channel
		.src_startofpacket   (cmd_mux_005_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_mux_005_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_demux_src5_ready),                           //     sink0.ready
		.sink0_valid         (cmd_demux_src5_valid),                           //          .valid
		.sink0_channel       (cmd_demux_src5_channel),                         //          .channel
		.sink0_data          (cmd_demux_src5_data),                            //          .data
		.sink0_startofpacket (cmd_demux_src5_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src5_endofpacket),                     //          .endofpacket
		.sink1_ready         (cmd_demux_003_src0_ready),                       //     sink1.ready
		.sink1_valid         (cmd_demux_003_src0_valid),                       //          .valid
		.sink1_channel       (cmd_demux_003_src0_channel),                     //          .channel
		.sink1_data          (cmd_demux_003_src0_data),                        //          .data
		.sink1_startofpacket (cmd_demux_003_src0_startofpacket),               //          .startofpacket
		.sink1_endofpacket   (cmd_demux_003_src0_endofpacket),                 //          .endofpacket
		.sink2_ready         (cmd_demux_004_src0_ready),                       //     sink2.ready
		.sink2_valid         (cmd_demux_004_src0_valid),                       //          .valid
		.sink2_channel       (cmd_demux_004_src0_channel),                     //          .channel
		.sink2_data          (cmd_demux_004_src0_data),                        //          .data
		.sink2_startofpacket (cmd_demux_004_src0_startofpacket),               //          .startofpacket
		.sink2_endofpacket   (cmd_demux_004_src0_endofpacket),                 //          .endofpacket
		.sink3_ready         (cmd_demux_005_src0_ready),                       //     sink3.ready
		.sink3_valid         (cmd_demux_005_src0_valid),                       //          .valid
		.sink3_channel       (cmd_demux_005_src0_channel),                     //          .channel
		.sink3_data          (cmd_demux_005_src0_data),                        //          .data
		.sink3_startofpacket (cmd_demux_005_src0_startofpacket),               //          .startofpacket
		.sink3_endofpacket   (cmd_demux_005_src0_endofpacket),                 //          .endofpacket
		.sink4_ready         (cmd_demux_006_src0_ready),                       //     sink4.ready
		.sink4_valid         (cmd_demux_006_src0_valid),                       //          .valid
		.sink4_channel       (cmd_demux_006_src0_channel),                     //          .channel
		.sink4_data          (cmd_demux_006_src0_data),                        //          .data
		.sink4_startofpacket (cmd_demux_006_src0_startofpacket),               //          .startofpacket
		.sink4_endofpacket   (cmd_demux_006_src0_endofpacket),                 //          .endofpacket
		.sink5_ready         (cmd_demux_007_src1_ready),                       //     sink5.ready
		.sink5_valid         (cmd_demux_007_src1_valid),                       //          .valid
		.sink5_channel       (cmd_demux_007_src1_channel),                     //          .channel
		.sink5_data          (cmd_demux_007_src1_data),                        //          .data
		.sink5_startofpacket (cmd_demux_007_src1_startofpacket),               //          .startofpacket
		.sink5_endofpacket   (cmd_demux_007_src1_endofpacket)                  //          .endofpacket
	);

	eth_nios_v2_mm_interconnect_0_cmd_mux_006 cmd_mux_006 (
		.clk                 (clk_0_clk_clk),                                                                 //       clk.clk
		.reset               (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                                // clk_reset.reset
		.src_ready           (cmd_mux_006_src_ready),                                                         //       src.ready
		.src_valid           (cmd_mux_006_src_valid),                                                         //          .valid
		.src_data            (cmd_mux_006_src_data),                                                          //          .data
		.src_channel         (cmd_mux_006_src_channel),                                                       //          .channel
		.src_startofpacket   (cmd_mux_006_src_startofpacket),                                                 //          .startofpacket
		.src_endofpacket     (cmd_mux_006_src_endofpacket),                                                   //          .endofpacket
		.sink0_ready         (nios2_gen2_0_data_master_to_header_ram_s1_cmd_width_adapter_src_ready),         //     sink0.ready
		.sink0_valid         (nios2_gen2_0_data_master_to_header_ram_s1_cmd_width_adapter_src_valid),         //          .valid
		.sink0_channel       (nios2_gen2_0_data_master_to_header_ram_s1_cmd_width_adapter_src_channel),       //          .channel
		.sink0_data          (nios2_gen2_0_data_master_to_header_ram_s1_cmd_width_adapter_src_data),          //          .data
		.sink0_startofpacket (nios2_gen2_0_data_master_to_header_ram_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket   (nios2_gen2_0_data_master_to_header_ram_s1_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink1_ready         (cmd_demux_002_src0_ready),                                                      //     sink1.ready
		.sink1_valid         (cmd_demux_002_src0_valid),                                                      //          .valid
		.sink1_channel       (cmd_demux_002_src0_channel),                                                    //          .channel
		.sink1_data          (cmd_demux_002_src0_data),                                                       //          .data
		.sink1_startofpacket (cmd_demux_002_src0_startofpacket),                                              //          .startofpacket
		.sink1_endofpacket   (cmd_demux_002_src0_endofpacket)                                                 //          .endofpacket
	);

	eth_nios_v2_mm_interconnect_0_cmd_mux cmd_mux_007 (
		.clk                 (clk_0_clk_clk),                                  //       clk.clk
		.reset               (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_007_src_ready),                          //       src.ready
		.src_valid           (cmd_mux_007_src_valid),                          //          .valid
		.src_data            (cmd_mux_007_src_data),                           //          .data
		.src_channel         (cmd_mux_007_src_channel),                        //          .channel
		.src_startofpacket   (cmd_mux_007_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_mux_007_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_demux_src7_ready),                           //     sink0.ready
		.sink0_valid         (cmd_demux_src7_valid),                           //          .valid
		.sink0_channel       (cmd_demux_src7_channel),                         //          .channel
		.sink0_data          (cmd_demux_src7_data),                            //          .data
		.sink0_startofpacket (cmd_demux_src7_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src7_endofpacket)                      //          .endofpacket
	);

	eth_nios_v2_mm_interconnect_0_cmd_mux_006 cmd_mux_008 (
		.clk                 (clk_0_clk_clk),                                                                 //       clk.clk
		.reset               (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                                // clk_reset.reset
		.src_ready           (cmd_mux_008_src_ready),                                                         //       src.ready
		.src_valid           (cmd_mux_008_src_valid),                                                         //          .valid
		.src_data            (cmd_mux_008_src_data),                                                          //          .data
		.src_channel         (cmd_mux_008_src_channel),                                                       //          .channel
		.src_startofpacket   (cmd_mux_008_src_startofpacket),                                                 //          .startofpacket
		.src_endofpacket     (cmd_mux_008_src_endofpacket),                                                   //          .endofpacket
		.sink0_ready         (nios2_gen2_0_data_master_to_rx_buf_ram_s1_cmd_width_adapter_src_ready),         //     sink0.ready
		.sink0_valid         (nios2_gen2_0_data_master_to_rx_buf_ram_s1_cmd_width_adapter_src_valid),         //          .valid
		.sink0_channel       (nios2_gen2_0_data_master_to_rx_buf_ram_s1_cmd_width_adapter_src_channel),       //          .channel
		.sink0_data          (nios2_gen2_0_data_master_to_rx_buf_ram_s1_cmd_width_adapter_src_data),          //          .data
		.sink0_startofpacket (nios2_gen2_0_data_master_to_rx_buf_ram_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket   (nios2_gen2_0_data_master_to_rx_buf_ram_s1_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink1_ready         (cmd_demux_001_src0_ready),                                                      //     sink1.ready
		.sink1_valid         (cmd_demux_001_src0_valid),                                                      //          .valid
		.sink1_channel       (cmd_demux_001_src0_channel),                                                    //          .channel
		.sink1_data          (cmd_demux_001_src0_data),                                                       //          .data
		.sink1_startofpacket (cmd_demux_001_src0_startofpacket),                                              //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src0_endofpacket)                                                 //          .endofpacket
	);

	eth_nios_v2_mm_interconnect_0_cmd_mux cmd_mux_009 (
		.clk                 (clk_0_clk_clk),                                  //       clk.clk
		.reset               (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_009_src_ready),                          //       src.ready
		.src_valid           (cmd_mux_009_src_valid),                          //          .valid
		.src_data            (cmd_mux_009_src_data),                           //          .data
		.src_channel         (cmd_mux_009_src_channel),                        //          .channel
		.src_startofpacket   (cmd_mux_009_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_mux_009_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_demux_src9_ready),                           //     sink0.ready
		.sink0_valid         (cmd_demux_src9_valid),                           //          .valid
		.sink0_channel       (cmd_demux_src9_channel),                         //          .channel
		.sink0_data          (cmd_demux_src9_data),                            //          .data
		.sink0_startofpacket (cmd_demux_src9_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src9_endofpacket)                      //          .endofpacket
	);

	eth_nios_v2_mm_interconnect_0_cmd_mux_010 cmd_mux_010 (
		.clk                 (clk_0_clk_clk),                                  //       clk.clk
		.reset               (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_010_src_ready),                          //       src.ready
		.src_valid           (cmd_mux_010_src_valid),                          //          .valid
		.src_data            (cmd_mux_010_src_data),                           //          .data
		.src_channel         (cmd_mux_010_src_channel),                        //          .channel
		.src_startofpacket   (cmd_mux_010_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_mux_010_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_demux_002_src1_ready),                       //     sink0.ready
		.sink0_valid         (cmd_demux_002_src1_valid),                       //          .valid
		.sink0_channel       (cmd_demux_002_src1_channel),                     //          .channel
		.sink0_data          (cmd_demux_002_src1_data),                        //          .data
		.sink0_startofpacket (cmd_demux_002_src1_startofpacket),               //          .startofpacket
		.sink0_endofpacket   (cmd_demux_002_src1_endofpacket)                  //          .endofpacket
	);

	eth_nios_v2_mm_interconnect_0_cmd_demux_003 rsp_demux (
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_008_src_ready),                           //      sink.ready
		.sink_channel       (router_008_src_channel),                         //          .channel
		.sink_data          (router_008_src_data),                            //          .data
		.sink_startofpacket (router_008_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_008_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_008_src_valid),                           //          .valid
		.src0_ready         (rsp_demux_src0_ready),                           //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                           //          .valid
		.src0_data          (rsp_demux_src0_data),                            //          .data
		.src0_channel       (rsp_demux_src0_channel),                         //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                   //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket)                      //          .endofpacket
	);

	eth_nios_v2_mm_interconnect_0_cmd_demux_003 rsp_demux_001 (
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_009_src_ready),                           //      sink.ready
		.sink_channel       (router_009_src_channel),                         //          .channel
		.sink_data          (router_009_src_data),                            //          .data
		.sink_startofpacket (router_009_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_009_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_009_src_valid),                           //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_001_src0_data),                        //          .data
		.src0_channel       (rsp_demux_001_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket)                  //          .endofpacket
	);

	eth_nios_v2_mm_interconnect_0_cmd_demux_003 rsp_demux_002 (
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_010_src_ready),                           //      sink.ready
		.sink_channel       (router_010_src_channel),                         //          .channel
		.sink_data          (router_010_src_data),                            //          .data
		.sink_startofpacket (router_010_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_010_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_010_src_valid),                           //          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_002_src0_data),                        //          .data
		.src0_channel       (rsp_demux_002_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket)                  //          .endofpacket
	);

	eth_nios_v2_mm_interconnect_0_cmd_demux_003 rsp_demux_003 (
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_011_src_ready),                           //      sink.ready
		.sink_channel       (router_011_src_channel),                         //          .channel
		.sink_data          (router_011_src_data),                            //          .data
		.sink_startofpacket (router_011_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_011_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_011_src_valid),                           //          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_003_src0_data),                        //          .data
		.src0_channel       (rsp_demux_003_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket)                  //          .endofpacket
	);

	eth_nios_v2_mm_interconnect_0_rsp_demux_004 rsp_demux_004 (
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_012_src_ready),                           //      sink.ready
		.sink_channel       (router_012_src_channel),                         //          .channel
		.sink_data          (router_012_src_data),                            //          .data
		.sink_startofpacket (router_012_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_012_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_012_src_valid),                           //          .valid
		.src0_ready         (rsp_demux_004_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_004_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_004_src0_data),                        //          .data
		.src0_channel       (rsp_demux_004_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_004_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_004_src0_endofpacket),                 //          .endofpacket
		.src1_ready         (rsp_demux_004_src1_ready),                       //      src1.ready
		.src1_valid         (rsp_demux_004_src1_valid),                       //          .valid
		.src1_data          (rsp_demux_004_src1_data),                        //          .data
		.src1_channel       (rsp_demux_004_src1_channel),                     //          .channel
		.src1_startofpacket (rsp_demux_004_src1_startofpacket),               //          .startofpacket
		.src1_endofpacket   (rsp_demux_004_src1_endofpacket)                  //          .endofpacket
	);

	eth_nios_v2_mm_interconnect_0_rsp_demux_005 rsp_demux_005 (
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_013_src_ready),                           //      sink.ready
		.sink_channel       (router_013_src_channel),                         //          .channel
		.sink_data          (router_013_src_data),                            //          .data
		.sink_startofpacket (router_013_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_013_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_013_src_valid),                           //          .valid
		.src0_ready         (rsp_demux_005_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_005_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_005_src0_data),                        //          .data
		.src0_channel       (rsp_demux_005_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_005_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_005_src0_endofpacket),                 //          .endofpacket
		.src1_ready         (rsp_demux_005_src1_ready),                       //      src1.ready
		.src1_valid         (rsp_demux_005_src1_valid),                       //          .valid
		.src1_data          (rsp_demux_005_src1_data),                        //          .data
		.src1_channel       (rsp_demux_005_src1_channel),                     //          .channel
		.src1_startofpacket (rsp_demux_005_src1_startofpacket),               //          .startofpacket
		.src1_endofpacket   (rsp_demux_005_src1_endofpacket),                 //          .endofpacket
		.src2_ready         (rsp_demux_005_src2_ready),                       //      src2.ready
		.src2_valid         (rsp_demux_005_src2_valid),                       //          .valid
		.src2_data          (rsp_demux_005_src2_data),                        //          .data
		.src2_channel       (rsp_demux_005_src2_channel),                     //          .channel
		.src2_startofpacket (rsp_demux_005_src2_startofpacket),               //          .startofpacket
		.src2_endofpacket   (rsp_demux_005_src2_endofpacket),                 //          .endofpacket
		.src3_ready         (rsp_demux_005_src3_ready),                       //      src3.ready
		.src3_valid         (rsp_demux_005_src3_valid),                       //          .valid
		.src3_data          (rsp_demux_005_src3_data),                        //          .data
		.src3_channel       (rsp_demux_005_src3_channel),                     //          .channel
		.src3_startofpacket (rsp_demux_005_src3_startofpacket),               //          .startofpacket
		.src3_endofpacket   (rsp_demux_005_src3_endofpacket),                 //          .endofpacket
		.src4_ready         (rsp_demux_005_src4_ready),                       //      src4.ready
		.src4_valid         (rsp_demux_005_src4_valid),                       //          .valid
		.src4_data          (rsp_demux_005_src4_data),                        //          .data
		.src4_channel       (rsp_demux_005_src4_channel),                     //          .channel
		.src4_startofpacket (rsp_demux_005_src4_startofpacket),               //          .startofpacket
		.src4_endofpacket   (rsp_demux_005_src4_endofpacket),                 //          .endofpacket
		.src5_ready         (rsp_demux_005_src5_ready),                       //      src5.ready
		.src5_valid         (rsp_demux_005_src5_valid),                       //          .valid
		.src5_data          (rsp_demux_005_src5_data),                        //          .data
		.src5_channel       (rsp_demux_005_src5_channel),                     //          .channel
		.src5_startofpacket (rsp_demux_005_src5_startofpacket),               //          .startofpacket
		.src5_endofpacket   (rsp_demux_005_src5_endofpacket)                  //          .endofpacket
	);

	eth_nios_v2_mm_interconnect_0_rsp_demux_006 rsp_demux_006 (
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_014_src_ready),                           //      sink.ready
		.sink_channel       (router_014_src_channel),                         //          .channel
		.sink_data          (router_014_src_data),                            //          .data
		.sink_startofpacket (router_014_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_014_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_014_src_valid),                           //          .valid
		.src0_ready         (rsp_demux_006_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_006_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_006_src0_data),                        //          .data
		.src0_channel       (rsp_demux_006_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_006_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_006_src0_endofpacket),                 //          .endofpacket
		.src1_ready         (rsp_demux_006_src1_ready),                       //      src1.ready
		.src1_valid         (rsp_demux_006_src1_valid),                       //          .valid
		.src1_data          (rsp_demux_006_src1_data),                        //          .data
		.src1_channel       (rsp_demux_006_src1_channel),                     //          .channel
		.src1_startofpacket (rsp_demux_006_src1_startofpacket),               //          .startofpacket
		.src1_endofpacket   (rsp_demux_006_src1_endofpacket)                  //          .endofpacket
	);

	eth_nios_v2_mm_interconnect_0_cmd_demux_003 rsp_demux_007 (
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_015_src_ready),                           //      sink.ready
		.sink_channel       (router_015_src_channel),                         //          .channel
		.sink_data          (router_015_src_data),                            //          .data
		.sink_startofpacket (router_015_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_015_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_015_src_valid),                           //          .valid
		.src0_ready         (rsp_demux_007_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_007_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_007_src0_data),                        //          .data
		.src0_channel       (rsp_demux_007_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_007_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_007_src0_endofpacket)                  //          .endofpacket
	);

	eth_nios_v2_mm_interconnect_0_rsp_demux_006 rsp_demux_008 (
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_016_src_ready),                           //      sink.ready
		.sink_channel       (router_016_src_channel),                         //          .channel
		.sink_data          (router_016_src_data),                            //          .data
		.sink_startofpacket (router_016_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_016_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_016_src_valid),                           //          .valid
		.src0_ready         (rsp_demux_008_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_008_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_008_src0_data),                        //          .data
		.src0_channel       (rsp_demux_008_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_008_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_008_src0_endofpacket),                 //          .endofpacket
		.src1_ready         (rsp_demux_008_src1_ready),                       //      src1.ready
		.src1_valid         (rsp_demux_008_src1_valid),                       //          .valid
		.src1_data          (rsp_demux_008_src1_data),                        //          .data
		.src1_channel       (rsp_demux_008_src1_channel),                     //          .channel
		.src1_startofpacket (rsp_demux_008_src1_startofpacket),               //          .startofpacket
		.src1_endofpacket   (rsp_demux_008_src1_endofpacket)                  //          .endofpacket
	);

	eth_nios_v2_mm_interconnect_0_cmd_demux_003 rsp_demux_009 (
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_017_src_ready),                           //      sink.ready
		.sink_channel       (router_017_src_channel),                         //          .channel
		.sink_data          (router_017_src_data),                            //          .data
		.sink_startofpacket (router_017_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_017_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_017_src_valid),                           //          .valid
		.src0_ready         (rsp_demux_009_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_009_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_009_src0_data),                        //          .data
		.src0_channel       (rsp_demux_009_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_009_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_009_src0_endofpacket)                  //          .endofpacket
	);

	eth_nios_v2_mm_interconnect_0_cmd_demux_001 rsp_demux_010 (
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_018_src_ready),                           //      sink.ready
		.sink_channel       (router_018_src_channel),                         //          .channel
		.sink_data          (router_018_src_data),                            //          .data
		.sink_startofpacket (router_018_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_018_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_018_src_valid),                           //          .valid
		.src0_ready         (rsp_demux_010_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_010_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_010_src0_data),                        //          .data
		.src0_channel       (rsp_demux_010_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_010_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_010_src0_endofpacket)                  //          .endofpacket
	);

	eth_nios_v2_mm_interconnect_0_rsp_mux rsp_mux (
		.clk                 (clk_0_clk_clk),                                                                 //       clk.clk
		.reset               (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                                // clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                                                             //       src.ready
		.src_valid           (rsp_mux_src_valid),                                                             //          .valid
		.src_data            (rsp_mux_src_data),                                                              //          .data
		.src_channel         (rsp_mux_src_channel),                                                           //          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                                                     //          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                                                       //          .endofpacket
		.sink0_ready         (rsp_demux_src0_ready),                                                          //     sink0.ready
		.sink0_valid         (rsp_demux_src0_valid),                                                          //          .valid
		.sink0_channel       (rsp_demux_src0_channel),                                                        //          .channel
		.sink0_data          (rsp_demux_src0_data),                                                           //          .data
		.sink0_startofpacket (rsp_demux_src0_startofpacket),                                                  //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src0_endofpacket),                                                    //          .endofpacket
		.sink1_ready         (rsp_demux_001_src0_ready),                                                      //     sink1.ready
		.sink1_valid         (rsp_demux_001_src0_valid),                                                      //          .valid
		.sink1_channel       (rsp_demux_001_src0_channel),                                                    //          .channel
		.sink1_data          (rsp_demux_001_src0_data),                                                       //          .data
		.sink1_startofpacket (rsp_demux_001_src0_startofpacket),                                              //          .startofpacket
		.sink1_endofpacket   (rsp_demux_001_src0_endofpacket),                                                //          .endofpacket
		.sink2_ready         (rsp_demux_002_src0_ready),                                                      //     sink2.ready
		.sink2_valid         (rsp_demux_002_src0_valid),                                                      //          .valid
		.sink2_channel       (rsp_demux_002_src0_channel),                                                    //          .channel
		.sink2_data          (rsp_demux_002_src0_data),                                                       //          .data
		.sink2_startofpacket (rsp_demux_002_src0_startofpacket),                                              //          .startofpacket
		.sink2_endofpacket   (rsp_demux_002_src0_endofpacket),                                                //          .endofpacket
		.sink3_ready         (rsp_demux_003_src0_ready),                                                      //     sink3.ready
		.sink3_valid         (rsp_demux_003_src0_valid),                                                      //          .valid
		.sink3_channel       (rsp_demux_003_src0_channel),                                                    //          .channel
		.sink3_data          (rsp_demux_003_src0_data),                                                       //          .data
		.sink3_startofpacket (rsp_demux_003_src0_startofpacket),                                              //          .startofpacket
		.sink3_endofpacket   (rsp_demux_003_src0_endofpacket),                                                //          .endofpacket
		.sink4_ready         (rsp_demux_004_src0_ready),                                                      //     sink4.ready
		.sink4_valid         (rsp_demux_004_src0_valid),                                                      //          .valid
		.sink4_channel       (rsp_demux_004_src0_channel),                                                    //          .channel
		.sink4_data          (rsp_demux_004_src0_data),                                                       //          .data
		.sink4_startofpacket (rsp_demux_004_src0_startofpacket),                                              //          .startofpacket
		.sink4_endofpacket   (rsp_demux_004_src0_endofpacket),                                                //          .endofpacket
		.sink5_ready         (rsp_demux_005_src0_ready),                                                      //     sink5.ready
		.sink5_valid         (rsp_demux_005_src0_valid),                                                      //          .valid
		.sink5_channel       (rsp_demux_005_src0_channel),                                                    //          .channel
		.sink5_data          (rsp_demux_005_src0_data),                                                       //          .data
		.sink5_startofpacket (rsp_demux_005_src0_startofpacket),                                              //          .startofpacket
		.sink5_endofpacket   (rsp_demux_005_src0_endofpacket),                                                //          .endofpacket
		.sink6_ready         (header_ram_s1_to_nios2_gen2_0_data_master_rsp_width_adapter_src_ready),         //     sink6.ready
		.sink6_valid         (header_ram_s1_to_nios2_gen2_0_data_master_rsp_width_adapter_src_valid),         //          .valid
		.sink6_channel       (header_ram_s1_to_nios2_gen2_0_data_master_rsp_width_adapter_src_channel),       //          .channel
		.sink6_data          (header_ram_s1_to_nios2_gen2_0_data_master_rsp_width_adapter_src_data),          //          .data
		.sink6_startofpacket (header_ram_s1_to_nios2_gen2_0_data_master_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink6_endofpacket   (header_ram_s1_to_nios2_gen2_0_data_master_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink7_ready         (rsp_demux_007_src0_ready),                                                      //     sink7.ready
		.sink7_valid         (rsp_demux_007_src0_valid),                                                      //          .valid
		.sink7_channel       (rsp_demux_007_src0_channel),                                                    //          .channel
		.sink7_data          (rsp_demux_007_src0_data),                                                       //          .data
		.sink7_startofpacket (rsp_demux_007_src0_startofpacket),                                              //          .startofpacket
		.sink7_endofpacket   (rsp_demux_007_src0_endofpacket),                                                //          .endofpacket
		.sink8_ready         (rx_buf_ram_s1_to_nios2_gen2_0_data_master_rsp_width_adapter_src_ready),         //     sink8.ready
		.sink8_valid         (rx_buf_ram_s1_to_nios2_gen2_0_data_master_rsp_width_adapter_src_valid),         //          .valid
		.sink8_channel       (rx_buf_ram_s1_to_nios2_gen2_0_data_master_rsp_width_adapter_src_channel),       //          .channel
		.sink8_data          (rx_buf_ram_s1_to_nios2_gen2_0_data_master_rsp_width_adapter_src_data),          //          .data
		.sink8_startofpacket (rx_buf_ram_s1_to_nios2_gen2_0_data_master_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink8_endofpacket   (rx_buf_ram_s1_to_nios2_gen2_0_data_master_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink9_ready         (rsp_demux_009_src0_ready),                                                      //     sink9.ready
		.sink9_valid         (rsp_demux_009_src0_valid),                                                      //          .valid
		.sink9_channel       (rsp_demux_009_src0_channel),                                                    //          .channel
		.sink9_data          (rsp_demux_009_src0_data),                                                       //          .data
		.sink9_startofpacket (rsp_demux_009_src0_startofpacket),                                              //          .startofpacket
		.sink9_endofpacket   (rsp_demux_009_src0_endofpacket)                                                 //          .endofpacket
	);

	eth_nios_v2_mm_interconnect_0_rsp_mux_001 rsp_mux_001 (
		.clk                 (clk_0_clk_clk),                                  //       clk.clk
		.reset               (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                          //       src.ready
		.src_valid           (rsp_mux_001_src_valid),                          //          .valid
		.src_data            (rsp_mux_001_src_data),                           //          .data
		.src_channel         (rsp_mux_001_src_channel),                        //          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (rsp_demux_008_src1_ready),                       //     sink0.ready
		.sink0_valid         (rsp_demux_008_src1_valid),                       //          .valid
		.sink0_channel       (rsp_demux_008_src1_channel),                     //          .channel
		.sink0_data          (rsp_demux_008_src1_data),                        //          .data
		.sink0_startofpacket (rsp_demux_008_src1_startofpacket),               //          .startofpacket
		.sink0_endofpacket   (rsp_demux_008_src1_endofpacket)                  //          .endofpacket
	);

	eth_nios_v2_mm_interconnect_0_rsp_mux_002 rsp_mux_002 (
		.clk                 (clk_0_clk_clk),                                  //       clk.clk
		.reset               (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_002_src_ready),                          //       src.ready
		.src_valid           (rsp_mux_002_src_valid),                          //          .valid
		.src_data            (rsp_mux_002_src_data),                           //          .data
		.src_channel         (rsp_mux_002_src_channel),                        //          .channel
		.src_startofpacket   (rsp_mux_002_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (rsp_mux_002_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (rsp_demux_006_src1_ready),                       //     sink0.ready
		.sink0_valid         (rsp_demux_006_src1_valid),                       //          .valid
		.sink0_channel       (rsp_demux_006_src1_channel),                     //          .channel
		.sink0_data          (rsp_demux_006_src1_data),                        //          .data
		.sink0_startofpacket (rsp_demux_006_src1_startofpacket),               //          .startofpacket
		.sink0_endofpacket   (rsp_demux_006_src1_endofpacket),                 //          .endofpacket
		.sink1_ready         (rsp_demux_010_src0_ready),                       //     sink1.ready
		.sink1_valid         (rsp_demux_010_src0_valid),                       //          .valid
		.sink1_channel       (rsp_demux_010_src0_channel),                     //          .channel
		.sink1_data          (rsp_demux_010_src0_data),                        //          .data
		.sink1_startofpacket (rsp_demux_010_src0_startofpacket),               //          .startofpacket
		.sink1_endofpacket   (rsp_demux_010_src0_endofpacket)                  //          .endofpacket
	);

	eth_nios_v2_mm_interconnect_0_rsp_mux_003 rsp_mux_003 (
		.clk                 (clk_0_clk_clk),                                  //       clk.clk
		.reset               (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_003_src_ready),                          //       src.ready
		.src_valid           (rsp_mux_003_src_valid),                          //          .valid
		.src_data            (rsp_mux_003_src_data),                           //          .data
		.src_channel         (rsp_mux_003_src_channel),                        //          .channel
		.src_startofpacket   (rsp_mux_003_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (rsp_mux_003_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (rsp_demux_005_src1_ready),                       //     sink0.ready
		.sink0_valid         (rsp_demux_005_src1_valid),                       //          .valid
		.sink0_channel       (rsp_demux_005_src1_channel),                     //          .channel
		.sink0_data          (rsp_demux_005_src1_data),                        //          .data
		.sink0_startofpacket (rsp_demux_005_src1_startofpacket),               //          .startofpacket
		.sink0_endofpacket   (rsp_demux_005_src1_endofpacket)                  //          .endofpacket
	);

	eth_nios_v2_mm_interconnect_0_rsp_mux_003 rsp_mux_004 (
		.clk                 (clk_0_clk_clk),                                  //       clk.clk
		.reset               (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_004_src_ready),                          //       src.ready
		.src_valid           (rsp_mux_004_src_valid),                          //          .valid
		.src_data            (rsp_mux_004_src_data),                           //          .data
		.src_channel         (rsp_mux_004_src_channel),                        //          .channel
		.src_startofpacket   (rsp_mux_004_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (rsp_mux_004_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (rsp_demux_005_src2_ready),                       //     sink0.ready
		.sink0_valid         (rsp_demux_005_src2_valid),                       //          .valid
		.sink0_channel       (rsp_demux_005_src2_channel),                     //          .channel
		.sink0_data          (rsp_demux_005_src2_data),                        //          .data
		.sink0_startofpacket (rsp_demux_005_src2_startofpacket),               //          .startofpacket
		.sink0_endofpacket   (rsp_demux_005_src2_endofpacket)                  //          .endofpacket
	);

	eth_nios_v2_mm_interconnect_0_rsp_mux_003 rsp_mux_005 (
		.clk                 (clk_0_clk_clk),                                  //       clk.clk
		.reset               (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_005_src_ready),                          //       src.ready
		.src_valid           (rsp_mux_005_src_valid),                          //          .valid
		.src_data            (rsp_mux_005_src_data),                           //          .data
		.src_channel         (rsp_mux_005_src_channel),                        //          .channel
		.src_startofpacket   (rsp_mux_005_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (rsp_mux_005_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (rsp_demux_005_src3_ready),                       //     sink0.ready
		.sink0_valid         (rsp_demux_005_src3_valid),                       //          .valid
		.sink0_channel       (rsp_demux_005_src3_channel),                     //          .channel
		.sink0_data          (rsp_demux_005_src3_data),                        //          .data
		.sink0_startofpacket (rsp_demux_005_src3_startofpacket),               //          .startofpacket
		.sink0_endofpacket   (rsp_demux_005_src3_endofpacket)                  //          .endofpacket
	);

	eth_nios_v2_mm_interconnect_0_rsp_mux_003 rsp_mux_006 (
		.clk                 (clk_0_clk_clk),                                  //       clk.clk
		.reset               (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_006_src_ready),                          //       src.ready
		.src_valid           (rsp_mux_006_src_valid),                          //          .valid
		.src_data            (rsp_mux_006_src_data),                           //          .data
		.src_channel         (rsp_mux_006_src_channel),                        //          .channel
		.src_startofpacket   (rsp_mux_006_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (rsp_mux_006_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (rsp_demux_005_src4_ready),                       //     sink0.ready
		.sink0_valid         (rsp_demux_005_src4_valid),                       //          .valid
		.sink0_channel       (rsp_demux_005_src4_channel),                     //          .channel
		.sink0_data          (rsp_demux_005_src4_data),                        //          .data
		.sink0_startofpacket (rsp_demux_005_src4_startofpacket),               //          .startofpacket
		.sink0_endofpacket   (rsp_demux_005_src4_endofpacket)                  //          .endofpacket
	);

	eth_nios_v2_mm_interconnect_0_rsp_mux_007 rsp_mux_007 (
		.clk                 (clk_0_clk_clk),                                  //       clk.clk
		.reset               (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_007_src_ready),                          //       src.ready
		.src_valid           (rsp_mux_007_src_valid),                          //          .valid
		.src_data            (rsp_mux_007_src_data),                           //          .data
		.src_channel         (rsp_mux_007_src_channel),                        //          .channel
		.src_startofpacket   (rsp_mux_007_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (rsp_mux_007_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (rsp_demux_004_src1_ready),                       //     sink0.ready
		.sink0_valid         (rsp_demux_004_src1_valid),                       //          .valid
		.sink0_channel       (rsp_demux_004_src1_channel),                     //          .channel
		.sink0_data          (rsp_demux_004_src1_data),                        //          .data
		.sink0_startofpacket (rsp_demux_004_src1_startofpacket),               //          .startofpacket
		.sink0_endofpacket   (rsp_demux_004_src1_endofpacket),                 //          .endofpacket
		.sink1_ready         (rsp_demux_005_src5_ready),                       //     sink1.ready
		.sink1_valid         (rsp_demux_005_src5_valid),                       //          .valid
		.sink1_channel       (rsp_demux_005_src5_channel),                     //          .channel
		.sink1_data          (rsp_demux_005_src5_data),                        //          .data
		.sink1_startofpacket (rsp_demux_005_src5_startofpacket),               //          .startofpacket
		.sink1_endofpacket   (rsp_demux_005_src5_endofpacket)                  //          .endofpacket
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (76),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (79),
		.IN_PKT_BURSTWRAP_L            (77),
		.IN_PKT_BURST_SIZE_H           (82),
		.IN_PKT_BURST_SIZE_L           (80),
		.IN_PKT_RESPONSE_STATUS_H      (106),
		.IN_PKT_RESPONSE_STATUS_L      (105),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (84),
		.IN_PKT_BURST_TYPE_L           (83),
		.IN_PKT_ORI_BURST_SIZE_L       (107),
		.IN_PKT_ORI_BURST_SIZE_H       (109),
		.IN_ST_DATA_W                  (110),
		.OUT_PKT_ADDR_H                (40),
		.OUT_PKT_ADDR_L                (9),
		.OUT_PKT_DATA_H                (7),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (8),
		.OUT_PKT_BYTEEN_L              (8),
		.OUT_PKT_BYTE_CNT_H            (49),
		.OUT_PKT_BYTE_CNT_L            (47),
		.OUT_PKT_TRANS_COMPRESSED_READ (41),
		.OUT_PKT_BURST_SIZE_H          (55),
		.OUT_PKT_BURST_SIZE_L          (53),
		.OUT_PKT_RESPONSE_STATUS_H     (79),
		.OUT_PKT_RESPONSE_STATUS_L     (78),
		.OUT_PKT_TRANS_EXCLUSIVE       (46),
		.OUT_PKT_BURST_TYPE_H          (57),
		.OUT_PKT_BURST_TYPE_L          (56),
		.OUT_PKT_ORI_BURST_SIZE_L      (80),
		.OUT_PKT_ORI_BURST_SIZE_H      (82),
		.OUT_ST_DATA_W                 (83),
		.ST_CHANNEL_W                  (11),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) nios2_gen2_0_data_master_to_header_ram_s1_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                                                 //       clk.clk
		.reset                (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                                // clk_reset.reset
		.in_valid             (cmd_demux_src6_valid),                                                          //      sink.valid
		.in_channel           (cmd_demux_src6_channel),                                                        //          .channel
		.in_startofpacket     (cmd_demux_src6_startofpacket),                                                  //          .startofpacket
		.in_endofpacket       (cmd_demux_src6_endofpacket),                                                    //          .endofpacket
		.in_ready             (cmd_demux_src6_ready),                                                          //          .ready
		.in_data              (cmd_demux_src6_data),                                                           //          .data
		.out_endofpacket      (nios2_gen2_0_data_master_to_header_ram_s1_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (nios2_gen2_0_data_master_to_header_ram_s1_cmd_width_adapter_src_data),          //          .data
		.out_channel          (nios2_gen2_0_data_master_to_header_ram_s1_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (nios2_gen2_0_data_master_to_header_ram_s1_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (nios2_gen2_0_data_master_to_header_ram_s1_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (nios2_gen2_0_data_master_to_header_ram_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                         // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (76),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (79),
		.IN_PKT_BURSTWRAP_L            (77),
		.IN_PKT_BURST_SIZE_H           (82),
		.IN_PKT_BURST_SIZE_L           (80),
		.IN_PKT_RESPONSE_STATUS_H      (106),
		.IN_PKT_RESPONSE_STATUS_L      (105),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (84),
		.IN_PKT_BURST_TYPE_L           (83),
		.IN_PKT_ORI_BURST_SIZE_L       (107),
		.IN_PKT_ORI_BURST_SIZE_H       (109),
		.IN_ST_DATA_W                  (110),
		.OUT_PKT_ADDR_H                (40),
		.OUT_PKT_ADDR_L                (9),
		.OUT_PKT_DATA_H                (7),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (8),
		.OUT_PKT_BYTEEN_L              (8),
		.OUT_PKT_BYTE_CNT_H            (49),
		.OUT_PKT_BYTE_CNT_L            (47),
		.OUT_PKT_TRANS_COMPRESSED_READ (41),
		.OUT_PKT_BURST_SIZE_H          (55),
		.OUT_PKT_BURST_SIZE_L          (53),
		.OUT_PKT_RESPONSE_STATUS_H     (79),
		.OUT_PKT_RESPONSE_STATUS_L     (78),
		.OUT_PKT_TRANS_EXCLUSIVE       (46),
		.OUT_PKT_BURST_TYPE_H          (57),
		.OUT_PKT_BURST_TYPE_L          (56),
		.OUT_PKT_ORI_BURST_SIZE_L      (80),
		.OUT_PKT_ORI_BURST_SIZE_H      (82),
		.OUT_ST_DATA_W                 (83),
		.ST_CHANNEL_W                  (11),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) nios2_gen2_0_data_master_to_rx_buf_ram_s1_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                                                 //       clk.clk
		.reset                (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                                // clk_reset.reset
		.in_valid             (cmd_demux_src8_valid),                                                          //      sink.valid
		.in_channel           (cmd_demux_src8_channel),                                                        //          .channel
		.in_startofpacket     (cmd_demux_src8_startofpacket),                                                  //          .startofpacket
		.in_endofpacket       (cmd_demux_src8_endofpacket),                                                    //          .endofpacket
		.in_ready             (cmd_demux_src8_ready),                                                          //          .ready
		.in_data              (cmd_demux_src8_data),                                                           //          .data
		.out_endofpacket      (nios2_gen2_0_data_master_to_rx_buf_ram_s1_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (nios2_gen2_0_data_master_to_rx_buf_ram_s1_cmd_width_adapter_src_data),          //          .data
		.out_channel          (nios2_gen2_0_data_master_to_rx_buf_ram_s1_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (nios2_gen2_0_data_master_to_rx_buf_ram_s1_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (nios2_gen2_0_data_master_to_rx_buf_ram_s1_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (nios2_gen2_0_data_master_to_rx_buf_ram_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                         // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (40),
		.IN_PKT_ADDR_L                 (9),
		.IN_PKT_DATA_H                 (7),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (8),
		.IN_PKT_BYTEEN_L               (8),
		.IN_PKT_BYTE_CNT_H             (49),
		.IN_PKT_BYTE_CNT_L             (47),
		.IN_PKT_TRANS_COMPRESSED_READ  (41),
		.IN_PKT_TRANS_WRITE            (43),
		.IN_PKT_BURSTWRAP_H            (52),
		.IN_PKT_BURSTWRAP_L            (50),
		.IN_PKT_BURST_SIZE_H           (55),
		.IN_PKT_BURST_SIZE_L           (53),
		.IN_PKT_RESPONSE_STATUS_H      (79),
		.IN_PKT_RESPONSE_STATUS_L      (78),
		.IN_PKT_TRANS_EXCLUSIVE        (46),
		.IN_PKT_BURST_TYPE_H           (57),
		.IN_PKT_BURST_TYPE_L           (56),
		.IN_PKT_ORI_BURST_SIZE_L       (80),
		.IN_PKT_ORI_BURST_SIZE_H       (82),
		.IN_ST_DATA_W                  (83),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (76),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (82),
		.OUT_PKT_BURST_SIZE_L          (80),
		.OUT_PKT_RESPONSE_STATUS_H     (106),
		.OUT_PKT_RESPONSE_STATUS_L     (105),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (84),
		.OUT_PKT_BURST_TYPE_L          (83),
		.OUT_PKT_ORI_BURST_SIZE_L      (107),
		.OUT_PKT_ORI_BURST_SIZE_H      (109),
		.OUT_ST_DATA_W                 (110),
		.ST_CHANNEL_W                  (11),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) header_ram_s1_to_nios2_gen2_0_data_master_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                                                 //       clk.clk
		.reset                (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                                // clk_reset.reset
		.in_valid             (rsp_demux_006_src0_valid),                                                      //      sink.valid
		.in_channel           (rsp_demux_006_src0_channel),                                                    //          .channel
		.in_startofpacket     (rsp_demux_006_src0_startofpacket),                                              //          .startofpacket
		.in_endofpacket       (rsp_demux_006_src0_endofpacket),                                                //          .endofpacket
		.in_ready             (rsp_demux_006_src0_ready),                                                      //          .ready
		.in_data              (rsp_demux_006_src0_data),                                                       //          .data
		.out_endofpacket      (header_ram_s1_to_nios2_gen2_0_data_master_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (header_ram_s1_to_nios2_gen2_0_data_master_rsp_width_adapter_src_data),          //          .data
		.out_channel          (header_ram_s1_to_nios2_gen2_0_data_master_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (header_ram_s1_to_nios2_gen2_0_data_master_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (header_ram_s1_to_nios2_gen2_0_data_master_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (header_ram_s1_to_nios2_gen2_0_data_master_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                         // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (40),
		.IN_PKT_ADDR_L                 (9),
		.IN_PKT_DATA_H                 (7),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (8),
		.IN_PKT_BYTEEN_L               (8),
		.IN_PKT_BYTE_CNT_H             (49),
		.IN_PKT_BYTE_CNT_L             (47),
		.IN_PKT_TRANS_COMPRESSED_READ  (41),
		.IN_PKT_TRANS_WRITE            (43),
		.IN_PKT_BURSTWRAP_H            (52),
		.IN_PKT_BURSTWRAP_L            (50),
		.IN_PKT_BURST_SIZE_H           (55),
		.IN_PKT_BURST_SIZE_L           (53),
		.IN_PKT_RESPONSE_STATUS_H      (79),
		.IN_PKT_RESPONSE_STATUS_L      (78),
		.IN_PKT_TRANS_EXCLUSIVE        (46),
		.IN_PKT_BURST_TYPE_H           (57),
		.IN_PKT_BURST_TYPE_L           (56),
		.IN_PKT_ORI_BURST_SIZE_L       (80),
		.IN_PKT_ORI_BURST_SIZE_H       (82),
		.IN_ST_DATA_W                  (83),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (76),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (82),
		.OUT_PKT_BURST_SIZE_L          (80),
		.OUT_PKT_RESPONSE_STATUS_H     (106),
		.OUT_PKT_RESPONSE_STATUS_L     (105),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (84),
		.OUT_PKT_BURST_TYPE_L          (83),
		.OUT_PKT_ORI_BURST_SIZE_L      (107),
		.OUT_PKT_ORI_BURST_SIZE_H      (109),
		.OUT_ST_DATA_W                 (110),
		.ST_CHANNEL_W                  (11),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) rx_buf_ram_s1_to_nios2_gen2_0_data_master_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                                                 //       clk.clk
		.reset                (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                                // clk_reset.reset
		.in_valid             (rsp_demux_008_src0_valid),                                                      //      sink.valid
		.in_channel           (rsp_demux_008_src0_channel),                                                    //          .channel
		.in_startofpacket     (rsp_demux_008_src0_startofpacket),                                              //          .startofpacket
		.in_endofpacket       (rsp_demux_008_src0_endofpacket),                                                //          .endofpacket
		.in_ready             (rsp_demux_008_src0_ready),                                                      //          .ready
		.in_data              (rsp_demux_008_src0_data),                                                       //          .data
		.out_endofpacket      (rx_buf_ram_s1_to_nios2_gen2_0_data_master_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (rx_buf_ram_s1_to_nios2_gen2_0_data_master_rsp_width_adapter_src_data),          //          .data
		.out_channel          (rx_buf_ram_s1_to_nios2_gen2_0_data_master_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (rx_buf_ram_s1_to_nios2_gen2_0_data_master_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (rx_buf_ram_s1_to_nios2_gen2_0_data_master_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (rx_buf_ram_s1_to_nios2_gen2_0_data_master_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                         // (terminated)
	);

	eth_nios_v2_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (clk_0_clk_clk),                                            // in_clk_0.clk
		.in_rst_0_reset (nios2_gen2_0_reset_reset_bridge_in_reset_reset),           // in_rst_0.reset
		.in_0_data      (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                             //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                            //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                            //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                             //         .error
	);

	eth_nios_v2_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_001 (
		.in_clk_0_clk   (clk_0_clk_clk),                                  // in_clk_0.clk
		.in_rst_0_reset (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (tse_control_port_agent_rdata_fifo_src_data),     //     in_0.data
		.in_0_valid     (tse_control_port_agent_rdata_fifo_src_valid),    //         .valid
		.in_0_ready     (tse_control_port_agent_rdata_fifo_src_ready),    //         .ready
		.out_0_data     (avalon_st_adapter_001_out_0_data),               //    out_0.data
		.out_0_valid    (avalon_st_adapter_001_out_0_valid),              //         .valid
		.out_0_ready    (avalon_st_adapter_001_out_0_ready),              //         .ready
		.out_0_error    (avalon_st_adapter_001_out_0_error)               //         .error
	);

	eth_nios_v2_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_002 (
		.in_clk_0_clk   (clk_0_clk_clk),                                  // in_clk_0.clk
		.in_rst_0_reset (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (tx_dma_csr_agent_rdata_fifo_src_data),           //     in_0.data
		.in_0_valid     (tx_dma_csr_agent_rdata_fifo_src_valid),          //         .valid
		.in_0_ready     (tx_dma_csr_agent_rdata_fifo_src_ready),          //         .ready
		.out_0_data     (avalon_st_adapter_002_out_0_data),               //    out_0.data
		.out_0_valid    (avalon_st_adapter_002_out_0_valid),              //         .valid
		.out_0_ready    (avalon_st_adapter_002_out_0_ready),              //         .ready
		.out_0_error    (avalon_st_adapter_002_out_0_error)               //         .error
	);

	eth_nios_v2_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_003 (
		.in_clk_0_clk   (clk_0_clk_clk),                                  // in_clk_0.clk
		.in_rst_0_reset (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (rx_dma_csr_agent_rdata_fifo_src_data),           //     in_0.data
		.in_0_valid     (rx_dma_csr_agent_rdata_fifo_src_valid),          //         .valid
		.in_0_ready     (rx_dma_csr_agent_rdata_fifo_src_ready),          //         .ready
		.out_0_data     (avalon_st_adapter_003_out_0_data),               //    out_0.data
		.out_0_valid    (avalon_st_adapter_003_out_0_valid),              //         .valid
		.out_0_ready    (avalon_st_adapter_003_out_0_ready),              //         .ready
		.out_0_error    (avalon_st_adapter_003_out_0_error)               //         .error
	);

	eth_nios_v2_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_004 (
		.in_clk_0_clk   (clk_0_clk_clk),                                           // in_clk_0.clk
		.in_rst_0_reset (nios2_gen2_0_reset_reset_bridge_in_reset_reset),          // in_rst_0.reset
		.in_0_data      (nios2_gen2_0_debug_mem_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (nios2_gen2_0_debug_mem_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (nios2_gen2_0_debug_mem_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_004_out_0_data),                        //    out_0.data
		.out_0_valid    (avalon_st_adapter_004_out_0_valid),                       //         .valid
		.out_0_ready    (avalon_st_adapter_004_out_0_ready),                       //         .ready
		.out_0_error    (avalon_st_adapter_004_out_0_error)                        //         .error
	);

	eth_nios_v2_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_005 (
		.in_clk_0_clk   (clk_0_clk_clk),                                  // in_clk_0.clk
		.in_rst_0_reset (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (system_ram_s1_agent_rdata_fifo_src_data),        //     in_0.data
		.in_0_valid     (system_ram_s1_agent_rdata_fifo_src_valid),       //         .valid
		.in_0_ready     (system_ram_s1_agent_rdata_fifo_src_ready),       //         .ready
		.out_0_data     (avalon_st_adapter_005_out_0_data),               //    out_0.data
		.out_0_valid    (avalon_st_adapter_005_out_0_valid),              //         .valid
		.out_0_ready    (avalon_st_adapter_005_out_0_ready),              //         .ready
		.out_0_error    (avalon_st_adapter_005_out_0_error)               //         .error
	);

	eth_nios_v2_mm_interconnect_0_avalon_st_adapter_006 #(
		.inBitsPerSymbol (10),
		.inUsePackets    (0),
		.inDataWidth     (10),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (10),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_006 (
		.in_clk_0_clk   (clk_0_clk_clk),                                  // in_clk_0.clk
		.in_rst_0_reset (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (header_ram_s1_agent_rdata_fifo_src_data),        //     in_0.data
		.in_0_valid     (header_ram_s1_agent_rdata_fifo_src_valid),       //         .valid
		.in_0_ready     (header_ram_s1_agent_rdata_fifo_src_ready),       //         .ready
		.out_0_data     (avalon_st_adapter_006_out_0_data),               //    out_0.data
		.out_0_valid    (avalon_st_adapter_006_out_0_valid),              //         .valid
		.out_0_ready    (avalon_st_adapter_006_out_0_ready),              //         .ready
		.out_0_error    (avalon_st_adapter_006_out_0_error)               //         .error
	);

	eth_nios_v2_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_007 (
		.in_clk_0_clk   (clk_0_clk_clk),                                  // in_clk_0.clk
		.in_rst_0_reset (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (timer_0_s1_agent_rdata_fifo_src_data),           //     in_0.data
		.in_0_valid     (timer_0_s1_agent_rdata_fifo_src_valid),          //         .valid
		.in_0_ready     (timer_0_s1_agent_rdata_fifo_src_ready),          //         .ready
		.out_0_data     (avalon_st_adapter_007_out_0_data),               //    out_0.data
		.out_0_valid    (avalon_st_adapter_007_out_0_valid),              //         .valid
		.out_0_ready    (avalon_st_adapter_007_out_0_ready),              //         .ready
		.out_0_error    (avalon_st_adapter_007_out_0_error)               //         .error
	);

	eth_nios_v2_mm_interconnect_0_avalon_st_adapter_006 #(
		.inBitsPerSymbol (10),
		.inUsePackets    (0),
		.inDataWidth     (10),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (10),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_008 (
		.in_clk_0_clk   (clk_0_clk_clk),                                  // in_clk_0.clk
		.in_rst_0_reset (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (rx_buf_ram_s1_agent_rdata_fifo_src_data),        //     in_0.data
		.in_0_valid     (rx_buf_ram_s1_agent_rdata_fifo_src_valid),       //         .valid
		.in_0_ready     (rx_buf_ram_s1_agent_rdata_fifo_src_ready),       //         .ready
		.out_0_data     (avalon_st_adapter_008_out_0_data),               //    out_0.data
		.out_0_valid    (avalon_st_adapter_008_out_0_valid),              //         .valid
		.out_0_ready    (avalon_st_adapter_008_out_0_ready),              //         .ready
		.out_0_error    (avalon_st_adapter_008_out_0_error)               //         .error
	);

	eth_nios_v2_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_009 (
		.in_clk_0_clk   (clk_0_clk_clk),                                  // in_clk_0.clk
		.in_rst_0_reset (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (eth_irq_pio_s1_agent_rdata_fifo_src_data),       //     in_0.data
		.in_0_valid     (eth_irq_pio_s1_agent_rdata_fifo_src_valid),      //         .valid
		.in_0_ready     (eth_irq_pio_s1_agent_rdata_fifo_src_ready),      //         .ready
		.out_0_data     (avalon_st_adapter_009_out_0_data),               //    out_0.data
		.out_0_valid    (avalon_st_adapter_009_out_0_valid),              //         .valid
		.out_0_ready    (avalon_st_adapter_009_out_0_ready),              //         .ready
		.out_0_error    (avalon_st_adapter_009_out_0_error)               //         .error
	);

	eth_nios_v2_mm_interconnect_0_avalon_st_adapter_006 #(
		.inBitsPerSymbol (10),
		.inUsePackets    (0),
		.inDataWidth     (10),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (10),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_010 (
		.in_clk_0_clk   (clk_0_clk_clk),                                  // in_clk_0.clk
		.in_rst_0_reset (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (tx_buff_ram_s1_agent_rdata_fifo_src_data),       //     in_0.data
		.in_0_valid     (tx_buff_ram_s1_agent_rdata_fifo_src_valid),      //         .valid
		.in_0_ready     (tx_buff_ram_s1_agent_rdata_fifo_src_ready),      //         .ready
		.out_0_data     (avalon_st_adapter_010_out_0_data),               //    out_0.data
		.out_0_valid    (avalon_st_adapter_010_out_0_valid),              //         .valid
		.out_0_ready    (avalon_st_adapter_010_out_0_ready),              //         .ready
		.out_0_error    (avalon_st_adapter_010_out_0_error)               //         .error
	);

endmodule
