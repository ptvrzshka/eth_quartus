// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "10/22/2024 16:03:28"
                                                                                
// Verilog Test Bench template for design : hyperRAMcontroller
// 
// Simulation tool : ModelSim (Verilog)
// 

`timescale 1 ps/ 1 ps
module hyperRAMcontroller_vlg_tst();
// constants                                           
// general purpose registers
reg eachvec;
// test vector input registers
reg RreqFifoRead;
reg WreqFifoWrite;
reg [22:0] adrQueury;
reg clkData;
reg clk_50;
reg clockData;
reg clockQueury;
reg [7:0] treg_dataChip;
reg [7:0] dataInputFifoWrite;
reg reset;
reg rwFlagQueury;
reg treg_rwdsChip;
reg [10:0] transactionLenQueury;
// wires                                               
wire clock200;
wire clock200Shifted;
wire clock400;
wire clockChip;
wire clockChipN;
wire csChip;
wire [7:0]  dataChip;
wire [7:0]  dataOutFifoRead;
wire [6:0]  numInQueuryInfo;
wire resetnChip;
wire rwdsChip;
wire transferingStatusInfo;

// assign statements (if any)                          
assign dataChip = treg_dataChip;
assign rwdsChip = treg_rwdsChip;
hyperRAMcontroller i1 (
// port map - connection between master ports and signals/registers   
	.RreqFifoRead(RreqFifoRead),
	.WreqFifoWrite(WreqFifoWrite),
	.adrQueury(adrQueury),
	.clkData(clkData),
	.clk_50(clk_50),
	.clock200(clock200),
	.clock200Shifted(clock200Shifted),
	.clock400(clock400),
	.clockChip(clockChip),
	.clockChipN(clockChipN),
	.clockData(clockData),
	.clockQueury(clockQueury),
	.csChip(csChip),
	.dataChip(dataChip),
	.dataInputFifoWrite(dataInputFifoWrite),
	.dataOutFifoRead(dataOutFifoRead),
	.numInQueuryInfo(numInQueuryInfo),
	.reset(reset),
	.resetnChip(resetnChip),
	.rwFlagQueury(rwFlagQueury),
	.rwdsChip(rwdsChip),
	.transactionLenQueury(transactionLenQueury),
	.transferingStatusInfo(transferingStatusInfo)
);
initial                                                
begin                                                  
// code that executes only once                        
// insert code here --> begin                          
                                                       
// --> end                                             
$display("Running testbench");                       
end                                                    
always                                                 
// optional sensitivity list                           
// @(event1 or event2 or .... eventn)                  
begin                                                  
// code executes for every event on sensitivity list   
// insert code here --> begin                          
                                                       
@eachvec;                                              
// --> end                                             
end                                                    
endmodule

